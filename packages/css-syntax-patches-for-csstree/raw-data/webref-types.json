{
	"abs()": {
		"syntax": "abs( <calc-sum> )"
	},
	"absolute-color-base": {
		"syntax": "<hex-color> | <absolute-color-function> | <named-color> | transparent"
	},
	"absolute-color-function": {
		"syntax": "<rgb()> | <rgba()> | <hsl()> | <hsla()> | <hwb()> | <lab()> | <lch()> | <oklab()> | <oklch()> | <color()>"
	},
	"absolute-size": {
		"syntax": "xx-small | x-small | small | medium | large | x-large | xx-large | xxx-large"
	},
	"acos()": {
		"syntax": "acos( <calc-sum> )"
	},
	"age": {
		"syntax": "child | young | old"
	},
	"alpha-value": {
		"syntax": "<number> | <percentage>"
	},
	"anchor-element": {
		"syntax": "<dashed-ident>"
	},
	"anchor-name": {
		"syntax": "<dashed-ident>"
	},
	"anchor-side": {
		"syntax": "inside | outside | top | left | right | bottom | start | end | self-start | self-end | <percentage> | center"
	},
	"anchor-size": {
		"syntax": "width | height | block | inline | self-block | self-inline"
	},
	"anchor-size()": {
		"syntax": "anchor-size( [ <anchor-name> || <anchor-size> ]? , <length-percentage>? )"
	},
	"anchor()": {
		"syntax": "anchor( <anchor-name>? && <anchor-side> , <length-percentage>? )"
	},
	"angle-percentage": {
		"syntax": "[ <angle> | <percentage> ]"
	},
	"angular-color-hint": {
		"syntax": "<angle-percentage>"
	},
	"angular-color-stop": {
		"syntax": "<color> <color-stop-angle>?"
	},
	"angular-color-stop-list": {
		"syntax": "<angular-color-stop> , [ <angular-color-hint>? , <angular-color-stop> ]#?"
	},
	"animateable-feature": {
		"syntax": "scroll-position | contents | <custom-ident>"
	},
	"arc-command": {
		"syntax": "arc [ [ <by-to> <coordinate-pair> ] || [ of <length-percentage>{1,2} ] || <arc-sweep>? || <arc-size>? || [ rotate <angle> ]? ]"
	},
	"arc-size": {
		"syntax": "large | small"
	},
	"arc-sweep": {
		"syntax": "cw | ccw"
	},
	"asin()": {
		"syntax": "asin( <calc-sum> )"
	},
	"atan()": {
		"syntax": "atan( <calc-sum> )"
	},
	"atan2()": {
		"syntax": "atan2( <calc-sum> , <calc-sum> )"
	},
	"attachment": {
		"syntax": "scroll | fixed | local"
	},
	"attr-fallback": {
		"syntax": "<any-value>"
	},
	"attr-matcher": {
		"syntax": "[ '~' | '|' | '^' | '$' | '*' ]? '='"
	},
	"attr-modifier": {
		"syntax": "i | s"
	},
	"attr-name": {
		"syntax": "[ <ident-token> '|' ]? <ident-token>"
	},
	"attr-type": {
		"syntax": "string | ident | color | number | percentage | length | angle | time | frequency | flex | <dimension-unit>"
	},
	"attr()": {
		"syntax": "attr( <attr-name> <attr-type>? , <declaration-value>? )"
	},
	"attribute-selector": {
		"syntax": "'[' <wq-name> ']' | '[' <wq-name> <attr-matcher> [ <string-token> | <ident-token> ] <attr-modifier>? ']'"
	},
	"auto-repeat": {
		"syntax": "repeat( [ auto-fill | auto-fit ] , [ <line-names>? <fixed-size> ]+ <line-names>? )"
	},
	"auto-track-list": {
		"syntax": "[ <line-names>? [ <fixed-size> | <fixed-repeat> ] ]* <line-names>? <auto-repeat> [ <line-names>? [ <fixed-size> | <fixed-repeat> ] ]* <line-names>?"
	},
	"autospace": {
		"syntax": "no-autospace | [ ideograph-alpha || ideograph-numeric || punctuation ] || [ insert | replace ]"
	},
	"axis": {
		"syntax": "block | inline | x | y"
	},
	"baseline-position": {
		"syntax": "[ first | last ]? && baseline"
	},
	"basic-shape": {
		"syntax": "inset( <length-percentage>{1,4} [ round <'border-radius'> ]? ) | xywh( <length-percentage>{2} <length-percentage [0,∞]>{2} [ round <'border-radius'> ]? ) | rect( [ <length-percentage> | auto ]{4} [ round <'border-radius'> ]? ) | circle( <radial-size>? [ at <position> ]? ) | ellipse( <radial-size>? [ at <position> ]? ) | polygon( <'fill-rule'>? [ round <length> ]? , [ <length-percentage> <length-percentage> ]# ) | path( <'fill-rule'>? , <string> )"
	},
	"basic-shape-rect": {
		"syntax": "<inset()> | <rect()> | <xywh()>"
	},
	"bg-clip": {
		"syntax": "<visual-box> | border-area | text"
	},
	"bg-image": {
		"syntax": "<image> | none"
	},
	"bg-layer": {
		"syntax": "<bg-image> || <bg-position> [ / <bg-size> ]? || <repeat-style> || <attachment> || <visual-box> || <visual-box>"
	},
	"bg-position": {
		"syntax": "<position> | <position-three>"
	},
	"bg-size": {
		"syntax": "[ <length-percentage [0,∞]> | auto ]{1,2} | cover | contain"
	},
	"blend-mode": {
		"syntax": "normal | multiply | screen | overlay | darken | lighten | color-dodge | color-burn | hard-light | soft-light | difference | exclusion | hue | saturation | color | luminosity"
	},
	"blur()": {
		"syntax": "blur( <length> )"
	},
	"bool-and": {
		"syntax": "and <bool-in-parens>"
	},
	"bool-in-parens": {
		"syntax": "( <boolean> ) | <bool-test> | <general-enclosed>"
	},
	"bool-not": {
		"syntax": "not <bool-in-parens>"
	},
	"bool-or": {
		"syntax": "or <bool-in-parens>"
	},
	"boolean": {
		"syntax": "<bool-not> | <bool-in-parens> [ <bool-and>* | <bool-or>* ]"
	},
	"boolean-without-or": {
		"syntax": "<bool-not> | <bool-in-parens> <bool-and>*"
	},
	"border-style": {
		"syntax": "none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset"
	},
	"border-width": {
		"syntax": "thin | medium | thick | <length>"
	},
	"bottom": {
		"syntax": "auto"
	},
	"box": {
		"syntax": "content-box | padding-box | border-box | margin-box | fill-box | stroke-box | view-box"
	},
	"brightness()": {
		"syntax": "brightness( <number-percentage> )"
	},
	"by-to": {
		"syntax": "by | to"
	},
	"calc-constant": {
		"syntax": "e | pi | infinity | -infinity | NaN"
	},
	"calc-keyword": {
		"syntax": "e | pi | infinity | -infinity | NaN"
	},
	"calc-mix()": {
		"syntax": "calc-mix( <progress> , <calc-sum> , <calc-sum> )"
	},
	"calc-product": {
		"syntax": "<calc-value> [ [ '*' | '/' ] <calc-value> ]*"
	},
	"calc-size-basis": {
		"syntax": "[ <intrinsic-size-keyword> | <calc-size()> | any | <calc-sum> ]"
	},
	"calc-size()": {
		"syntax": "calc-size( <calc-size-basis> , <calc-sum> )"
	},
	"calc-sum": {
		"syntax": "<calc-product> [ [ '+' | '-' ] <calc-product> ]*"
	},
	"calc-value": {
		"syntax": "<number> | <dimension> | <percentage> | <calc-keyword> | ( <calc-sum> )"
	},
	"calc()": {
		"syntax": "calc( <calc-sum> )"
	},
	"cf-final-image": {
		"syntax": "<image> | <color>"
	},
	"cf-image": {
		"syntax": "[ <image> | <color> ] && <percentage [0,100]>?"
	},
	"cf-mixing-image": {
		"syntax": "<percentage>? && <image>"
	},
	"circle()": {
		"syntax": "circle( [ <shape-radius> ]? [ at <position> ]? )"
	},
	"clamp()": {
		"syntax": "clamp( [ <calc-sum> | none ] , <calc-sum> , [ <calc-sum> | none ] )"
	},
	"class-selector": {
		"syntax": "'.' <ident-token>"
	},
	"clip-source": {
		"syntax": "<url>"
	},
	"cmyk-component": {
		"syntax": "<number> | <percentage> | none"
	},
	"color": {
		"syntax": "<color-base> | currentColor | <system-color> | <contrast-color()> | <device-cmyk()> | <light-dark()>"
	},
	"-non-standard-color": {
		"syntax": "-moz-ButtonDefault | -moz-ButtonHoverFace | -moz-ButtonHoverText | -moz-CellHighlight | -moz-CellHighlightText | -moz-Combobox | -moz-ComboboxText | -moz-Dialog | -moz-DialogText | -moz-dragtargetzone | -moz-EvenTreeRow | -moz-Field | -moz-FieldText | -moz-html-CellHighlight | -moz-html-CellHighlightText | -moz-mac-accentdarkestshadow | -moz-mac-accentdarkshadow | -moz-mac-accentface | -moz-mac-accentlightesthighlight | -moz-mac-accentlightshadow | -moz-mac-accentregularhighlight | -moz-mac-accentregularshadow | -moz-mac-chrome-active | -moz-mac-chrome-inactive | -moz-mac-focusring | -moz-mac-menuselect | -moz-mac-menushadow | -moz-mac-menutextselect | -moz-MenuHover | -moz-MenuHoverText | -moz-MenuBarText | -moz-MenuBarHoverText | -moz-nativehyperlinktext | -moz-OddTreeRow | -moz-win-communicationstext | -moz-win-mediatext | -moz-activehyperlinktext | -moz-default-background-color | -moz-default-color | -moz-hyperlinktext | -moz-visitedhyperlinktext | -webkit-activelink | -webkit-focus-ring-color | -webkit-link | -webkit-text"
	},
	"color-base": {
		"syntax": "<hex-color> | <color-function> | <named-color> | <color-mix()> | transparent"
	},
	"color-font-tech": {
		"syntax": "[ color-COLRv0 | color-COLRv1 | color-SVG | color-sbix | color-CBDT ]"
	},
	"color-function": {
		"syntax": "<rgb()> | <rgba()> | <hsl()> | <hsla()> | <hwb()> | <lab()> | <lch()> | <oklab()> | <oklch()> | <color()>"
	},
	"color-interpolation-method": {
		"syntax": "in [ <rectangular-color-space> | <polar-color-space> <hue-interpolation-method>? | <custom-color-space> ]"
	},
	"color-layers()": {
		"syntax": "color-layers( [ <blend-mode> , ]? <color># )"
	},
	"color-mix()": {
		"syntax": "color-mix( <color-interpolation-method> , [ <color> && <percentage [0,100]>? ]#{2} )"
	},
	"color-space": {
		"syntax": "<rectangular-color-space> | <polar-color-space> | <custom-color-space>"
	},
	"color-stop": {
		"syntax": "<color-stop-length> | <color-stop-angle>"
	},
	"color-stop-angle": {
		"syntax": "<angle-percentage>{1,2}"
	},
	"color-stop-length": {
		"syntax": "<length-percentage>{1,2}"
	},
	"color-stop-list": {
		"syntax": "<linear-color-stop> , [ <linear-color-hint>? , <linear-color-stop> ]#?"
	},
	"color-stripe": {
		"syntax": "<color> && [ <length-percentage> | <flex> ]?"
	},
	"color()": {
		"syntax": "color( [ from <color> ]? <colorspace-params> [ / [ <alpha-value> | none ] ]? )"
	},
	"colorspace-params": {
		"syntax": "[ <custom-params> | <predefined-rgb-params> | <predefined-polar-params> | <predefined-rectangular-params> | <xyz-params> ]"
	},
	"combinator": {
		"syntax": "'>' | '+' | '~' | [ '|' '|' ]"
	},
	"common-lig-values": {
		"syntax": "[ common-ligatures | no-common-ligatures ]"
	},
	"compat-auto": {
		"syntax": "searchfield | textarea | checkbox | radio | menulist | listbox | meter | progress-bar | button"
	},
	"compat-special": {
		"syntax": "textfield | menulist-button"
	},
	"complex-real-selector": {
		"syntax": "<compound-selector> [ <combinator>? <compound-selector> ]*"
	},
	"complex-real-selector-list": {
		"syntax": "<complex-real-selector>#"
	},
	"complex-selector": {
		"syntax": "<complex-selector-unit> [ <combinator>? <complex-selector-unit> ]*"
	},
	"complex-selector-list": {
		"syntax": "<complex-selector>#"
	},
	"complex-selector-unit": {
		"syntax": "[ <compound-selector>? <pseudo-compound-selector>* ]!"
	},
	"composite-mode": {
		"syntax": "clear | copy | source-over | destination-over | source-in | destination-in | source-out | destination-out | source-atop | destination-atop | xor | lighter | plus-darker | plus-lighter"
	},
	"composite-style": {
		"syntax": "clear | copy | source-over | source-in | source-out | source-atop | destination-over | destination-in | destination-out | destination-atop | xor"
	},
	"compositing-operator": {
		"syntax": "add | subtract | intersect | exclude"
	},
	"compound-selector": {
		"syntax": "[ <type-selector>? <subclass-selector>* ]!"
	},
	"compound-selector-list": {
		"syntax": "<compound-selector>#"
	},
	"conic-gradient-syntax": {
		"syntax": "[ [ [ from <angle> ]? [ at <position> ]? ] || <color-interpolation-method> ]? , <angular-color-stop-list>"
	},
	"conic-gradient()": {
		"syntax": "conic-gradient( [ <conic-gradient-syntax> ] )"
	},
	"container-condition": {
		"syntax": "[ <container-name> ]? <container-query>"
	},
	"container-name": {
		"syntax": "<custom-ident>"
	},
	"container-progress()": {
		"syntax": "container-progress( <size-feature> [ of <container-name> ]? from <calc-sum> to <calc-sum> )"
	},
	"container-query": {
		"syntax": "not <query-in-parens> | <query-in-parens> [ [ and <query-in-parens> ]* | [ or <query-in-parens> ]* ]"
	},
	"content-distribution": {
		"syntax": "space-between | space-around | space-evenly | stretch"
	},
	"content-level": {
		"syntax": "element | content | text | <attr()> | <counter>"
	},
	"content-list": {
		"syntax": "[ <string> | <image> | <attr()> | contents | <quote> | <leader()> | <target> | <string()> | <content()> | <counter> | <counter()> | <counters()> ]+"
	},
	"content-position": {
		"syntax": "center | start | end | flex-start | flex-end"
	},
	"content-replacement": {
		"syntax": "<image>"
	},
	"content()": {
		"syntax": "content( [ text | before | after | first-letter | marker ]? )"
	},
	"contextual-alt-values": {
		"syntax": "[ contextual | no-contextual ]"
	},
	"contrast-color()": {
		"syntax": "contrast-color( <color> max? )"
	},
	"contrast()": {
		"syntax": "contrast( [ <number-percentage> ] )"
	},
	"coord-box": {
		"syntax": "<paint-box> | view-box"
	},
	"coordinate-pair": {
		"syntax": "<length-percentage>{2}"
	},
	"cos()": {
		"syntax": "cos( <calc-sum> )"
	},
	"counter": {
		"syntax": "<counter()> | <counters()>"
	},
	"counter-name": {
		"syntax": "<custom-ident>"
	},
	"counter-style": {
		"syntax": "<counter-style-name> | <symbols()>"
	},
	"counter-style-name": {
		"syntax": "decimal | decimal-leading-zero | arabic-indic | armenian | upper-armenian | lower-armenian | bengali | cambodian | khmer | cjk-decimal | devanagari | georgian | gujarati | gurmukhi | hebrew | kannada | lao | malayalam | mongolian | myanmar | oriya | persian | lower-roman | upper-roman | tamil | telugu | thai | tibetan | lower-alpha | lower-latin | upper-alpha | upper-latin | lower-greek | hiragana | hiragana-iroha | katakana | katakana-iroha | disc | circle | square | disclosure-open | disclosure-closed | cjk-earthly-branch | cjk-heavenly-stem | korean-hangul-formal | korean-hanja-informal | korean-hanja-formal | ethiopic-numeric"
	},
	"counter()": {
		"syntax": "counter( <counter-name> , <counter-style>? )"
	},
	"counters()": {
		"syntax": "counters( <counter-name> , <string> , <counter-style>? )"
	},
	"cross-fade()": {
		"syntax": "cross-fade( <cf-image># )"
	},
	"crossorigin-modifier": {
		"syntax": "crossorigin( anonymous | use-credentials )"
	},
	"css-type": {
		"syntax": "<syntax-component> | <type()>"
	},
	"cubic-bezier-easing-function": {
		"syntax": "ease | ease-in | ease-out | ease-in-out | <cubic-bezier()>"
	},
	"cubic-bezier-timing-function": {
		"syntax": "ease | ease-in | ease-out | ease-in-out | cubic-bezier( <number [0,1]> , <number> , <number [0,1]> , <number> )"
	},
	"cubic-bezier()": {
		"syntax": "cubic-bezier( [ <number [0,1]> , <number> ]#{2} )"
	},
	"curve-command": {
		"syntax": "curve [ <by-to> <coordinate-pair> using <coordinate-pair>{1,2} ]"
	},
	"custom-arg": {
		"syntax": "$ <ident-token> ;"
	},
	"custom-color-space": {
		"syntax": "<dashed-ident>"
	},
	"custom-params": {
		"syntax": "<dashed-ident> [ <number> | <percentage> | none ]+"
	},
	"custom-selector": {
		"syntax": "<custom-arg>? : <extension-name> [ ( <custom-arg>+#? ) ]? ;"
	},
	"dasharray": {
		"syntax": "[ [ <length-percentage> | <number> ]+ ]#"
	},
	"declaration": {
		"syntax": "<ident-token> : <declaration-value>? [ '!' important ]?"
	},
	"declaration-list": {
		"syntax": "[ <declaration>? ';' ]* <declaration>?"
	},
	"deprecated-color": {
		"syntax": "ActiveBorder | ActiveCaption | AppWorkspace | Background | ButtonHighlight | ButtonShadow | CaptionText | InactiveBorder | InactiveCaption | InactiveCaptionText | InfoBackground | InfoText | Menu | MenuText | Scrollbar | ThreeDDarkShadow | ThreeDFace | ThreeDHighlight | ThreeDLightShadow | ThreeDShadow | Window | WindowFrame | WindowText"
	},
	"deprecated-system-color": {
		"syntax": "ActiveBorder | ActiveCaption | AppWorkspace | Background | ButtonFace | ButtonHighlight | ButtonShadow | ButtonText | CaptionText | GrayText | Highlight | HighlightText | InactiveBorder | InactiveCaption | InactiveCaptionText | InfoBackground | InfoText | Menu | MenuText | Scrollbar | ThreeDDarkShadow | ThreeDFace | ThreeDHighlight | ThreeDLightShadow | ThreeDShadow | Window | WindowFrame | WindowText"
	},
	"device-cmyk()": {
		"syntax": "<legacy-device-cmyk-syntax> | <modern-device-cmyk-syntax>"
	},
	"dimension-unit": {
		"syntax": "'%' | em | ex | cap | ch | ic | rem | lh | rlh | vw | vh | vi | vb | vmin | vmax | cm | mm | q | in | pc | pt | px | deg | grad | rad | turn | s | ms | hz | khz | fr"
	},
	"discretionary-lig-values": {
		"syntax": "[ discretionary-ligatures | no-discretionary-ligatures ]"
	},
	"-non-standard-display": {
		"syntax": "-ms-inline-flexbox | -ms-grid | -ms-inline-grid | -webkit-flex | -webkit-inline-flex | -webkit-box | -webkit-inline-box | -moz-inline-stack | -moz-box | -moz-inline-box"
	},
	"display-box": {
		"syntax": "contents | none"
	},
	"display-inside": {
		"syntax": "flow | flow-root | table | flex | grid | ruby"
	},
	"display-internal": {
		"syntax": "table-row-group | table-header-group | table-footer-group | table-row | table-cell | table-column-group | table-column | table-caption | ruby-base | ruby-text | ruby-base-container | ruby-text-container"
	},
	"display-legacy": {
		"syntax": "inline-block | inline-table | inline-flex | inline-grid"
	},
	"display-listitem": {
		"syntax": "<display-outside>? && [ flow | flow-root ]? && list-item"
	},
	"display-outside": {
		"syntax": "block | inline | run-in"
	},
	"drop-shadow()": {
		"syntax": "drop-shadow( <length>{2,3} <color>? )"
	},
	"dynamic-range-limit-mix()": {
		"syntax": "dynamic-range-limit-mix( [ <ident> && <percentage [0,100]>? ]#{2} )"
	},
	"easing-function": {
		"syntax": "<linear-easing-function> | <cubic-bezier-easing-function> | <step-easing-function>"
	},
	"east-asian-variant-values": {
		"syntax": "[ jis78 | jis83 | jis90 | jis04 | simplified | traditional ]"
	},
	"east-asian-width-values": {
		"syntax": "[ full-width | proportional-width ]"
	},
	"element()": {
		"syntax": "element( <id-selector> )"
	},
	"ellipse()": {
		"syntax": "ellipse( [ <shape-radius>{2} ]? [ at <position> ]? )"
	},
	"ending-shape": {
		"syntax": "circle | ellipse"
	},
	"env()": {
		"syntax": "env( <custom-ident> <integer [0,∞]>* , <declaration-value>? )"
	},
	"exp()": {
		"syntax": "exp( <calc-sum> )"
	},
	"explicit-track-list": {
		"syntax": "[ <line-names>? <track-size> ]+ <line-names>?"
	},
	"family-name": {
		"syntax": "<string> | <custom-ident>+"
	},
	"feature-tag-value": {
		"syntax": "<string> [ <integer> | on | off ]?"
	},
	"feature-type": {
		"syntax": "@stylistic | @historical-forms | @styleset | @character-variant | @swash | @ornaments | @annotation"
	},
	"feature-value-block": {
		"syntax": "<feature-type> '{' <feature-value-declaration-list> '}'"
	},
	"feature-value-block-list": {
		"syntax": "<feature-value-block>+"
	},
	"feature-value-declaration": {
		"syntax": "<custom-ident> : <integer>+ ;"
	},
	"feature-value-declaration-list": {
		"syntax": "<feature-value-declaration>"
	},
	"feature-value-name": {
		"syntax": "<ident>"
	},
	"fill-rule": {
		"syntax": "nonzero | evenodd"
	},
	"filter-function": {
		"syntax": "<blur()> | <brightness()> | <contrast()> | <drop-shadow()> | <grayscale()> | <hue-rotate()> | <invert()> | <opacity()> | <sepia()> | <saturate()>"
	},
	"-ms-filter-function": {
		"syntax": "<-ms-filter-function-progid> | <-ms-filter-function-legacy>"
	},
	"-ms-filter-function-legacy": {
		"syntax": "<ident-token> | <function-token> <any-value>? )"
	},
	"filter-function-list": {
		"syntax": "[ <filter-function> | <url> ]+"
	},
	"-ms-filter-function-list": {
		"syntax": "<-ms-filter-function>+"
	},
	"-ms-filter-function-progid": {
		"syntax": "'progid:' [ <ident-token> '.' ]* [ <ident-token> | <function-token> <any-value>? ) ]"
	},
	"filter-value-list": {
		"syntax": "[ <filter-function> | <url> ]+"
	},
	"filter()": {
		"syntax": "filter( [ <image> | <string> ] , <filter-value-list> )"
	},
	"final-bg-layer": {
		"syntax": "<bg-image> || <bg-position> [ / <bg-size> ]? || <repeat-style> || <attachment> || <visual-box> || <visual-box> || <'background-color'>"
	},
	"first-valid()": {
		"syntax": "first-valid( <declaration-value># )"
	},
	"fixed-breadth": {
		"syntax": "<length-percentage [0,∞]>"
	},
	"fixed-repeat": {
		"syntax": "repeat( [ <integer [1,∞]> ] , [ <line-names>? <fixed-size> ]+ <line-names>? )"
	},
	"fixed-size": {
		"syntax": "<fixed-breadth> | minmax( <fixed-breadth> , <track-breadth> ) | minmax( <inflexible-breadth> , <fixed-breadth> )"
	},
	"-non-standard-font": {
		"syntax": "-apple-system-body | -apple-system-headline | -apple-system-subheadline | -apple-system-caption1 | -apple-system-caption2 | -apple-system-footnote | -apple-system-short-body | -apple-system-short-headline | -apple-system-short-subheadline | -apple-system-short-caption1 | -apple-system-short-footnote | -apple-system-tall-body"
	},
	"font-features-tech": {
		"syntax": "[ features-opentype | features-aat | features-graphite ]"
	},
	"font-format": {
		"syntax": "[ <string> | collection | embedded-opentype | opentype | svg | truetype | woff | woff2 ]"
	},
	"font-src": {
		"syntax": "<url> [ format( <font-format> ) ]? [ tech( <font-tech># ) ]? | local( <family-name> )"
	},
	"font-src-list": {
		"syntax": "[ <url> [ format( <font-format> ) ]? [ tech( <font-tech># ) ]? | local( <family-name> ) ]#"
	},
	"font-stretch-absolute": {
		"syntax": "normal | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded | <percentage>"
	},
	"font-tech": {
		"syntax": "[ <font-features-tech> | <color-font-tech> | variations | palettes | incremental ]"
	},
	"font-variant-css2": {
		"syntax": "normal | small-caps"
	},
	"font-variant-css21": {
		"syntax": "[ normal | small-caps ]"
	},
	"font-weight-absolute": {
		"syntax": "[ normal | bold | <number [1,1000]> ]"
	},
	"font-width-css3": {
		"syntax": "normal | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded"
	},
	"forgiving-relative-selector-list": {
		"syntax": "<relative-real-selector-list>"
	},
	"forgiving-selector-list": {
		"syntax": "<complex-real-selector-list>"
	},
	"frequency-percentage": {
		"syntax": "[ <frequency> | <percentage> ]"
	},
	"function-dependency-list": {
		"syntax": "<function-parameter>#"
	},
	"function-name": {
		"syntax": "<dashed-ident>"
	},
	"function-parameter": {
		"syntax": "<custom-property-name> <css-type>? [ : <declaration-value> ]?"
	},
	"function-parameter-list": {
		"syntax": "<function-parameter>#"
	},
	"gender": {
		"syntax": "male | female | neutral"
	},
	"general-enclosed": {
		"syntax": "[ <function-token> <any-value>? ) ] | [ ( <any-value>? ) ]"
	},
	"generic-complete": {
		"syntax": "serif | sans-serif | system-ui | cursive | fantasy | math | monospace"
	},
	"generic-family": {
		"syntax": "<generic-script-specific> | <generic-complete> | <generic-incomplete>"
	},
	"-non-standard-generic-family": {
		"syntax": "-apple-system | BlinkMacSystemFont"
	},
	"generic-incomplete": {
		"syntax": "ui-serif | ui-sans-serif | ui-monospace | ui-rounded"
	},
	"generic-name": {
		"syntax": "serif | sans-serif | cursive | fantasy | monospace"
	},
	"generic-script-specific": {
		"syntax": "generic( kai ) | generic( fangsong ) | generic( nastaliq )"
	},
	"generic-voice": {
		"syntax": "[ <age>? <gender> <integer>? ]"
	},
	"geometry-box": {
		"syntax": "<shape-box> | fill-box | stroke-box | view-box"
	},
	"gradient": {
		"syntax": "[ <linear-gradient()> | <repeating-linear-gradient()> | <radial-gradient()> | <repeating-radial-gradient()> | <conic-gradient()> | <repeating-conic-gradient()> ]"
	},
	"-legacy-gradient": {
		"syntax": "<-webkit-gradient()> | <-legacy-linear-gradient> | <-legacy-repeating-linear-gradient> | <-legacy-radial-gradient> | <-legacy-repeating-radial-gradient>"
	},
	"-webkit-gradient-color-stop": {
		"syntax": "from( <color> ) | color-stop( [ <number-zero-one> | <percentage> ] , <color> ) | to( <color> )"
	},
	"-webkit-gradient-point": {
		"syntax": "[ left | center | right | <length-percentage> ] [ top | center | bottom | <length-percentage> ]"
	},
	"-webkit-gradient-radius": {
		"syntax": "<length> | <percentage>"
	},
	"-webkit-gradient-type": {
		"syntax": "linear | radial"
	},
	"-webkit-gradient()": {
		"syntax": "-webkit-gradient( <-webkit-gradient-type> , <-webkit-gradient-point> [, <-webkit-gradient-point> | , <-webkit-gradient-radius> , <-webkit-gradient-point> ] [, <-webkit-gradient-radius> ]? [, <-webkit-gradient-color-stop> ]* )"
	},
	"grayscale()": {
		"syntax": "grayscale( <number-percentage> )"
	},
	"grid-line": {
		"syntax": "auto | <custom-ident> | [ [ <integer [-∞,-1]> | <integer [1,∞]> ] && <custom-ident>? ] | [ span && [ <integer [1,∞]> || <custom-ident> ] ]"
	},
	"historical-lig-values": {
		"syntax": "[ historical-ligatures | no-historical-ligatures ]"
	},
	"hsl()": {
		"syntax": "[ <legacy-hsl-syntax> | <modern-hsl-syntax> ]"
	},
	"hsla()": {
		"syntax": "[ <legacy-hsla-syntax> | <modern-hsla-syntax> ]"
	},
	"hue": {
		"syntax": "<number> | <angle>"
	},
	"hue-interpolation-method": {
		"syntax": "[ shorter | longer | increasing | decreasing ] hue"
	},
	"hue-rotate()": {
		"syntax": "hue-rotate( <angle> )"
	},
	"hv-line-command": {
		"syntax": "[ hline | vline ] <by-to> <length-percentage>"
	},
	"hwb()": {
		"syntax": "hwb( [ from <color> ]? [ <hue> | none ] [ <percentage> | <number> | none ] [ <percentage> | <number> | none ] [ / [ <alpha-value> | none ] ]? )"
	},
	"hypot()": {
		"syntax": "hypot( <calc-sum># )"
	},
	"image": {
		"syntax": "<url> | <image()> | <image-set()> | <cross-fade()> | <element()> | <gradient>"
	},
	"image-1D": {
		"syntax": "<stripes()>"
	},
	"-non-standard-image-rendering": {
		"syntax": "optimize-contrast | -moz-crisp-edges | -o-crisp-edges | -webkit-optimize-contrast"
	},
	"image-set-option": {
		"syntax": "[ <image> | <string> ] [ <resolution> || type( <string> ) ]?"
	},
	"image-set()": {
		"syntax": "image-set( <image-set-option># )"
	},
	"image-src": {
		"syntax": "[ <url> | <string> ]"
	},
	"image-tags": {
		"syntax": "[ ltr | rtl ]"
	},
	"image()": {
		"syntax": "image( <image-tags>? [ <image-src>? , <color>? ]! )"
	},
	"import-conditions": {
		"syntax": "[ supports( [ <supports-condition> | <declaration> ] ) ]? <media-query-list>?"
	},
	"inflexible-breadth": {
		"syntax": "<length-percentage [0,∞]> | min-content | max-content | auto"
	},
	"inset-area": {
		"syntax": "[ [ left | center | right | span-left | span-right | x-start | x-end | span-x-start | span-x-end | x-self-start | x-self-end | span-x-self-start | span-x-self-end | span-all ] || [ top | center | bottom | span-top | span-bottom | y-start | y-end | span-y-start | span-y-end | y-self-start | y-self-end | span-y-self-start | span-y-self-end | span-all ] | [ block-start | center | block-end | span-block-start | span-block-end | span-all ] || [ inline-start | center | inline-end | span-inline-start | span-inline-end | span-all ] | [ self-block-start | self-block-end | span-self-block-start | span-self-block-end | span-all ] || [ self-inline-start | self-inline-end | span-self-inline-start | span-self-inline-end | span-all ] | [ start | center | end | span-start | span-end | span-all ]{1,2} | [ self-start | center | self-end | span-self-start | span-self-end | span-all ]{1,2} ]"
	},
	"inset()": {
		"syntax": "inset( <length-percentage>{1,4} [ round <'border-radius'> ]? )"
	},
	"integrity-modifier": {
		"syntax": "integrity( <string> )"
	},
	"intrinsic-size-keyword": {
		"syntax": "auto | max-content | min-content | stretch"
	},
	"invert()": {
		"syntax": "invert( <number-percentage> )"
	},
	"isolation-mode": {
		"syntax": "auto | isolate"
	},
	"keyframe-block": {
		"syntax": "<keyframe-selector># { <declaration-list> }"
	},
	"keyframe-block-list": {
		"syntax": "<keyframe-block>+"
	},
	"keyframe-selector": {
		"syntax": "from | to | <percentage [0,100]>"
	},
	"keyframes-name": {
		"syntax": "<custom-ident> | <string>"
	},
	"lab()": {
		"syntax": "lab( [ from <color> ]? [ <percentage> | <number> | none ] [ <percentage> | <number> | none ] [ <percentage> | <number> | none ] [ / [ <alpha-value> | none ] ]? )"
	},
	"layer-name": {
		"syntax": "<ident> [ '.' <ident> ]*"
	},
	"layer()": {
		"syntax": "layer( <layer-name> )"
	},
	"layout-box": {
		"syntax": "<visual-box> | margin-box"
	},
	"lch()": {
		"syntax": "lch( [ from <color> ]? [ <percentage> | <number> | none ] [ <percentage> | <number> | none ] [ <hue> | none ] [ / [ <alpha-value> | none ] ]? )"
	},
	"leader-type": {
		"syntax": "dotted | solid | space | <string>"
	},
	"leader()": {
		"syntax": "leader( <leader-type> )"
	},
	"left": {
		"syntax": "auto"
	},
	"legacy-device-cmyk-syntax": {
		"syntax": "device-cmyk( <number>#{4} )"
	},
	"legacy-hsl-syntax": {
		"syntax": "hsl( <hue> , <percentage> , <percentage> , <alpha-value>? )"
	},
	"legacy-hsla-syntax": {
		"syntax": "hsla( <hue> , <percentage> , <percentage> , <alpha-value>? )"
	},
	"legacy-pseudo-element-selector": {
		"syntax": "':' [ before | after | first-line | first-letter ]"
	},
	"legacy-rgb-syntax": {
		"syntax": "rgb( <percentage>#{3} , <alpha-value>? ) | rgb( <number>#{3} , <alpha-value>? )"
	},
	"legacy-rgba-syntax": {
		"syntax": "rgba( <percentage>#{3} , <alpha-value>? ) | rgba( <number>#{3} , <alpha-value>? )"
	},
	"length-percentage": {
		"syntax": "[ <length> | <percentage> ]"
	},
	"light-dark()": {
		"syntax": "light-dark( <color> , <color> )"
	},
	"line-command": {
		"syntax": "line <by-to> <coordinate-pair>"
	},
	"line-name-list": {
		"syntax": "[ <line-names> | <name-repeat> ]+"
	},
	"line-names": {
		"syntax": "'[' <custom-ident>* ']'"
	},
	"line-style": {
		"syntax": "none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset"
	},
	"line-width": {
		"syntax": "<length [0,∞]> | thin | medium | thick"
	},
	"linear-color-hint": {
		"syntax": "<length-percentage>"
	},
	"linear-color-stop": {
		"syntax": "<color> <color-stop-length>?"
	},
	"linear-easing-function": {
		"syntax": "linear | <linear()>"
	},
	"-legacy-linear-gradient": {
		"syntax": "-moz-linear-gradient( <-legacy-linear-gradient-arguments> ) | -webkit-linear-gradient( <-legacy-linear-gradient-arguments> ) | -o-linear-gradient( <-legacy-linear-gradient-arguments> )"
	},
	"-legacy-linear-gradient-arguments": {
		"syntax": "[ <angle> | <side-or-corner> ]? , <color-stop-list>"
	},
	"linear-gradient-syntax": {
		"syntax": "[ [ <angle> | to <side-or-corner> ] || <color-interpolation-method> ]? , <color-stop-list>"
	},
	"linear-gradient()": {
		"syntax": "linear-gradient( [ <linear-gradient-syntax> ] )"
	},
	"linear()": {
		"syntax": "linear( [ <number> && <percentage>{0,2} ]# )"
	},
	"link-param": {
		"syntax": "param( <custom-property-name> <declaration-value>? )"
	},
	"log()": {
		"syntax": "log( <calc-sum> , <calc-sum>? )"
	},
	"marker-ref": {
		"syntax": "<url>"
	},
	"-webkit-mask-box-repeat": {
		"syntax": "repeat | stretch | round"
	},
	"mask-layer": {
		"syntax": "<mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || <geometry-box> || [ <geometry-box> | no-clip ] || <compositing-operator> || <masking-mode>"
	},
	"mask-position": {
		"syntax": "[ <length-percentage> | left | center | right ] [ <length-percentage> | top | center | bottom ]?"
	},
	"mask-reference": {
		"syntax": "none | <image> | <mask-source>"
	},
	"mask-source": {
		"syntax": "<url>"
	},
	"masking-mode": {
		"syntax": "alpha | luminance | match-source"
	},
	"masonry-auto-track-list": {
		"syntax": "[ <line-names>? [ <track-size> | <track-repeat> ] ]* <line-names>? <auto-repeat> <line-names>? [ [ <track-size> | <track-repeat> ] <line-names>? ]*"
	},
	"matrix()": {
		"syntax": "matrix( <number>#{6} )"
	},
	"matrix3d()": {
		"syntax": "matrix3d( <number>#{16} )"
	},
	"max()": {
		"syntax": "max( <calc-sum># )"
	},
	"media-and": {
		"syntax": "and <media-in-parens>"
	},
	"media-condition": {
		"syntax": "<media-not> | <media-in-parens> [ <media-and>* | <media-or>* ]"
	},
	"media-condition-without-or": {
		"syntax": "<media-not> | <media-in-parens> <media-and>*"
	},
	"media-feature": {
		"syntax": "( [ <mf-plain> | <mf-boolean> | <mf-range> ] )"
	},
	"media-in-parens": {
		"syntax": "( <media-condition> ) | <media-feature> | <general-enclosed>"
	},
	"media-not": {
		"syntax": "not <media-in-parens>"
	},
	"media-or": {
		"syntax": "or <media-in-parens>"
	},
	"media-progress()": {
		"syntax": "media-progress( <media-feature> from <calc-sum> to <calc-sum> )"
	},
	"media-query": {
		"syntax": "<media-condition> | [ not | only ]? <media-type> [ and <media-condition-without-or> ]?"
	},
	"media-query-list": {
		"syntax": "<media-query>#"
	},
	"media-type": {
		"syntax": "<ident>"
	},
	"media()": {
		"syntax": "media( [ <mf-plain> | <mf-boolean> | <mf-range> ] )"
	},
	"mf-boolean": {
		"syntax": "<mf-name>"
	},
	"mf-comparison": {
		"syntax": "<mf-lt> | <mf-gt> | <mf-eq>"
	},
	"mf-eq": {
		"syntax": "'='"
	},
	"mf-gt": {
		"syntax": "'>' '='?"
	},
	"mf-lt": {
		"syntax": "'<' '='?"
	},
	"mf-name": {
		"syntax": "<ident>"
	},
	"mf-plain": {
		"syntax": "<mf-name> : <mf-value>"
	},
	"mf-range": {
		"syntax": "<mf-name> <mf-comparison> <mf-value> | <mf-value> <mf-comparison> <mf-name> | <mf-value> <mf-lt> <mf-name> <mf-lt> <mf-value> | <mf-value> <mf-gt> <mf-name> <mf-gt> <mf-value>"
	},
	"mf-value": {
		"syntax": "<number> | <dimension> | <ident> | <ratio>"
	},
	"min()": {
		"syntax": "min( <calc-sum># )"
	},
	"minmax()": {
		"syntax": "minmax( [ <length-percentage> | min-content | max-content | auto ] , [ <length-percentage> | <flex> | min-content | max-content | auto ] )"
	},
	"mix()": {
		"syntax": "mix( <progress> , <whole-value> , <whole-value> ) | mix( <progress> && of <'animation-name'> )"
	},
	"mod()": {
		"syntax": "mod( <calc-sum> , <calc-sum> )"
	},
	"modern-device-cmyk-syntax": {
		"syntax": "device-cmyk( <cmyk-component>{4} [ / [ <alpha-value> | none ] ]? )"
	},
	"modern-hsl-syntax": {
		"syntax": "hsl( [ from <color> ]? [ <hue> | none ] [ <percentage> | <number> | none ] [ <percentage> | <number> | none ] [ / [ <alpha-value> | none ] ]? )"
	},
	"modern-hsla-syntax": {
		"syntax": "hsla( [ from <color> ]? [ <hue> | none ] [ <percentage> | <number> | none ] [ <percentage> | <number> | none ] [ / [ <alpha-value> | none ] ]? )"
	},
	"modern-rgb-syntax": {
		"syntax": "rgb( [ from <color> ]? [ <number> | <percentage> | none ]{3} [ / [ <alpha-value> | none ] ]? )"
	},
	"modern-rgba-syntax": {
		"syntax": "rgba( [ from <color> ]? [ <number> | <percentage> | none ]{3} [ / [ <alpha-value> | none ] ]? )"
	},
	"move-command": {
		"syntax": "move <by-to> <coordinate-pair>"
	},
	"mq-boolean": {
		"syntax": "<integer [0,1]>"
	},
	"name-repeat": {
		"syntax": "repeat( [ <integer [1,∞]> | auto-fill ] , <line-names>+ )"
	},
	"named-color": {
		"syntax": "aliceblue | antiquewhite | aqua | aquamarine | azure | beige | bisque | black | blanchedalmond | blue | blueviolet | brown | burlywood | cadetblue | chartreuse | chocolate | coral | cornflowerblue | cornsilk | crimson | cyan | darkblue | darkcyan | darkgoldenrod | darkgray | darkgreen | darkgrey | darkkhaki | darkmagenta | darkolivegreen | darkorange | darkorchid | darkred | darksalmon | darkseagreen | darkslateblue | darkslategray | darkslategrey | darkturquoise | darkviolet | deeppink | deepskyblue | dimgray | dimgrey | dodgerblue | firebrick | floralwhite | forestgreen | fuchsia | gainsboro | ghostwhite | gold | goldenrod | gray | green | greenyellow | grey | honeydew | hotpink | indianred | indigo | ivory | khaki | lavender | lavenderblush | lawngreen | lemonchiffon | lightblue | lightcoral | lightcyan | lightgoldenrodyellow | lightgray | lightgreen | lightgrey | lightpink | lightsalmon | lightseagreen | lightskyblue | lightslategray | lightslategrey | lightsteelblue | lightyellow | lime | limegreen | linen | magenta | maroon | mediumaquamarine | mediumblue | mediumorchid | mediumpurple | mediumseagreen | mediumslateblue | mediumspringgreen | mediumturquoise | mediumvioletred | midnightblue | mintcream | mistyrose | moccasin | navajowhite | navy | oldlace | olive | olivedrab | orange | orangered | orchid | palegoldenrod | palegreen | paleturquoise | palevioletred | papayawhip | peachpuff | peru | pink | plum | powderblue | purple | rebeccapurple | red | rosybrown | royalblue | saddlebrown | salmon | sandybrown | seagreen | seashell | sienna | silver | skyblue | slateblue | slategray | slategrey | snow | springgreen | steelblue | tan | teal | thistle | tomato | turquoise | violet | wheat | white | whitesmoke | yellow | yellowgreen"
	},
	"namespace-prefix": {
		"syntax": "<ident>"
	},
	"ns-prefix": {
		"syntax": "[ <ident-token> | '*' ]? '|'"
	},
	"nth": {
		"syntax": "<an-plus-b> | even | odd"
	},
	"number-one-or-greater": {
		"syntax": "<number [1,∞]>"
	},
	"number-optional-number": {
		"syntax": "<number> <number>?"
	},
	"number-percentage": {
		"syntax": "<number> | <percentage>"
	},
	"number-zero-one": {
		"syntax": "<number [0,1]>"
	},
	"numeric-figure-values": {
		"syntax": "[ lining-nums | oldstyle-nums ]"
	},
	"numeric-fraction-values": {
		"syntax": "[ diagonal-fractions | stacked-fractions ]"
	},
	"numeric-spacing-values": {
		"syntax": "[ proportional-nums | tabular-nums ]"
	},
	"offset-path": {
		"syntax": "<ray()> | <url> | <basic-shape>"
	},
	"oklab()": {
		"syntax": "oklab( [ from <color> ]? [ <percentage> | <number> | none ] [ <percentage> | <number> | none ] [ <percentage> | <number> | none ] [ / [ <alpha-value> | none ] ]? )"
	},
	"oklch()": {
		"syntax": "oklch( [ from <color> ]? [ <percentage> | <number> | none ] [ <percentage> | <number> | none ] [ <hue> | none ] [ / [ <alpha-value> | none ] ]? )"
	},
	"opacity-value": {
		"syntax": "<number> | <percentage>"
	},
	"opacity()": {
		"syntax": "opacity( [ <number-percentage> ] )"
	},
	"opentype-tag": {
		"syntax": "<string>"
	},
	"outline-radius": {
		"syntax": "<length> | <percentage>"
	},
	"-non-standard-overflow": {
		"syntax": "overlay | -moz-scrollbars-none | -moz-scrollbars-horizontal | -moz-scrollbars-vertical | -moz-hidden-unscrollable"
	},
	"overflow-position": {
		"syntax": "unsafe | safe"
	},
	"padding-width": {
		"syntax": "<length> | <percentage>"
	},
	"page-body": {
		"syntax": "<declaration>? [ ; <page-body> ]? | <page-margin-box> <page-body>"
	},
	"page-margin-box": {
		"syntax": "<page-margin-box-type> '{' <declaration-list> '}'"
	},
	"page-margin-box-type": {
		"syntax": "@top-left-corner | @top-left | @top-center | @top-right | @top-right-corner | @bottom-left-corner | @bottom-left | @bottom-center | @bottom-right | @bottom-right-corner | @left-top | @left-middle | @left-bottom | @right-top | @right-middle | @right-bottom"
	},
	"page-selector": {
		"syntax": "[ <ident-token>? <pseudo-page>* ]!"
	},
	"page-selector-list": {
		"syntax": "<page-selector>#"
	},
	"page-size": {
		"syntax": "A5 | A4 | A3 | B5 | B4 | JIS-B5 | JIS-B4 | letter | legal | ledger"
	},
	"paint": {
		"syntax": "none | <image> | <svg-paint>"
	},
	"paint-box": {
		"syntax": "<visual-box> | fill-box | stroke-box"
	},
	"paint()": {
		"syntax": "paint( <ident> , <declaration-value>? )"
	},
	"palette-identifier": {
		"syntax": "<dashed-ident>"
	},
	"palette-mix()": {
		"syntax": "palette-mix( <color-interpolation-method> , [ [ normal | light | dark | <palette-identifier> | <palette-mix()> ] && <percentage [0,100]>? ]#{2} )"
	},
	"path()": {
		"syntax": "path( [ <fill-rule> , ]? <string> )"
	},
	"perspective()": {
		"syntax": "perspective( [ <length [0,∞]> | none ] )"
	},
	"points": {
		"syntax": "[ <number>+ ]#"
	},
	"polar-color-space": {
		"syntax": "hsl | hwb | lch | oklch"
	},
	"polygon()": {
		"syntax": "polygon( <fill-rule>? , [ <length-percentage> <length-percentage> ]# )"
	},
	"position": {
		"syntax": "<position-one> | <position-two> | <position-four>"
	},
	"position-area": {
		"syntax": "[ [ left | center | right | span-left | span-right | x-start | x-end | span-x-start | span-x-end | x-self-start | x-self-end | span-x-self-start | span-x-self-end | span-all ] || [ top | center | bottom | span-top | span-bottom | y-start | y-end | span-y-start | span-y-end | y-self-start | y-self-end | span-y-self-start | span-y-self-end | span-all ] | [ block-start | center | block-end | span-block-start | span-block-end | span-all ] || [ inline-start | center | inline-end | span-inline-start | span-inline-end | span-all ] | [ self-block-start | center | self-block-end | span-self-block-start | span-self-block-end | span-all ] || [ self-inline-start | center | self-inline-end | span-self-inline-start | span-self-inline-end | span-all ] | [ start | center | end | span-start | span-end | span-all ]{1,2} | [ self-start | center | self-end | span-self-start | span-self-end | span-all ]{1,2} ]"
	},
	"position-four": {
		"syntax": "[ [ [ left | right | x-start | x-end ] <length-percentage> ] && [ [ top | bottom | y-start | y-end ] <length-percentage> ] | [ [ block-start | block-end ] <length-percentage> ] && [ [ inline-start | inline-end ] <length-percentage> ] | [ [ start | end ] <length-percentage> ]{2} ]"
	},
	"position-one": {
		"syntax": "[ left | center | right | top | bottom | x-start | x-end | y-start | y-end | block-start | block-end | inline-start | inline-end | <length-percentage> ]"
	},
	"position-three": {
		"syntax": "[ [ left | center | right ] && [ [ top | bottom ] <length-percentage> ] | [ [ left | right ] <length-percentage> ] && [ top | center | bottom ] ]"
	},
	"position-two": {
		"syntax": "[ [ left | center | right | x-start | x-end ] && [ top | center | bottom | y-start | y-end ] | [ left | center | right | x-start | x-end | <length-percentage> ] [ top | center | bottom | y-start | y-end | <length-percentage> ] | [ block-start | center | block-end ] && [ inline-start | center | inline-end ] | [ start | center | end ]{2} ]"
	},
	"pow()": {
		"syntax": "pow( <calc-sum> , <calc-sum> )"
	},
	"predefined-polar-params": {
		"syntax": "jzczhz [ <number> | <percentage> | none ]{2} [ <hue> | none ]"
	},
	"predefined-rectangular": {
		"syntax": "jzazbz | ictcp"
	},
	"predefined-rectangular-params": {
		"syntax": "<predefined-rectangular> [ <number> | <percentage> | none ]{3}"
	},
	"predefined-rgb": {
		"syntax": "srgb | srgb-linear | display-p3 | a98-rgb | prophoto-rgb | rec2020 | rec2100-pq | rec2100-hlg | rec2100-linear"
	},
	"predefined-rgb-params": {
		"syntax": "<predefined-rgb> [ <number> | <percentage> | none ]{3}"
	},
	"progress": {
		"syntax": "[ <percentage> | <number> | <'animation-timeline'> ] && [ by <easing-function> ]?"
	},
	"progress()": {
		"syntax": "progress( <calc-sum> from <calc-sum> to <calc-sum> )"
	},
	"pseudo-class-selector": {
		"syntax": "':' <ident-token> | ':' <function-token> <any-value> ')'"
	},
	"pseudo-compound-selector": {
		"syntax": "<pseudo-element-selector> <pseudo-class-selector>*"
	},
	"pseudo-element-selector": {
		"syntax": "':' <pseudo-class-selector> | <legacy-pseudo-element-selector>"
	},
	"pseudo-page": {
		"syntax": "':' [ left | right | first | blank ]"
	},
	"pt-class-selector": {
		"syntax": "[ '.' <custom-ident> ]+"
	},
	"pt-name-and-class-selector": {
		"syntax": "<pt-name-selector> <pt-class-selector>? | <pt-class-selector>"
	},
	"pt-name-selector": {
		"syntax": "'*' | <custom-ident>"
	},
	"query-in-parens": {
		"syntax": "( <container-query> ) | ( <size-feature> ) | style( <style-query> ) | scroll-state( <scroll-state-query> ) | <general-enclosed>"
	},
	"quote": {
		"syntax": "open-quote | close-quote | no-open-quote | no-close-quote"
	},
	"radial-extent": {
		"syntax": "closest-corner | closest-side | farthest-corner | farthest-side"
	},
	"-legacy-radial-gradient": {
		"syntax": "-moz-radial-gradient( <-legacy-radial-gradient-arguments> ) | -webkit-radial-gradient( <-legacy-radial-gradient-arguments> ) | -o-radial-gradient( <-legacy-radial-gradient-arguments> )"
	},
	"-legacy-radial-gradient-arguments": {
		"syntax": "[ <position> , ]? [ [ [ <-legacy-radial-gradient-shape> || <-legacy-radial-gradient-size> ] | [ <length> | <percentage> ]{2} ] , ]? <color-stop-list>"
	},
	"-legacy-radial-gradient-shape": {
		"syntax": "circle | ellipse"
	},
	"-legacy-radial-gradient-size": {
		"syntax": "closest-side | closest-corner | farthest-side | farthest-corner | contain | cover"
	},
	"radial-gradient-syntax": {
		"syntax": "[ [ [ <radial-shape> || <radial-size> ]? [ at <position> ]? ] || <color-interpolation-method> ]? , <color-stop-list>"
	},
	"radial-gradient()": {
		"syntax": "radial-gradient( [ <radial-gradient-syntax> ] )"
	},
	"radial-shape": {
		"syntax": "circle | ellipse"
	},
	"radial-size": {
		"syntax": "<radial-extent> | <length [0,∞]> | <length-percentage [0,∞]>{2}"
	},
	"random-caching-options": {
		"syntax": "<dashed-ident> || per-element"
	},
	"random-item()": {
		"syntax": "random-item( <random-caching-options> , [ <declaration-value>? ]# )"
	},
	"random()": {
		"syntax": "random( <random-caching-options>? , <calc-sum> , <calc-sum> , [ by <calc-sum> ]? )"
	},
	"ratio": {
		"syntax": "<number [0,∞]> [ / <number [0,∞]> ]?"
	},
	"ray-size": {
		"syntax": "closest-side | closest-corner | farthest-side | farthest-corner | sides"
	},
	"ray()": {
		"syntax": "ray( [ <angle> && <ray-size>? && contain? && [ at <position> ]? ] )"
	},
	"rect()": {
		"syntax": "rect( [ <length-percentage> | auto ]{4} [ round <'border-radius'> ]? )"
	},
	"rectangular-color-space": {
		"syntax": "srgb | srgb-linear | display-p3 | a98-rgb | prophoto-rgb | rec2020 | lab | oklab | xyz | xyz-d50 | xyz-d65"
	},
	"referrerpolicy-modifier": {
		"syntax": "referrerpolicy( no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url )"
	},
	"relative-real-selector": {
		"syntax": "<combinator>? <complex-real-selector>"
	},
	"relative-real-selector-list": {
		"syntax": "<relative-real-selector>#"
	},
	"relative-selector": {
		"syntax": "<combinator>? <complex-selector>"
	},
	"relative-selector-list": {
		"syntax": "<relative-selector>#"
	},
	"relative-size": {
		"syntax": "larger | smaller"
	},
	"rem()": {
		"syntax": "rem( <calc-sum> , <calc-sum> )"
	},
	"repeat-style": {
		"syntax": "repeat-x | repeat-y | <repetition>{1,2}"
	},
	"repeat()": {
		"syntax": "auto-fill | auto-fit"
	},
	"repeating-conic-gradient()": {
		"syntax": "repeating-conic-gradient( [ <conic-gradient-syntax> ] )"
	},
	"-legacy-repeating-linear-gradient": {
		"syntax": "-moz-repeating-linear-gradient( <-legacy-linear-gradient-arguments> ) | -webkit-repeating-linear-gradient( <-legacy-linear-gradient-arguments> ) | -o-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )"
	},
	"repeating-linear-gradient()": {
		"syntax": "repeating-linear-gradient( [ <linear-gradient-syntax> ] )"
	},
	"-legacy-repeating-radial-gradient": {
		"syntax": "-moz-repeating-radial-gradient( <-legacy-radial-gradient-arguments> ) | -webkit-repeating-radial-gradient( <-legacy-radial-gradient-arguments> ) | -o-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )"
	},
	"repeating-radial-gradient()": {
		"syntax": "repeating-radial-gradient( [ <radial-gradient-syntax> ] )"
	},
	"repetition": {
		"syntax": "repeat | space | round | no-repeat"
	},
	"request-url-modifier": {
		"syntax": "<crossorigin-modifier> | <integrity-modifier> | <referrerpolicy-modifier>"
	},
	"reversed-counter-name": {
		"syntax": "reversed( <counter-name> )"
	},
	"rgb()": {
		"syntax": "[ <legacy-rgb-syntax> | <modern-rgb-syntax> ]"
	},
	"rgba()": {
		"syntax": "[ <legacy-rgba-syntax> | <modern-rgba-syntax> ]"
	},
	"right": {
		"syntax": "auto"
	},
	"rotate()": {
		"syntax": "rotate( [ <angle> | <zero> ] )"
	},
	"rotate3d()": {
		"syntax": "rotate3d( <number> , <number> , <number> , [ <angle> | <zero> ] )"
	},
	"rotateX()": {
		"syntax": "rotateX( [ <angle> | <zero> ] )"
	},
	"rotateY()": {
		"syntax": "rotateY( [ <angle> | <zero> ] )"
	},
	"rotateZ()": {
		"syntax": "rotateZ( [ <angle> | <zero> ] )"
	},
	"round()": {
		"syntax": "round( <rounding-strategy>? , <calc-sum> , <calc-sum>? )"
	},
	"rounding-strategy": {
		"syntax": "nearest | up | down | to-zero"
	},
	"running()": {
		"syntax": "running( <custom-ident> )"
	},
	"saturate()": {
		"syntax": "saturate( <number-percentage> )"
	},
	"scale()": {
		"syntax": "scale( [ <number> | <percentage> ]#{1,2} )"
	},
	"scale3d()": {
		"syntax": "scale3d( [ <number> | <percentage> ]#{3} )"
	},
	"scaleX()": {
		"syntax": "scaleX( [ <number> | <percentage> ] )"
	},
	"scaleY()": {
		"syntax": "scaleY( [ <number> | <percentage> ] )"
	},
	"scaleZ()": {
		"syntax": "scaleZ( [ <number> | <percentage> ] )"
	},
	"scope-end": {
		"syntax": "<forgiving-selector-list>"
	},
	"scope-start": {
		"syntax": "<forgiving-selector-list>"
	},
	"scroll-state-feature": {
		"syntax": "<ident> : <ident>"
	},
	"scroll-state-in-parens": {
		"syntax": "( <scroll-state-query> ) | ( <scroll-state-feature> ) | <general-enclosed>"
	},
	"scroll-state-query": {
		"syntax": "not <scroll-state-in-parens> | <scroll-state-in-parens> [ [ and <scroll-state-in-parens> ]* | [ or <scroll-state-in-parens> ]* ] | <scroll-state-feature>"
	},
	"scroll()": {
		"syntax": "scroll( [ <scroller> || <axis> ]? )"
	},
	"scroller": {
		"syntax": "root | nearest | self"
	},
	"selector-list": {
		"syntax": "<complex-selector-list>"
	},
	"self-position": {
		"syntax": "center | start | end | self-start | self-end | flex-start | flex-end"
	},
	"sepia()": {
		"syntax": "sepia( <number-percentage> )"
	},
	"shadow": {
		"syntax": "<color>? && [ <length>{2} <length [0,∞]>? <length>? ] && inset?"
	},
	"shadow-t": {
		"syntax": "[ <length>{2,3} && <color>? ]"
	},
	"shape": {
		"syntax": "rect( <top> , <right> , <bottom> , <left> ) | rect( <top> <right> <bottom> <left> )"
	},
	"shape-box": {
		"syntax": "<visual-box> | margin-box"
	},
	"shape-command": {
		"syntax": "<move-command> | <line-command> | <hv-line-command> | <curve-command> | <smooth-command> | <arc-command> | close"
	},
	"shape-radius": {
		"syntax": "<length-percentage> | closest-side | farthest-side"
	},
	"shape()": {
		"syntax": "shape( <'fill-rule'>? from <coordinate-pair> , <shape-command># )"
	},
	"side-or-corner": {
		"syntax": "[ left | right ] || [ top | bottom ]"
	},
	"sign()": {
		"syntax": "sign( <calc-sum> )"
	},
	"simple-selector": {
		"syntax": "<type-selector> | <subclass-selector>"
	},
	"simple-selector-list": {
		"syntax": "<simple-selector>#"
	},
	"sin()": {
		"syntax": "sin( <calc-sum> )"
	},
	"single-animation": {
		"syntax": "<'animation-duration'> || <easing-function> || <'animation-delay'> || <single-animation-iteration-count> || <single-animation-direction> || <single-animation-fill-mode> || <single-animation-play-state> || [ none | <keyframes-name> ] || <single-animation-timeline>"
	},
	"single-animation-composition": {
		"syntax": "replace | add | accumulate"
	},
	"single-animation-direction": {
		"syntax": "normal | reverse | alternate | alternate-reverse"
	},
	"single-animation-fill-mode": {
		"syntax": "none | forwards | backwards | both"
	},
	"single-animation-iteration-count": {
		"syntax": "infinite | <number [0,∞]>"
	},
	"single-animation-play-state": {
		"syntax": "running | paused"
	},
	"single-animation-timeline": {
		"syntax": "auto | none | <dashed-ident> | <scroll()> | <view()>"
	},
	"single-transition": {
		"syntax": "[ none | <single-transition-property> ] || <time> || <easing-function> || <time> || <transition-behavior-value>"
	},
	"single-transition-property": {
		"syntax": "all | <custom-ident>"
	},
	"size": {
		"syntax": "closest-side | farthest-side | closest-corner | farthest-corner | <length> | <length-percentage>{2}"
	},
	"-non-standard-size": {
		"syntax": "intrinsic | min-intrinsic | -webkit-fill-available | -webkit-fit-content | -webkit-min-content | -webkit-max-content | -moz-available | -moz-fit-content | -moz-min-content | -moz-max-content"
	},
	"size-feature": {
		"syntax": "<mf-plain> | <mf-boolean> | <mf-range>"
	},
	"skew()": {
		"syntax": "skew( [ <angle> | <zero> ] , [ <angle> | <zero> ]? )"
	},
	"skewX()": {
		"syntax": "skewX( [ <angle> | <zero> ] )"
	},
	"skewY()": {
		"syntax": "skewY( [ <angle> | <zero> ] )"
	},
	"smooth-command": {
		"syntax": "smooth [ [ <by-to> <coordinate-pair> ] || [ using <coordinate-pair> ]? ]"
	},
	"source-size": {
		"syntax": "<media-condition> <source-size-value> | auto"
	},
	"source-size-list": {
		"syntax": "<source-size>#? , <source-size-value>"
	},
	"source-size-value": {
		"syntax": "<length> | auto"
	},
	"spacing-trim": {
		"syntax": "space-all | normal | space-first | trim-start | trim-both | trim-all"
	},
	"spread-shadow": {
		"syntax": "<'box-shadow-color'>? && [ <'box-shadow-offset'> [ <'box-shadow-blur'> <'box-shadow-spread'>? ]? ] && <'box-shadow-position'>?"
	},
	"sqrt()": {
		"syntax": "sqrt( <calc-sum> )"
	},
	"src()": {
		"syntax": "src( <string> <url-modifier>* )"
	},
	"step-easing-function": {
		"syntax": "step-start | step-end | <steps()>"
	},
	"step-position": {
		"syntax": "jump-start | jump-end | jump-none | jump-both | start | end"
	},
	"step-timing-function": {
		"syntax": "step-start | step-end | steps( <integer> [, <step-position> ]? )"
	},
	"steps()": {
		"syntax": "steps( <integer> , <step-position>? )"
	},
	"string()": {
		"syntax": "string( <custom-ident> , [ first | start | last | first-except ]? )"
	},
	"stripes()": {
		"syntax": "stripes( <color-stripe># )"
	},
	"style-condition": {
		"syntax": "not <style-in-parens> | <style-in-parens> [ [ and <style-in-parens> ]* | [ or <style-in-parens> ]* ]"
	},
	"style-feature": {
		"syntax": "<declaration>"
	},
	"style-in-parens": {
		"syntax": "( <style-query> ) | ( <style-feature> ) | <general-enclosed>"
	},
	"style-query": {
		"syntax": "not <style-in-parens> | <style-in-parens> [ [ and <style-in-parens> ]* | [ or <style-in-parens> ]* ] | <style-feature>"
	},
	"subclass-selector": {
		"syntax": "<id-selector> | <class-selector> | <attribute-selector> | <pseudo-class-selector>"
	},
	"supports-condition": {
		"syntax": "not <supports-in-parens> | <supports-in-parens> [ and <supports-in-parens> ]* | <supports-in-parens> [ or <supports-in-parens> ]*"
	},
	"supports-decl": {
		"syntax": "( <declaration> )"
	},
	"supports-feature": {
		"syntax": "<supports-selector-fn> | <supports-font-tech-fn> | <supports-font-format-fn> | <supports-decl>"
	},
	"supports-font-format-fn": {
		"syntax": "font-format( <font-format> )"
	},
	"supports-font-tech-fn": {
		"syntax": "font-tech( <font-tech> )"
	},
	"supports-in-parens": {
		"syntax": "( <supports-condition> ) | <supports-feature> | <general-enclosed>"
	},
	"supports-selector-fn": {
		"syntax": "selector( <complex-selector> )"
	},
	"supports()": {
		"syntax": "supports( <declaration> )"
	},
	"svg-length": {
		"syntax": "<percentage> | <length> | <number>"
	},
	"svg-paint": {
		"syntax": "child | child( <integer> )"
	},
	"svg-writing-mode": {
		"syntax": "lr-tb | rl-tb | tb-rl | lr | rl | tb"
	},
	"symbol": {
		"syntax": "<string> | <image> | <custom-ident>"
	},
	"symbols-type": {
		"syntax": "cyclic | numeric | alphabetic | symbolic | fixed"
	},
	"symbols()": {
		"syntax": "symbols( <symbols-type>? [ <string> | <image> ]+ )"
	},
	"syntax": {
		"syntax": "'*' | <syntax-component> [ <syntax-combinator> <syntax-component> ]+"
	},
	"syntax-combinator": {
		"syntax": "'|'"
	},
	"syntax-component": {
		"syntax": "<syntax-single-component> <syntax-multiplier>? | '<' transform-list '>'"
	},
	"syntax-multiplier": {
		"syntax": "[ '#' | '+' ]"
	},
	"syntax-single-component": {
		"syntax": "'<' <syntax-type-name> '>' | <ident>"
	},
	"syntax-type-name": {
		"syntax": "angle | color | custom-ident | image | integer | length | length-percentage | number | percentage | resolution | string | time | url | transform-function"
	},
	"system-color": {
		"syntax": "AccentColor | AccentColorText | ActiveText | ButtonBorder | ButtonFace | ButtonText | Canvas | CanvasText | Field | FieldText | GrayText | Highlight | HighlightText | LinkText | Mark | MarkText | SelectedItem | SelectedItemText | VisitedText"
	},
	"system-family-name": {
		"syntax": "caption | icon | menu | message-box | small-caption | status-bar"
	},
	"tan()": {
		"syntax": "tan( <calc-sum> )"
	},
	"target": {
		"syntax": "<target-counter()> | <target-counters()> | <target-text()>"
	},
	"target-contrast": {
		"syntax": "<wcag2>"
	},
	"target-counter()": {
		"syntax": "target-counter( [ <string> | <url> ] , <custom-ident> , <counter-style>? )"
	},
	"target-counters()": {
		"syntax": "target-counters( [ <string> | <url> ] , <custom-ident> , <string> , <counter-style>? )"
	},
	"target-text()": {
		"syntax": "target-text( [ <string> | <url> ] , [ content | before | after | first-letter ]? )"
	},
	"text-edge": {
		"syntax": "[ text | cap | ex | ideographic | ideographic-ink ] [ text | alphabetic | ideographic | ideographic-ink ]?"
	},
	"time-percentage": {
		"syntax": "[ <time> | <percentage> ]"
	},
	"timeline-range-name": {
		"syntax": "cover | contain | entry | exit | entry-crossing | exit-crossing"
	},
	"toggle()": {
		"syntax": "toggle( <whole-value># )"
	},
	"top": {
		"syntax": "auto"
	},
	"track-breadth": {
		"syntax": "<length-percentage [0,∞]> | <flex [0,∞]> | min-content | max-content | auto"
	},
	"track-list": {
		"syntax": "[ <line-names>? [ <track-size> | <track-repeat> ] ]+ <line-names>?"
	},
	"track-repeat": {
		"syntax": "repeat( [ <integer [1,∞]> ] , [ <line-names>? <track-size> ]+ <line-names>? )"
	},
	"track-size": {
		"syntax": "<track-breadth> | minmax( <inflexible-breadth> , <track-breadth> ) | fit-content( <length-percentage [0,∞]> )"
	},
	"transform-function": {
		"syntax": "<matrix()> | <translate()> | <translateX()> | <translateY()> | <scale()> | <scaleX()> | <scaleY()> | <rotate()> | <skew()> | <skewX()> | <skewY()> | <matrix3d()> | <translate3d()> | <translateZ()> | <scale3d()> | <scaleZ()> | <rotate3d()> | <rotateX()> | <rotateY()> | <rotateZ()> | <perspective()>"
	},
	"transform-list": {
		"syntax": "<transform-function>+"
	},
	"transform-mix()": {
		"syntax": "transform-mix( <progress> , <transform-list> , <transform-list> )"
	},
	"transition-behavior-value": {
		"syntax": "normal | allow-discrete"
	},
	"translate()": {
		"syntax": "translate( <length-percentage> , <length-percentage>? )"
	},
	"translate3d()": {
		"syntax": "translate3d( <length-percentage> , <length-percentage> , <length> )"
	},
	"translateX()": {
		"syntax": "translateX( <length-percentage> )"
	},
	"translateY()": {
		"syntax": "translateY( <length-percentage> )"
	},
	"translateZ()": {
		"syntax": "translateZ( <length> )"
	},
	"try-size": {
		"syntax": "most-width | most-height | most-block-size | most-inline-size"
	},
	"try-tactic": {
		"syntax": "flip-block || flip-inline || flip-start"
	},
	"type-or-unit": {
		"syntax": "string | color | url | integer | number | length | angle | time | frequency | cap | ch | em | ex | ic | lh | rlh | rem | vb | vi | vw | vh | vmin | vmax | mm | Q | cm | in | pt | pc | px | deg | grad | rad | turn | ms | s | Hz | kHz | %"
	},
	"type-selector": {
		"syntax": "<wq-name> | <ns-prefix>? '*'"
	},
	"type()": {
		"syntax": "type( <syntax> )"
	},
	"url": {
		"syntax": "<url()> | <src()>"
	},
	"url-modifier": {
		"syntax": "<ident> | <function-token> <any-value> )"
	},
	"url-set-option": {
		"syntax": "[ <url> | <string> ] [ <resolution> || type( <string> ) ]?"
	},
	"url-set()": {
		"syntax": "url-set( <url-set-option># )"
	},
	"url()": {
		"syntax": "url( <string> <url-modifier>* ) | <url-token>"
	},
	"var()": {
		"syntax": "var( <custom-property-name> , <declaration-value>? )"
	},
	"view()": {
		"syntax": "view( [ <axis> || <'view-timeline-inset'> ]? )"
	},
	"viewport-length": {
		"syntax": "auto | <length-percentage>"
	},
	"visual-box": {
		"syntax": "content-box | padding-box | border-box"
	},
	"wcag2": {
		"syntax": "wcag2 | wcag2( [ <number> | [ aa | aaa ] && large? ] )"
	},
	"wq-name": {
		"syntax": "<ns-prefix>? <ident-token>"
	},
	"x": {
		"syntax": "<number>"
	},
	"xywh()": {
		"syntax": "xywh( <length-percentage>{2} <length-percentage [0,∞]>{2} [ round <'border-radius'> ]? )"
	},
	"xyz": {
		"syntax": "xyz | xyz-d50 | xyz-d65"
	},
	"xyz-params": {
		"syntax": "<xyz> [ <number> | <percentage> | none ]{3}"
	},
	"xyz-space": {
		"syntax": "xyz | xyz-d50 | xyz-d65"
	},
	"y": {
		"syntax": "<number>"
	}
}
