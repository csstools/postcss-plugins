/* node:coverage disable */
"use strict";var t=require("fs/promises"),s=require("path"),e=require("postcss"),o=require("postcss-8.4"),n=require("postcss-html"),r=require("node:assert/strict"),a=require("node:test");const noopPlugin=()=>({postcssPlugin:"noop-plugin",Rule(){}});function reduceInformationInCssSyntaxError(t){process.env.DEBUG||(delete t.source,t.input&&delete t.input.source,delete t.postcssNode)}async function fileContentsOrEmptyString(s){try{return await t.readFile(s,"utf8")}catch(t){return""}}function postcssSyntax(t){if(t.postcssSyntaxHTML)return n()}function postcssSyntaxSupportsSourceMaps(t){return!t.postcssSyntaxHTML}noopPlugin.postcss=!0;const c={postcssPlugin:"declaration-cloner",Declaration(t){"to-clone"===t.prop&&t.cloneBefore({prop:"cloned"})}},i={postcssPlugin:"rule-cloner",prepare(){const t=new WeakSet;return{RuleExit(s){t.has(s)||"to-clone"===s.selector&&(t.add(s),s.cloneBefore({selector:"cloned"}))}}}},p={postcssPlugin:"at-rule-cloner",prepare(){const t=new WeakSet;return{AtRuleExit(s){if(!t.has(s))return"to-clone"===s.params?(t.add(s),void s.cloneBefore({params:"cloned"})):"to-clone"===s.name?(t.add(s),void s.cloneBefore({name:"cloned"})):void 0}}}};exports.atRuleClonerPlugin=p,exports.declarationClonerPlugin=c,exports.postcssTape=function postcssTape(n,c){c=c??{},a("`postcss` flag is set on exported plugin creator",(()=>{r.strictEqual(n.postcss,!0)})),a("exported plugin creator is a function",(()=>{r.strictEqual(typeof n,"function")})),a("`postcssPlugin` is set on a plugin instance",(()=>{const t=n();r.ok(t.postcssPlugin),r.strictEqual(typeof t.postcssPlugin,"string")})),a("package.json",(async s=>{const e=await t.readFile("./package.json","utf-8"),o=JSON.parse(e);await s.test('includes "postcss-plugin" keyword',(()=>{r.ok(o.keywords),r.ok(o.keywords.includes("postcss-plugin"))})),await s.test('name starts with "postcss-"',{skip:c?.skipPackageNameCheck},(()=>{let t=o.name;if(t.startsWith("@")){t=o.name.split("/").slice(1).join("/")}r.ok(t.startsWith("postcss-"),`package name "${t}" does not start with "postcss-"`)})),await s.test("`postcss` is a peer dependency and not a direct dependency",{skip:"postcssTapeSelfTest"in n},(()=>{r.ok(o.peerDependencies),r.ok(Object.keys(Object(o.peerDependencies)).includes("postcss")),r.ok(!Object.keys(Object(o.dependencies)).includes("postcss"))}))}));const i=n().postcssPlugin;return async c=>{await a(i,(async a=>{for(const i in c)await a.test(i,(async a=>{const p=c[i];p.before&&await p.before();const u=s.join(".","test",i.split(":")[0]),l=s.join(".","test",i.replace(/:/g,"."));let d="css";p.postcssSyntaxHTML&&(d="html");const S=`${u}.${d}`;let g=`${l}.expect.${d}`,f=`${l}.result.${d}`;p.expect&&(g=s.join(".","test",p.expect)),p.result&&(f=s.join(".","test",p.result));const y=p.plugins??[n(p.options)],w=await fileContentsOrEmptyString(S),m=await fileContentsOrEmptyString(g);let x,k=!1;try{x=await e(y).process(w,{from:S,to:f,map:!!postcssSyntaxSupportsSourceMaps(p)&&{inline:!1,annotation:!1},syntax:postcssSyntax(p)})}catch(t){if(reduceInformationInCssSyntaxError(t),k=!0,p.exception&&p.exception.test(t.message))return;r.ifError(t)}r.notEqual(!k,p.exception,"expected an exception but got none");const h=x.css.toString();{const s=[t.writeFile(f,h,"utf8")];process.env.REWRITE_EXPECTS&&s.push(t.writeFile(g,h,"utf8")),await Promise.all(s)}r.ok(m,"Missing expected result file"),await a.test("has expected output",(()=>{r.strictEqual(h,m),r.deepStrictEqual(x.warnings().length,p.warnings??0,"Unexpected number warnings")})),await a.test("sourcemaps",{skip:!postcssSyntaxSupportsSourceMaps(p)},(async()=>{r.ok(!x.map.toJSON().sources.includes("<no source>"),'Sourcemap is broken. This is most likely a newly created PostCSS AST Node without a value for "source". See: https://github.com/postcss/postcss/blob/main/docs/guidelines/plugin.md#24-set-nodesource-for-new-nodes')})),p.after&&await p.after(),await a.test("output is parsable with PostCSS",(async()=>{const t=await fileContentsOrEmptyString(f),s=await e([noopPlugin()]).process(t,{from:f,to:f,map:!!postcssSyntaxSupportsSourceMaps(p)&&{inline:!1,annotation:!1},syntax:postcssSyntax(p)});r.deepStrictEqual(s.warnings(),[],"Unexpected warnings on second pass")})),await a.test("The oldest and current PostCSS version produce the same result",{skip:e([noopPlugin()]).version===o([noopPlugin()]).version},(async()=>{const t=await o(y).process(w,{from:S,to:f,map:!!postcssSyntaxSupportsSourceMaps(p)&&{inline:!1,annotation:!1}});r.strictEqual(t.css.toString(),h)}))}))}))}},exports.ruleClonerPlugin=i;
/* node:coverage enable */
