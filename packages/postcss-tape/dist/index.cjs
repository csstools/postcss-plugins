/* node:coverage disable */
"use strict";var e=require("node:assert/strict"),s=require("node:fs/promises"),t=require("node:fs"),n=require("node:path"),o=require("postcss"),r=require("postcss-8.4"),i=require("node:test"),a=require("node:url");const noopPlugin=()=>({postcssPlugin:"noop-plugin",Rule(){}});async function fileContentsOrEmptyString(e){try{return await s.readFile(e,"utf8")}catch(e){return""}}function reduceInformationInCssSyntaxError(e){process.env.DEBUG||(delete e.source,e.input&&delete e.input.source,delete e.postcssNode)}noopPlugin.postcss=!0;const c={postcssPlugin:"declaration-cloner",Declaration(e){"to-clone"===e.prop&&e.cloneBefore({prop:"cloned"})}},p={postcssPlugin:"rule-cloner",prepare(){const e=new WeakSet;return{RuleExit(s){e.has(s)||"to-clone"===s.selector&&(e.add(s),s.cloneBefore({selector:"cloned"}))}}}},l={postcssPlugin:"at-rule-cloner",prepare(){const e=new WeakSet;return{AtRuleExit(s){if(!e.has(s))return"to-clone"===s.params?(e.add(s),void s.cloneBefore({params:"cloned"})):"to-clone"===s.name?(e.add(s),void s.cloneBefore({name:"cloned"})):void 0}}}};class PackageDescriptionError extends Error{constructor(e,s){super(e),this.name="PackageDescriptionError",this.stack=`${this.name}: ${this.message}\n    at "${s}" (${a.pathToFileURL(n.resolve("package.json")).pathname})`}}exports.atRuleClonerPlugin=l,exports.declarationClonerPlugin=c,exports.postcssTape=function postcssTape(a,c){c=c??{},i("`postcss` flag is set on exported plugin creator",(()=>{e.strictEqual(a.postcss,!0)})),i("exported plugin creator is a function",(()=>{e.strictEqual(typeof a,"function")})),i("`postcssPlugin` is set on a plugin instance",(()=>{const s=a();e.ok(s.postcssPlugin),e.strictEqual(typeof s.postcssPlugin,"string")})),i("package.json",(async t=>{const n=await s.readFile("./package.json","utf-8"),o=JSON.parse(n);await t.test('includes "postcss-plugin" keyword',(()=>{e.ok(o.keywords?.includes("postcss-plugin"),new PackageDescriptionError('Missing "postcss-plugin" keyword in package.json',"keywords"))})),await t.test('name starts with "postcss-"',{skip:c?.skipPackageNameCheck},(()=>{let s=o.name;if(s.startsWith("@")){s=o.name.split("/").slice(1).join("/")}e.ok(s.startsWith("postcss-"),new PackageDescriptionError(`package name "${s}" does not start with "postcss-"`,"name"))})),await t.test("`postcss` is a peer dependency and not a direct dependency",{skip:"postcssTapeSelfTest"in a},(()=>{e.ok(Object.keys(Object(o.peerDependencies)).includes("postcss"),new PackageDescriptionError('"postcss" is not listed in "peerDependencies"',"peerDependencies")),e.ok(!Object.keys(Object(o.dependencies)).includes("postcss"),new PackageDescriptionError('"postcss" must not be listed in "dependencies"',"dependencies"))}))}));const p=a().postcssPlugin;return async c=>{await i(p,(async i=>{for(const p in c)await i.test(p,(async i=>{const l=c[p];l.before&&await l.before();const u=n.join(".","test",...p.split(":")[0].split(n.posix.sep)),d=n.join(".","test",...p.replace(/:/g,".").split(n.posix.sep)),g="css";let w=`${u}.${g}`,f=`${d}.expect.${g}`,m=`${d}.result.${g}`;l.source&&(w=n.join(".","test",l.source)),l.expect&&(f=n.join(".","test",l.expect)),l.result&&(m=n.join(".","test",l.result));const k=l.plugins??[a(l.options)],y=await fileContentsOrEmptyString(w),E=await fileContentsOrEmptyString(f);let h,x=!1;try{h=await o(k).process(y,{from:w,to:m,map:{inline:!1,annotation:!1}})}catch(s){if(reduceInformationInCssSyntaxError(s),x=!0,l.exception&&l.exception.test(s.message))return;e.ifError(s)}e.notEqual(!x,l.exception,"expected an exception but got none");const S=h.css.toString();{const e=[s.writeFile(m,S,"utf8")];process.env.REWRITE_EXPECTS&&e.push(s.writeFile(f,S,"utf8")),await Promise.all(e)}E||e.ok(t.existsSync(f),`Missing expect file: "${f}"`),await i.test("has expected output",(()=>{e.strictEqual(S,E),e.deepStrictEqual(h.warnings().length,l.warnings??0,"Unexpected number warnings")})),await i.test("sourcemaps",(async()=>{e.ok(!h.map.toJSON().sources.includes("<no source>"),'Sourcemap is broken. This is most likely a newly created PostCSS AST Node without a value for "source". See: https://github.com/postcss/postcss/blob/main/docs/guidelines/plugin.md#24-set-nodesource-for-new-nodes')})),l.after&&await l.after(),await i.test("output is parsable with PostCSS",(async()=>{const s=await fileContentsOrEmptyString(m),t=await o([noopPlugin()]).process(s,{from:m,to:m,map:{inline:!1,annotation:!1}});e.deepStrictEqual(t.warnings(),[],"Unexpected warnings on second pass")})),await i.test("The oldest and current PostCSS version produce the same result",{skip:o([noopPlugin()]).version===r([noopPlugin()]).version},(async()=>{const s=await r(k).process(y,{from:w,to:m,map:{inline:!1,annotation:!1}});e.strictEqual(s.css.toString(),S)}))}))}))}},exports.ruleClonerPlugin=p;
/* node:coverage enable */
