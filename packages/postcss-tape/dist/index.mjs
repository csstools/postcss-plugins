import n from"fs";import o from"path";import e from"postcss";import t from"postcss-8.4";import s from"postcss-html";import{strict as r}from"assert";const noopPlugin=()=>({postcssPlugin:"noop-plugin",Rule(){}});noopPlugin.postcss=!0;const c="----------------------------------------";function formatCSSAssertError(n,o,e,t=!1){let s="";if(s+=`\n${n}\n\n`,o.message&&(s+=`message :\n  ${o.message}\n\n`),o.options)try{s+=`options :\n${JSON.stringify(o.options,null,2)}\n\n`}catch(n){}return s+=`output changed :\n${prettyDiff(e.message)}\n`,t||(s+="\n"+c),s}function formatWarningsAssertError(n,o,e,t,s=!1){let r="";if(r+=`\n${n}\n\n`,o.message&&(r+=`message :\n  ${o.message}\n\n`),o.options)try{r+=`options :\n${JSON.stringify(o.options,null,2)}\n\n`}catch(n){}return r+=`unexpected or missing warnings :\n+ actual ${e.length}\n- expected ${t}\n`,s||(e.forEach((n=>{r+=`\n[${n.plugin}]: ${n.text}`})),e.length&&(r+="\n"),r+="\n"+c),r}function prettyDiff(n){return n.replace(/[^\\](\\n)/gm,((n,o)=>n.replace(o," "))).replace(/(\\t)/gm,((n,o)=>n.replace(o," "))).replace(/\+$/gm,"").replace(/^Expected values to be strictly equal:\n/,"")}function formatGitHubActionAnnotation(n,e="error",t={}){let s="::"+e;const r=Object.keys(t).map((n=>{let e=String(t[n]);return"file"===n&&process.env.GITHUB_WORKSPACE&&(e=o.relative(process.env.GITHUB_WORKSPACE,o.resolve(e))),`${n}=${s=e,s.replace(/\r/g,"%0D").replace(/\n/g,"%0A").replace(/]/g,"%5D").replace(/;/g,"%3B")}`;var s})).join(",");return r&&(s+=` ${r}`),`${s}::${c=n||"",c.replace(/\r/g,"%0D").replace(/\n/g,"%0A")}`;var c}function reduceInformationInCssSyntaxError(n){process.env.DEBUG||(delete n.source,n.input&&delete n.input.source,delete n.postcssNode)}const i=process.env.GITHUB_ACTIONS&&"true"===process.env.ENABLE_ANNOTATIONS_FOR_NODE&&"true"===process.env.ENABLE_ANNOTATIONS_FOR_OS;function postcssSyntax(n){return n.postcssSyntaxHTML?s():null}function postcssTape(s){let a=!1;{!0!==s.postcss&&(a=!0,i?console.log(formatGitHubActionAnnotation('postcss flag not set to "true" on exported plugin object',"error",{file:"./package.json",line:1,col:1})):console.error(`\npostcss flag not set to "true"\n\n${c}`));const o=s();o.postcssPlugin&&"string"==typeof o.postcssPlugin||(a=!0,i?console.log(formatGitHubActionAnnotation('plugin name not set via "postcssPlugin"',"error",{file:"./package.json",line:1,col:1})):console.error(`\nplugin name not set via "postcssPlugin"\n\n${c}`));const e=JSON.parse(n.readFileSync("./package.json","utf-8").toString());e.keywords&&e.keywords.includes("postcss-plugin")||(a=!0,i?console.log(formatGitHubActionAnnotation('package.json does not include "postcss-plugin" keyword',"error",{file:"./package.json",line:1,col:1})):console.error(`\npackage.json does not include "postcss-plugin" keyword\n\n${c}`));const t=["css-has-pseudo","css-blank-pseudo","css-prefers-color-scheme","@csstools/css-has-pseudo-experimental"].includes(e.name);let r=e.name;if(r.startsWith("@")){r=e.name.split("/").slice(1).join("/")}r.startsWith("postcss-")||t||(a=!0,i?console.log(formatGitHubActionAnnotation('plugin name in package.json does not start with "postcss-"',"error",{file:"./package.json",line:1,col:1})):console.error(`\nplugin name in package.json does not start with "postcss-"\n\n${c}`)),Object.keys(Object(e.dependencies)).includes("postcss")&&!("postcssTapeSelfTest"in s)&&(a=!0,i?console.log(formatGitHubActionAnnotation("postcss should only be a peer and/or dev dependency","error",{file:"./package.json",line:1,col:1})):console.error(`\npostcss should only be a peer and/or dev dependency\n\n${c}`))}return async l=>{const p=new Set;for(const u in l){const g=l[u];g.before&&await g.before();const f=o.join(".","test",u.split(":")[0]),d=o.join(".","test",u.replace(/:/g,"."));let m="css";g.postcssSyntaxHTML&&(m="html");const S=`${f}.${m}`;let y=`${d}.expect.${m}`,A=`${d}.result.${m}`;g.expect&&(y=o.join(".","test",g.expect)),g.result&&(A=o.join(".","test",g.result));const $=g.plugins??[s(g.options)],h=n.readFileSync(S,"utf8");let w,b="";try{b=n.readFileSync(y,"utf8")}catch(n){a=!0,b=!1,i?console.log(formatGitHubActionAnnotation(`${u}\n\nmissing or broken "expect" file: "${o.parse(y).base}"`,"error",{file:S,line:1,col:1})):(p.add(u),console.error(`\n${u}\n\nmissing or broken "expect" file: "${o.parse(y).base}"\n\n${c}`))}let x=!1;try{w=await e($).process(h,{from:S,to:A,map:{inline:!1,annotation:!1},syntax:postcssSyntax(g)})}catch(n){if(reduceInformationInCssSyntaxError(n),x=!0,g.exception&&g.exception.test(n.message))continue;throw n}!x&&g.exception&&(a=!0,i?console.log(formatGitHubActionAnnotation(`${u}\n\nexpected an exception but got none`,"error",{file:S,line:1,col:1})):(p.add(u),console.error(`\n${u}\n\nexpected an exception but got none\n\n${c}`)));const E=w.css.toString();if(n.writeFileSync(A,E,"utf8"),process.env.REWRITE_EXPECTS&&n.writeFileSync(y,E,"utf8"),!1!==b){try{r.strictEqual(E,b)}catch(n){a=!0,i?console.log(formatGitHubActionAnnotation(formatCSSAssertError(u,g,n,!0),"error",{file:y,line:1,col:1})):(p.add(u),console.error(formatCSSAssertError(u,g,n)))}try{if(!g.postcssSyntaxHTML&&w.map.toJSON().sources.includes("<no source>"))throw new Error("Sourcemap is broken")}catch(n){a=!0;const o='\nThis is most likely a newly created PostCSS AST Node without a value for "source".\nsee :\n- https://github.com/postcss/postcss/blob/main/docs/guidelines/plugin.md#24-set-nodesource-for-new-nodes\n- https://postcss.org/api/#node-source';i?console.log(formatGitHubActionAnnotation(`${u}\n\nbroken source map: ${JSON.stringify(w.map.toJSON().sources)}\n${o}`,"error",{file:S,line:1,col:1})):(p.add(u),console.error(`\n${u}\n\nbroken source map: ${JSON.stringify(w.map.toJSON().sources)}\n${o}\n\n${c}`))}g.after&&await g.after();try{const o=n.readFileSync(A,"utf8");if((await e([noopPlugin()]).process(o,{from:A,to:A,map:{inline:!1,annotation:!1},syntax:postcssSyntax(g)})).warnings().length)throw new Error("Unexpected warnings on second pass")}catch(n){a=!0,i?console.log(formatGitHubActionAnnotation(`${u}\n\nresult was not parsable with PostCSS.`,"error",{file:y,line:1,col:1})):(p.add(u),console.error(`\n${u}\n\nresult was not parsable with PostCSS.\n\n${c}`))}if(e([noopPlugin()]).version!==t([noopPlugin()]).version){const n=await t($).process(h,{from:S,to:A,map:{inline:!1,annotation:!1}});try{r.strictEqual(n.css.toString(),E)}catch(n){reduceInformationInCssSyntaxError(n),a=!0,i?console.log(formatGitHubActionAnnotation("testing older PostCSS:\n"+formatCSSAssertError(u,g,n,!0),"error",{file:y,line:1,col:1})):(p.add(u),console.error("testing older PostCSS:\n"+formatCSSAssertError(u,g,n)))}}try{(w.warnings().length||g.warnings)&&r.strictEqual(w.warnings().length,g.warnings)}catch(n){a=!0,i?console.log(formatGitHubActionAnnotation(formatWarningsAssertError(u,g,w.warnings(),g.warnings??0,!0),"error",{file:y,line:1,col:1})):(p.add(u),console.error(formatWarningsAssertError(u,g,w.warnings(),g.warnings??0)))}}}if(p.size){console.error("\nunexpected failures:");for(const n of p.values())console.error("  - "+n)}a&&process.exit(1),console.warn("pass "+s().postcssPlugin)}}const a={postcssPlugin:"declaration-cloner",Declaration(n){"to-clone"===n.prop&&n.cloneBefore({prop:"cloned"})}},l={postcssPlugin:"rule-cloner",prepare(){const n=new WeakSet;return{RuleExit(o){n.has(o)||"to-clone"===o.selector&&(n.add(o),o.cloneBefore({selector:"cloned"}))}}}},p={postcssPlugin:"at-rule-cloner",prepare(){const n=new WeakSet;return{AtRuleExit(o){if(!n.has(o))return"to-clone"===o.params?(n.add(o),void o.cloneBefore({params:"cloned"})):"to-clone"===o.name?(n.add(o),void o.cloneBefore({name:"cloned"})):void 0}}}};export{p as atRuleClonerPlugin,a as declarationClonerPlugin,postcssTape,l as ruleClonerPlugin};
