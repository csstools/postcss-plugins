/* node:coverage disable */
import s from"fs/promises";import t from"path";import e from"postcss";import o from"postcss-8.4";import n from"postcss-html";import c from"node:assert/strict";import a from"node:test";const noopPlugin=()=>({postcssPlugin:"noop-plugin",Rule(){}});function reduceInformationInCssSyntaxError(s){process.env.DEBUG||(delete s.source,s.input&&delete s.input.source,delete s.postcssNode)}async function fileContentsOrEmptyString(t){try{return await s.readFile(t,"utf8")}catch(s){return""}}function postcssSyntax(s){if(s.postcssSyntaxHTML)return n()}function postcssSyntaxSupportsSourceMaps(s){return!s.postcssSyntaxHTML}function postcssTape(n,r){r=r??{},a("`postcss` flag is set on exported plugin creator",(()=>{c.strictEqual(n.postcss,!0)})),a("exported plugin creator is a function",(()=>{c.strictEqual(typeof n,"function")})),a("`postcssPlugin` is set on a plugin instance",(()=>{const s=n();c.ok(s.postcssPlugin),c.strictEqual(typeof s.postcssPlugin,"string")})),a("package.json",(async t=>{const e=await s.readFile("./package.json","utf-8"),o=JSON.parse(e);await t.test('includes "postcss-plugin" keyword',(()=>{c.ok(o.keywords),c.ok(o.keywords.includes("postcss-plugin"))}));const a=r?.skipPackageNameCheck||["css-has-pseudo","css-blank-pseudo","css-prefers-color-scheme","@csstools/css-has-pseudo-experimental"].includes(o.name);await t.test('name starts with "postcss-"',{skip:a},(()=>{let s=o.name;if(s.startsWith("@")){s=o.name.split("/").slice(1).join("/")}c.ok(s.startsWith("postcss-"),`package name "${s}" does not start with "postcss-"`)})),await t.test("`postcss` is a peer dependency and not a direct dependency",{skip:"postcssTapeSelfTest"in n},(()=>{c.ok(o.peerDependencies),c.ok(Object.keys(Object(o.peerDependencies)).includes("postcss")),c.ok(!Object.keys(Object(o.dependencies)).includes("postcss"))}))}));const i=n().postcssPlugin;return async r=>{await a(i,(async a=>{for(const i in r)await a.test(i,(async a=>{const p=r[i];p.before&&await p.before();const l=t.join(".","test",i.split(":")[0]),u=t.join(".","test",i.replace(/:/g,"."));let d="css";p.postcssSyntaxHTML&&(d="html");const m=`${l}.${d}`;let f=`${u}.expect.${d}`,S=`${u}.result.${d}`;p.expect&&(f=t.join(".","test",p.expect)),p.result&&(S=t.join(".","test",p.result));const g=p.plugins??[n(p.options)],y=await fileContentsOrEmptyString(m),w=await fileContentsOrEmptyString(f);let x,k=!1;try{x=await e(g).process(y,{from:m,to:S,map:!!postcssSyntaxSupportsSourceMaps(p)&&{inline:!1,annotation:!1},syntax:postcssSyntax(p)})}catch(s){if(reduceInformationInCssSyntaxError(s),k=!0,p.exception&&p.exception.test(s.message))return;c.ifError(s)}c.notEqual(!k,p.exception,"expected an exception but got none");const h=x.css.toString();{const t=[s.writeFile(S,h,"utf8")];process.env.REWRITE_EXPECTS&&t.push(s.writeFile(f,h,"utf8")),await Promise.all(t)}c.ok(w,"Missing expected result file"),await a.test("has expected output",(()=>{c.strictEqual(h,w),c.deepStrictEqual(x.warnings().length,p.warnings??0,"Unexpected number warnings")})),await a.test("sourcemaps",{skip:!postcssSyntaxSupportsSourceMaps(p)},(async()=>{c.ok(!x.map.toJSON().sources.includes("<no source>"),'Sourcemap is broken. This is most likely a newly created PostCSS AST Node without a value for "source". See: https://github.com/postcss/postcss/blob/main/docs/guidelines/plugin.md#24-set-nodesource-for-new-nodes')})),p.after&&await p.after(),await a.test("output is parsable with PostCSS",(async()=>{const s=await fileContentsOrEmptyString(S),t=await e([noopPlugin()]).process(s,{from:S,to:S,map:!!postcssSyntaxSupportsSourceMaps(p)&&{inline:!1,annotation:!1},syntax:postcssSyntax(p)});c.deepStrictEqual(t.warnings(),[],"Unexpected warnings on second pass")})),await a.test("The oldest and current PostCSS version produce the same result",{skip:e([noopPlugin()]).version===o([noopPlugin()]).version},(async()=>{const s=await o(g).process(y,{from:m,to:S,map:!!postcssSyntaxSupportsSourceMaps(p)&&{inline:!1,annotation:!1}});c.strictEqual(s.css.toString(),h)}))}))}))}}noopPlugin.postcss=!0;const r={postcssPlugin:"declaration-cloner",Declaration(s){"to-clone"===s.prop&&s.cloneBefore({prop:"cloned"})}},i={postcssPlugin:"rule-cloner",prepare(){const s=new WeakSet;return{RuleExit(t){s.has(t)||"to-clone"===t.selector&&(s.add(t),t.cloneBefore({selector:"cloned"}))}}}},p={postcssPlugin:"at-rule-cloner",prepare(){const s=new WeakSet;return{AtRuleExit(t){if(!s.has(t))return"to-clone"===t.params?(s.add(t),void t.cloneBefore({params:"cloned"})):"to-clone"===t.name?(s.add(t),void t.cloneBefore({name:"cloned"})):void 0}}}};export{p as atRuleClonerPlugin,r as declarationClonerPlugin,postcssTape,i as ruleClonerPlugin};
/* node:coverage enable */
