import e from"postcss";import n from"postcss-8.2";import o from"path";import s,{promises as t}from"fs";import{strict as r}from"assert";function c(e,n="error",s={}){let t="::"+n;const r=Object.keys(s).map((e=>{let n=String(s[e]);return"file"===e&&process.env.GITHUB_WORKSPACE&&(n=o.relative(process.env.GITHUB_WORKSPACE,o.resolve(n))),`${e}=${t=n,t.replace(/\r/g,"%0D").replace(/\n/g,"%0A").replace(/]/g,"%5D").replace(/;/g,"%3B")}`;var t})).join(",");return r&&(t+=` ${r}`),`${t}::${c=e||"",c.replace(/\r/g,"%0D").replace(/\n/g,"%0A")}`;var c}const l="----------------------------------------";function i(e,n,o,s=!1){let t="";if(t+=`\n${e}\n\n`,n.message&&(t+=`message :\n  ${n.message}\n\n`),n.options)try{t+=`options :\n${JSON.stringify(n.options,null,2)}\n\n`}catch(e){}return t+=`output changed :\n${function(e){const n=/[^\\](\\n)/gm,o=/(\\t)/gm;return e.replace(n,((e,n)=>e.replace(n," "))).replace(o,((e,n)=>e.replace(n," "))).replace(/\+$/gm,"").replace(/^Expected values to be strictly equal:\n/,"")}(o.message)}\n`,s||(t+="\n"+l),t}function a(e,n,o,s,t=!1){let r="";if(r+=`\n${e}\n\n`,n.message&&(r+=`message :\n  ${n.message}\n\n`),n.options)try{r+=`options :\n${JSON.stringify(n.options,null,2)}\n\n`}catch(e){}return r+=`unexpected or missing warnings :\n+ actual ${o.length}\n- expected ${s}\n`,t||(o.forEach((e=>{r+=`\n[${e.plugin}]: ${e.text}`})),o.length&&(r+="\n"),r+="\n"+l),r}const p=()=>({postcssPlugin:"noop-plugin",Rule(){}});p.postcss=!0;const g=process.env.GITHUB_ACTIONS&&"true"===process.env.ENABLE_ANNOTATIONS_FOR_NODE&&"true"===process.env.ENABLE_ANNOTATIONS_FOR_OS;function u(u){let d=!1;{!0!==u.postcss&&(d=!0,g?console.log(c('postcss flag not set to "true" on exported plugin object',"error",{file:"./package.json",line:1,col:1})):console.error(`\npostcss flag not set to "true"\n\n${l}`));const e=u();e.postcssPlugin&&"string"==typeof e.postcssPlugin||(d=!0,g?console.log(c('plugin name not set via "postcssPlugin"',"error",{file:"./package.json",line:1,col:1})):console.error(`\nplugin name not set via "postcssPlugin"\n\n${l}`));const n=JSON.parse(s.readFileSync("./package.json").toString());n.keywords&&n.keywords.includes("postcss-plugin")||(d=!0,g?console.log(c('package.json does not include "postcss-plugin" keyword',"error",{file:"./package.json",line:1,col:1})):console.error(`\npackage.json does not include "postcss-plugin" keyword\n\n${l}`));const o=["css-has-pseudo","css-blank-pseudo","css-prefers-color-scheme","@csstools/css-has-pseudo-experimental"].includes(n.name);n.name.startsWith("postcss-")||n.name.startsWith("@csstools/postcss-")||o||(d=!0,g?console.log(c('plugin name in package.json does not start with "postcss-"',"error",{file:"./package.json",line:1,col:1})):console.error(`\nplugin name in package.json does not start with "postcss-"\n\n${l}`)),Object.keys(Object(n.dependencies)).includes("postcss")&&!("postcssTapeSelfTest"in u)&&(d=!0,g?console.log(c("postcss should only be a peer and/or dev dependency","error",{file:"./package.json",line:1,col:1})):console.error(`\npostcss should only be a peer and/or dev dependency\n\n${l}`))}return async s=>{const f=new Set;for(const $ in s){var m;const w=s[$];w.before&&await w.before();const h=o.join(".","test",$.split(":")[0]),S=o.join(".","test",$.replace(/:/g,".")),y=`${h}.css`;let b=`${S}.expect.css`,k=`${S}.result.css`;w.expect&&(b=o.join(".","test",w.expect)),w.result&&(k=o.join(".","test",w.result));const x=null!=(m=w.plugins)?m:[u(w.options)],O=await t.readFile(y,"utf8");let v,j="";try{j=await t.readFile(b,"utf8")}catch(e){d=!0,j=!1,g?console.log(c(`${$}\n\nmissing or broken "expect" file: "${o.parse(b).base}"`,"error",{file:y,line:1,col:1})):(f.add($),console.error(`\n${$}\n\nmissing or broken "expect" file: "${o.parse(b).base}"\n\n${l}`))}let N=!1;try{v=await e(x).process(O,{from:y,to:k,map:{inline:!1,annotation:!1}})}catch(e){if(N=!0,w.exception&&w.exception.test(e.message))continue;throw e}!N&&w.exception&&(d=!0,g?console.log(c(`${$}\n\nexpected an exception but got none`,"error",{file:y,line:1,col:1})):(f.add($),console.error(`\n${$}\n\nexpected an exception but got none\n\n${l}`)));const E=v.css.toString();if(await t.writeFile(k,E,"utf8"),process.env.REWRITE_EXPECTS&&t.writeFile(b,E,"utf8"),!1!==j){try{r.strictEqual(E,j)}catch(e){d=!0,g?console.log(c(i($,w,e,!0),"error",{file:b,line:1,col:1})):(f.add($),console.error(i($,w,e)))}try{if(v.map.toJSON().sources.includes("<no source>"))throw new Error("Sourcemap is broken")}catch(e){d=!0;const n='\nThis is most likely a newly created PostCSS AST Node without a value for "source".\nsee :\n- https://github.com/postcss/postcss/blob/main/docs/guidelines/plugin.md#24-set-nodesource-for-new-nodes\n- https://postcss.org/api/#node-source';g?console.log(c(`${$}\n\nbroken source map: ${JSON.stringify(v.map.toJSON().sources)}\n${n}`,"error",{file:y,line:1,col:1})):(f.add($),console.error(`\n${$}\n\nbroken source map: ${JSON.stringify(v.map.toJSON().sources)}\n${n}\n\n${l}`))}w.after&&await w.after();try{const n=await t.readFile(k,"utf8");if((await e([p()]).process(n,{from:k,to:k,map:{inline:!1,annotation:!1}})).warnings().length)throw new Error("Unexpected warnings on second pass")}catch(e){d=!0,g?console.log(c(`${$}\n\nresult was not parsable with PostCSS.`,"error",{file:b,line:1,col:1})):(f.add($),console.error(`\n${$}\n\nresult was not parsable with PostCSS.\n\n${l}`))}if(e([p()]).version!==n([p()]).version){const e=await n(x).process(O,{from:y,to:k,map:{inline:!1,annotation:!1}});try{r.strictEqual(e.css.toString(),E)}catch(e){d=!0,g?console.log(c("testing older PostCSS:\n"+i($,w,e,!0),"error",{file:b,line:1,col:1})):(f.add($),console.error("testing older PostCSS:\n"+i($,w,e)))}}try{(v.warnings().length||w.warnings)&&r.strictEqual(v.warnings().length,w.warnings)}catch(e){d=!0,g?console.log(c(a($,w,v.warnings(),w.warnings,!0),"error",{file:b,line:1,col:1})):(f.add($),console.error(a($,w,v.warnings(),w.warnings)))}}}if(f.size){console.error("\nunexpected failures:");for(const e of f.values())console.error("  - "+e)}d&&process.exit(1),console.warn("pass "+u().postcssPlugin)}}export{u as default};
