import o,{promises as e}from"fs";import n from"path";import t from"postcss";import s from"postcss-8.4";import r from"postcss-html";import{strict as c}from"assert";const noopPlugin=()=>({postcssPlugin:"noop-plugin",Rule(){}});noopPlugin.postcss=!0;const i="----------------------------------------";function formatCSSAssertError(o,e,n,t=!1){let s="";if(s+=`\n${o}\n\n`,e.message&&(s+=`message :\n  ${e.message}\n\n`),e.options)try{s+=`options :\n${JSON.stringify(e.options,null,2)}\n\n`}catch(o){}return s+=`output changed :\n${prettyDiff(n.message)}\n`,t||(s+="\n"+i),s}function formatWarningsAssertError(o,e,n,t,s=!1){let r="";if(r+=`\n${o}\n\n`,e.message&&(r+=`message :\n  ${e.message}\n\n`),e.options)try{r+=`options :\n${JSON.stringify(e.options,null,2)}\n\n`}catch(o){}return r+=`unexpected or missing warnings :\n+ actual ${n.length}\n- expected ${t}\n`,s||(n.forEach((o=>{r+=`\n[${o.plugin}]: ${o.text}`})),n.length&&(r+="\n"),r+="\n"+i),r}function prettyDiff(o){return o.replace(/[^\\](\\n)/gm,((o,e)=>o.replace(e," "))).replace(/(\\t)/gm,((o,e)=>o.replace(e," "))).replace(/\+$/gm,"").replace(/^Expected values to be strictly equal:\n/,"")}function formatGitHubActionAnnotation(o,e="error",t={}){let s="::"+e;const r=Object.keys(t).map((o=>{let e=String(t[o]);return"file"===o&&process.env.GITHUB_WORKSPACE&&(e=n.relative(process.env.GITHUB_WORKSPACE,n.resolve(e))),`${o}=${s=e,s.replace(/\r/g,"%0D").replace(/\n/g,"%0A").replace(/]/g,"%5D").replace(/;/g,"%3B")}`;var s})).join(",");return r&&(s+=` ${r}`),`${s}::${c=o||"",c.replace(/\r/g,"%0D").replace(/\n/g,"%0A")}`;var c}function reduceInformationInCssSyntaxError(o){process.env.DEBUG||(delete o.source,o.input&&delete o.input.source,delete o.postcssNode)}const a=process.env.GITHUB_ACTIONS&&"true"===process.env.ENABLE_ANNOTATIONS_FOR_NODE&&"true"===process.env.ENABLE_ANNOTATIONS_FOR_OS;function postcssSyntax(o){return o.postcssSyntaxHTML?r():null}function postcssTape(r){let l=!1;{!0!==r.postcss&&(l=!0,a?console.log(formatGitHubActionAnnotation('postcss flag not set to "true" on exported plugin object',"error",{file:"./package.json",line:1,col:1})):console.error(`\npostcss flag not set to "true"\n\n${i}`));const e=r();e.postcssPlugin&&"string"==typeof e.postcssPlugin||(l=!0,a?console.log(formatGitHubActionAnnotation('plugin name not set via "postcssPlugin"',"error",{file:"./package.json",line:1,col:1})):console.error(`\nplugin name not set via "postcssPlugin"\n\n${i}`));const n=JSON.parse(o.readFileSync("./package.json").toString());n.keywords&&n.keywords.includes("postcss-plugin")||(l=!0,a?console.log(formatGitHubActionAnnotation('package.json does not include "postcss-plugin" keyword',"error",{file:"./package.json",line:1,col:1})):console.error(`\npackage.json does not include "postcss-plugin" keyword\n\n${i}`));const t=["css-has-pseudo","css-blank-pseudo","css-prefers-color-scheme","@csstools/css-has-pseudo-experimental"].includes(n.name);let s=n.name;if(s.startsWith("@")){s=n.name.split("/").slice(1).join("/")}s.startsWith("postcss-")||t||(l=!0,a?console.log(formatGitHubActionAnnotation('plugin name in package.json does not start with "postcss-"',"error",{file:"./package.json",line:1,col:1})):console.error(`\nplugin name in package.json does not start with "postcss-"\n\n${i}`)),Object.keys(Object(n.dependencies)).includes("postcss")&&!("postcssTapeSelfTest"in r)&&(l=!0,a?console.log(formatGitHubActionAnnotation("postcss should only be a peer and/or dev dependency","error",{file:"./package.json",line:1,col:1})):console.error(`\npostcss should only be a peer and/or dev dependency\n\n${i}`))}return async o=>{const p=new Set;for(const u in o){const g=o[u];g.before&&await g.before();const f=n.join(".","test",u.split(":")[0]),d=n.join(".","test",u.replace(/:/g,"."));let m="css";g.postcssSyntaxHTML&&(m="html");const S=`${f}.${m}`;let A=`${d}.expect.${m}`,$=`${d}.result.${m}`;g.expect&&(A=n.join(".","test",g.expect)),g.result&&($=n.join(".","test",g.result));const w=g.plugins??[r(g.options)],y=await e.readFile(S,"utf8");let h,b="";try{b=await e.readFile(A,"utf8")}catch(o){l=!0,b=!1,a?console.log(formatGitHubActionAnnotation(`${u}\n\nmissing or broken "expect" file: "${n.parse(A).base}"`,"error",{file:S,line:1,col:1})):(p.add(u),console.error(`\n${u}\n\nmissing or broken "expect" file: "${n.parse(A).base}"\n\n${i}`))}let x=!1;try{h=await t(w).process(y,{from:S,to:$,map:{inline:!1,annotation:!1},syntax:postcssSyntax(g)})}catch(o){if(reduceInformationInCssSyntaxError(o),x=!0,g.exception&&g.exception.test(o.message))continue;throw o}!x&&g.exception&&(l=!0,a?console.log(formatGitHubActionAnnotation(`${u}\n\nexpected an exception but got none`,"error",{file:S,line:1,col:1})):(p.add(u),console.error(`\n${u}\n\nexpected an exception but got none\n\n${i}`)));const E=h.css.toString();if(await e.writeFile($,E,"utf8"),process.env.REWRITE_EXPECTS&&e.writeFile(A,E,"utf8"),!1!==b){try{c.strictEqual(E,b)}catch(o){l=!0,a?console.log(formatGitHubActionAnnotation(formatCSSAssertError(u,g,o,!0),"error",{file:A,line:1,col:1})):(p.add(u),console.error(formatCSSAssertError(u,g,o)))}try{if(!g.postcssSyntaxHTML&&h.map.toJSON().sources.includes("<no source>"))throw new Error("Sourcemap is broken")}catch(o){l=!0;const e='\nThis is most likely a newly created PostCSS AST Node without a value for "source".\nsee :\n- https://github.com/postcss/postcss/blob/main/docs/guidelines/plugin.md#24-set-nodesource-for-new-nodes\n- https://postcss.org/api/#node-source';a?console.log(formatGitHubActionAnnotation(`${u}\n\nbroken source map: ${JSON.stringify(h.map.toJSON().sources)}\n${e}`,"error",{file:S,line:1,col:1})):(p.add(u),console.error(`\n${u}\n\nbroken source map: ${JSON.stringify(h.map.toJSON().sources)}\n${e}\n\n${i}`))}g.after&&await g.after();try{const o=await e.readFile($,"utf8");if((await t([noopPlugin()]).process(o,{from:$,to:$,map:{inline:!1,annotation:!1},syntax:postcssSyntax(g)})).warnings().length)throw new Error("Unexpected warnings on second pass")}catch(o){l=!0,a?console.log(formatGitHubActionAnnotation(`${u}\n\nresult was not parsable with PostCSS.`,"error",{file:A,line:1,col:1})):(p.add(u),console.error(`\n${u}\n\nresult was not parsable with PostCSS.\n\n${i}`))}if(t([noopPlugin()]).version!==s([noopPlugin()]).version){const o=await s(w).process(y,{from:S,to:$,map:{inline:!1,annotation:!1}});try{c.strictEqual(o.css.toString(),E)}catch(o){reduceInformationInCssSyntaxError(o),l=!0,a?console.log(formatGitHubActionAnnotation("testing older PostCSS:\n"+formatCSSAssertError(u,g,o,!0),"error",{file:A,line:1,col:1})):(p.add(u),console.error("testing older PostCSS:\n"+formatCSSAssertError(u,g,o)))}}try{(h.warnings().length||g.warnings)&&c.strictEqual(h.warnings().length,g.warnings)}catch(o){l=!0,a?console.log(formatGitHubActionAnnotation(formatWarningsAssertError(u,g,h.warnings(),g.warnings??0,!0),"error",{file:A,line:1,col:1})):(p.add(u),console.error(formatWarningsAssertError(u,g,h.warnings(),g.warnings??0)))}}}if(p.size){console.error("\nunexpected failures:");for(const o of p.values())console.error("  - "+o)}l&&process.exit(1),console.warn("pass "+r().postcssPlugin)}}const l={postcssPlugin:"declaration-cloner",Declaration(o){"to-clone"===o.prop&&o.cloneBefore({prop:"cloned"})}},p={postcssPlugin:"rule-cloner",prepare(){const o=new WeakSet;return{RuleExit(e){o.has(e)||"to-clone"===e.selector&&(o.add(e),e.cloneBefore({selector:"cloned"}))}}}},u={postcssPlugin:"at-rule-cloner",prepare(){const o=new WeakSet;return{AtRuleExit(e){if(!o.has(e))return"to-clone"===e.params?(o.add(e),void e.cloneBefore({params:"cloned"})):"to-clone"===e.name?(o.add(e),void e.cloneBefore({name:"cloned"})):void 0}}}};export{u as atRuleClonerPlugin,l as declarationClonerPlugin,postcssTape,p as ruleClonerPlugin};
