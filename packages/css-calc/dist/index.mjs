import{TokenType as e,NumberType as n,tokenizer as t,stringify as r}from"@csstools/css-tokenizer";import{isTokenNode as i,TokenNode as u,isCommentNode as o,isWhitespaceNode as a,isSimpleBlockNode as s,isFunctionNode as l,FunctionNode as c,parseCommaSeparatedListOfComponentValues as m}from"@csstools/css-parser-algorithms";function isCalculation(e){return"inputs"in e&&Array.isArray(e.inputs)&&"operation"in e}function solve(e){if(-1===e)return-1;const n=[];for(let t=0;t<e.inputs.length;t++){const r=e.inputs[t];if(i(r)){n.push(r);continue}const u=solve(r);if(-1===u)return-1;n.push(u)}return e.operation(n)}function unary(n){if(1!==n.length)return-1;const t=n[0].value;return t[0]===e.Number||t[0]===e.Dimension||t[0]===e.Percentage?n[0]:-1}function multiplication(t){if(2!==t.length)return-1;const r=t[0].value,i=t[1].value;if(r[0]===e.Number&&i[0]===e.Number){const t=r[4].value*i[4].value;return new u([e.Number,t.toString(),r[2],i[3],{value:t,type:r[4].type===n.Integer&&i[4].type===n.Integer?n.Integer:n.Number}])}if(r[0]===e.Percentage&&i[0]===e.Number){const n=r[4].value*i[4].value;return new u([e.Percentage,n.toString()+"%",r[2],i[3],{value:n}])}if(r[0]===e.Number&&i[0]===e.Percentage){const n=r[4].value*i[4].value;return new u([e.Percentage,n.toString()+"%",r[2],i[3],{value:n}])}if(r[0]===e.Dimension&&i[0]===e.Number){const t=r[4].value*i[4].value;return new u([e.Dimension,t.toString()+r[4].unit,r[2],i[3],{value:t,type:r[4].type===n.Integer&&i[4].type===n.Integer?n.Integer:n.Number,unit:r[4].unit}])}if(r[0]===e.Number&&i[0]===e.Dimension){const t=r[4].value*i[4].value;return new u([e.Dimension,t.toString()+i[4].unit,r[2],i[3],{value:t,type:r[4].type===n.Integer&&i[4].type===n.Integer?n.Integer:n.Number,unit:i[4].unit}])}return-1}function Infinity_Token(t,r,i){if(!Number.isFinite(t)){let o="",a=Number.POSITIVE_INFINITY;if(Number.NEGATIVE_INFINITY===t&&(o="-",a=Number.NEGATIVE_INFINITY),r[0]===e.Number)return new u([r[0],o+Number.MAX_SAFE_INTEGER.toString(),r[2],i[3],{value:a,type:n.Integer}]);if(r[0]===e.Percentage)return new u([r[0],o+Number.MAX_SAFE_INTEGER.toString()+"%",r[2],i[3],{value:a}]);if(r[0]===e.Dimension)return new u([r[0],o+Number.MAX_SAFE_INTEGER.toString()+r[4].unit,r[2],i[3],{value:a,unit:r[4].unit,type:n.Integer}])}}function NaN_Token(n,t,r){if(Number.isNaN(n))return new u([e.Ident,"NaN",t[2],r[3],{value:"NaN"}])}function division(t){if(2!==t.length)return-1;const r=t[0].value,i=t[1].value;if(r[0]===e.Number&&i[0]===e.Number){const t=r[4].value/i[4].value;return NaN_Token(t,r,i)??Infinity_Token(t,r,i)??new u([e.Number,t.toString(),r[2],i[3],{value:t,type:Number.isInteger(t)?n.Integer:n.Number}])}if(r[0]===e.Percentage&&i[0]===e.Number){const n=r[4].value/i[4].value;return NaN_Token(n,r,i)??Infinity_Token(n,r,i)??new u([e.Percentage,n.toString()+"%",r[2],i[3],{value:n}])}if(r[0]===e.Dimension&&i[0]===e.Number){const t=r[4].value/i[4].value;return NaN_Token(t,r,i)??Infinity_Token(t,r,i)??new u([e.Dimension,t.toString()+r[4].unit,r[2],i[3],{value:t,type:r[4].type===n.Integer&&i[4].type===n.Integer?n.Integer:n.Number,unit:r[4].unit}])}return-1}const p=new Map([["cm",e=>e],["mm",e=>10*e],["q",e=>40*e],["in",e=>e/2.54],["pc",e=>e/2.54*6],["pt",e=>e/2.54*72],["px",e=>e/2.54*96]]),f=new Map([["cm",e=>2.54*e],["mm",e=>25.4*e],["q",e=>25.4*e*4],["in",e=>e],["pc",e=>6*e],["pt",e=>72*e],["px",e=>96*e]]),v=new Map([["cm",e=>e/10],["mm",e=>e],["q",e=>4*e],["in",e=>e/25.4],["pc",e=>e/25.4*6],["pt",e=>e/25.4*72],["px",e=>e/25.4*96]]),g=new Map([["ms",e=>e],["s",e=>e/1e3]]),N=new Map([["ms",e=>1e3*e],["s",e=>e]]),b=new Map([["cm",p],["mm",v],["in",f],["ms",g],["s",N]]);function convertUnit(t,r){if(t[0]!==e.Dimension)return r;if(r[0]!==e.Dimension)return r;const i=t[4].unit.toLowerCase(),u=r[4].unit.toLowerCase();if(i===u)return r;const o=b.get(u);if(!o)return r;const a=o.get(i);if(!a)return r;const s=a(r[4].value);return[e.Dimension,s.toString()+t[4].unit,r[2],r[3],{value:s,unit:t[4].unit,type:Number.isInteger(s)?n.Integer:n.Number}]}function addition(t){if(2!==t.length)return-1;const r=t[0].value;let i=t[1].value;if(r[0]===e.Number&&i[0]===e.Number){const t=r[4].value+i[4].value;return new u([e.Number,t.toString(),r[2],i[3],{value:t,type:r[4].type===n.Integer&&i[4].type===n.Integer?n.Integer:n.Number}])}if(r[0]===e.Percentage&&i[0]===e.Percentage){const n=r[4].value+i[4].value;return new u([e.Percentage,n.toString()+"%",r[2],i[3],{value:n}])}if(r[0]===e.Dimension&&i[0]===e.Dimension&&(i=convertUnit(r,i),r[4].unit.toLowerCase()===i[4].unit.toLowerCase())){const t=r[4].value+i[4].value;return new u([e.Dimension,t.toString()+r[4].unit,r[2],i[3],{value:t,type:r[4].type===n.Integer&&i[4].type===n.Integer?n.Integer:n.Number,unit:r[4].unit}])}return-1}function subtraction(t){if(2!==t.length)return-1;const r=t[0].value;let i=t[1].value;if(r[0]===e.Number&&i[0]===e.Number){const t=r[4].value-i[4].value;return new u([e.Number,t.toString(),r[2],i[3],{value:t,type:r[4].type===n.Integer&&i[4].type===n.Integer?n.Integer:n.Number}])}if(r[0]===e.Percentage&&i[0]===e.Percentage){const n=r[4].value-i[4].value;return new u([e.Percentage,n.toString()+"%",r[2],i[3],{value:n}])}if(r[0]===e.Dimension&&i[0]===e.Dimension&&(i=convertUnit(r,i),r[4].unit.toLowerCase()===i[4].unit.toLowerCase())){const t=r[4].value-i[4].value;return new u([e.Dimension,t.toString()+r[4].unit,r[2],i[3],{value:t,type:r[4].type===n.Integer&&i[4].type===n.Integer?n.Integer:n.Number,unit:r[4].unit}])}return-1}function solveMin(t,r){const o=r[0];if(!o||!i(o))return-1;if(1!==new Set(r.map((e=>e.type))).size)return-1;const a=r[0].value;if(a[0]!==e.Dimension&&a[0]!==e.Number&&a[0]!==e.Percentage)return-1;if(1!==new Set(r.map((e=>e.value[0]))).size)return-1;const s=r.map((e=>convertUnit(a,e.value)));if(1!==new Set(s.map((e=>(e[4].unit??"").toLowerCase()))).size)return-1;const l=s.map((e=>e[4].value)),c=Math.min(...l),m=t.tokens();return a[0]===e.Dimension?{inputs:[new u([e.Dimension,c.toString()+a[4].unit,m[0][2],m[m.length-1][3],{value:c,type:Number.isInteger(c)?n.Integer:n.Number,unit:a[4].unit}])],operation:unary}:a[0]===e.Percentage?{inputs:[new u([e.Percentage,c.toString()+"%",m[0][2],m[m.length-1][3],{value:c}])],operation:unary}:{inputs:[new u([e.Number,c.toString(),m[0][2],m[m.length-1][3],{value:c,type:Number.isInteger(c)?n.Integer:n.Number}])],operation:unary}}function solveMax(t,r){const o=r[0];if(!o||!i(o))return-1;if(1!==new Set(r.map((e=>e.type))).size)return-1;const a=r[0].value;if(a[0]!==e.Dimension&&a[0]!==e.Number&&a[0]!==e.Percentage)return-1;if(1!==new Set(r.map((e=>e.value[0]))).size)return-1;const s=r.map((e=>convertUnit(a,e.value)));if(1!==new Set(s.map((e=>(e[4].unit??"").toLowerCase()))).size)return-1;const l=s.map((e=>e[4].value)),c=Math.max(...l),m=t.tokens();return a[0]===e.Dimension?{inputs:[new u([e.Dimension,c.toString()+a[4].unit,m[0][2],m[m.length-1][3],{value:c,type:Number.isInteger(c)?n.Integer:n.Number,unit:a[4].unit}])],operation:unary}:a[0]===e.Percentage?{inputs:[new u([e.Percentage,c.toString()+"%",m[0][2],m[m.length-1][3],{value:c}])],operation:unary}:{inputs:[new u([e.Number,c.toString(),m[0][2],m[m.length-1][3],{value:c,type:Number.isInteger(c)?n.Integer:n.Number}])],operation:unary}}function solveClamp(t,r,o,a){if(!i(r)||!i(o)||!i(a))return-1;const s=r.value,l=convertUnit(s,o.value),c=convertUnit(s,a.value);if(s[0]!==e.Dimension&&s[0]!==e.Number&&s[0]!==e.Percentage)return-1;if(s[0]!==l[0])return-1;if(s[0]!==c[0])return-1;if(s[0]===e.Dimension){if(s[4].unit.toLowerCase()!==l[4].unit.toLowerCase())return-1;if(s[4].unit.toLowerCase()!==c[4].unit.toLowerCase())return-1}const m=Math.max(s[4].value,Math.min(l[4].value,c[4].value)),p=t.tokens();return s[0]===e.Dimension?{inputs:[new u([e.Dimension,m.toString()+s[4].unit,p[0][2],p[p.length-1][3],{value:m,type:Number.isInteger(m)?n.Integer:n.Number,unit:s[4].unit}])],operation:unary}:s[0]===e.Percentage?{inputs:[new u([e.Percentage,m.toString()+"%",p[0][2],p[p.length-1][3],{value:m}])],operation:unary}:{inputs:[new u([e.Number,m.toString(),p[0][2],p[p.length-1][3],{value:m,type:Number.isInteger(m)?n.Integer:n.Number}])],operation:unary}}function calc(t,r){const c=[...t.value.filter((e=>!o(e)&&!a(e)))];for(let t=0;t<c.length;t++){const o=c[t];if(!i(o))continue;const a=o.value;if(a[0]!==e.Ident)continue;const s=a[4].value.toLowerCase();switch(s){case"e":c.splice(t,1,new u([e.Number,Math.E.toString(),a[2],a[3],{value:Math.E,type:n.Number}]));break;case"pi":c.splice(t,1,new u([e.Number,Math.PI.toString(),a[2],a[3],{value:Math.PI,type:n.Number}]));break;default:if(r.has(s)){const e=r.get(s);c.splice(t,1,new u(e))}}}if(1===c.length&&i(c[0]))return{inputs:[c[0]],operation:unary};let m=0;for(;m<c.length;){const n=c[m];if(s(n)&&n.startToken[0]===e.OpenParen){const e=calc(n,r);if(-1===e)return-1;c.splice(m,1,e)}else if(l(n))switch(n.getName().toLowerCase()){case"calc":{const e=calc(n,r);if(-1===e)return-1;c.splice(m,1,e);break}case"clamp":{const e=clamp(n,r);if(-1===e)return-1;c.splice(m,1,e);break}case"min":{const e=min(n,r);if(-1===e)return-1;c.splice(m,1,e);break}case"max":{const e=max(n,r);if(-1===e)return-1;c.splice(m,1,e);break}default:return-1}else m++}if(m=0,1===c.length&&isCalculation(c[0]))return c[0];for(;m<c.length;){const n=c[m];if(!n||!i(n)&&!isCalculation(n)){m++;continue}const t=c[m+1];if(!t||!i(t)){m++;continue}const r=t.value;if(r[0]!==e.Delim||"*"!==r[4].value&&"/"!==r[4].value){m++;continue}const u=c[m+2];if(!u||!i(u)&&!isCalculation(u))return-1;"*"!==r[4].value?"/"!==r[4].value?m++:c.splice(m,3,{inputs:[n,u],operation:division}):c.splice(m,3,{inputs:[n,u],operation:multiplication})}if(m=0,1===c.length&&isCalculation(c[0]))return c[0];for(;m<c.length;){const n=c[m];if(!n||!i(n)&&!isCalculation(n)){m++;continue}const t=c[m+1];if(!t||!i(t)){m++;continue}const r=t.value;if(r[0]!==e.Delim||"+"!==r[4].value&&"-"!==r[4].value){m++;continue}const u=c[m+2];if(!u||!i(u)&&!isCalculation(u))return-1;"+"!==r[4].value?"-"!==r[4].value?m++:c.splice(m,3,{inputs:[n,u],operation:subtraction}):c.splice(m,3,{inputs:[n,u],operation:addition})}return 1===c.length&&isCalculation(c[0])?c[0]:-1}function clamp(n,t){const r=[...n.value.filter((e=>!o(e)&&!a(e)))],u=[],s=[],l=[];{let n=u;for(let t=0;t<r.length;t++){const o=r[t];if(i(o)&&o.value[0]===e.Comma){if(n===l)return-1;if(n===s){n=l;continue}if(n===u){n=s;continue}return-1}n.push(o)}}const m=solve(calc(new c([e.Function,"calc(",-1,-1,{value:"calc"}],[e.CloseParen,")",-1,-1,void 0],u),t));if(-1===m)return-1;const p=solve(calc(new c([e.Function,"calc(",-1,-1,{value:"calc"}],[e.CloseParen,")",-1,-1,void 0],s),t));if(-1===p)return-1;const f=solve(calc(new c([e.Function,"calc(",-1,-1,{value:"calc"}],[e.CloseParen,")",-1,-1,void 0],l),t));return-1===f?-1:solveClamp(n,m,p,f)}function max(n,t){const r=[...n.value.filter((e=>!o(e)&&!a(e)))],u=[];{const n=[];let o=[];for(let t=0;t<r.length;t++){const u=r[t];i(u)&&u.value[0]===e.Comma?(n.push(o),o=[]):o.push(u)}n.push(o);for(let r=0;r<n.length;r++){const i=solve(calc(new c([e.Function,"calc(",-1,-1,{value:"calc"}],[e.CloseParen,")",-1,-1,void 0],n[r]),t));if(-1===i)return-1;u.push(i)}}return solveMax(n,u)}function min(n,t){const r=[...n.value.filter((e=>!o(e)&&!a(e)))],u=[];{const n=[];let o=[];for(let t=0;t<r.length;t++){const u=r[t];i(u)&&u.value[0]===e.Comma?(n.push(o),o=[]):o.push(u)}n.push(o);for(let r=0;r<n.length;r++){const i=solve(calc(new c([e.Function,"calc(",-1,-1,{value:"calc"}],[e.CloseParen,")",-1,-1,void 0],n[r]),t));if(-1===i)return-1;u.push(i)}}return solveMin(n,u)}function tokenizeGlobals(n){const r=new Map;if(!n)return r;for(const[i,u]of n)if("string"!=typeof u)r.set(i,u);else{const n=t({css:u}),o=n.nextToken();if(n.nextToken(),!n.endOfFile())continue;if(o[0]!==e.Number&&o[0]!==e.Dimension&&o[0]!==e.Percentage)continue;r.set(i,o)}return r}function convert(e,n){const i=tokenizeGlobals(n),u=t({css:e}),o=[];for(;!u.endOfFile();)o.push(u.nextToken());o.push(u.nextToken());const a=m(o,{onParseError:e=>{throw e}});for(let e=0;e<a.length;e++){const n=a[e];for(let e=0;e<n.length;e++){const t=n[e];if(l(t))if("calc"===t.getName().toLowerCase()){const r=solve(calc(t,i));if(-1!==r){n.splice(e,1,r);continue}}else if("clamp"===t.getName().toLowerCase()){const r=solve(clamp(t,i));if(-1!==r){n.splice(e,1,r);continue}}else if("min"===t.getName().toLowerCase()){const r=solve(min(t,i));if(-1!==r){n.splice(e,1,r);continue}}else if("max"===t.getName().toLowerCase()){const r=solve(max(t,i));if(-1!==r){n.splice(e,1,r);continue}}(s(t)||l(t))&&t.walk(((e,n)=>{if("number"!=typeof n)return;const t=e.node;if(l(t))if("calc"===t.getName().toLowerCase()){const r=solve(calc(t,i));if(-1!==r)return void e.parent.value.splice(n,1,r)}else if("clamp"===t.getName().toLowerCase()){const r=solve(clamp(t,i));if(-1!==r)return void e.parent.value.splice(n,1,r)}else if("min"===t.getName().toLowerCase()){const r=solve(min(t,i));if(-1!==r)return void e.parent.value.splice(n,1,r)}else if("max"===t.getName().toLowerCase()){const r=solve(max(t,i));if(-1!==r)return void e.parent.value.splice(n,1,r)}}))}}return a.map((e=>e.map((e=>r(...e.tokens()))).join(""))).join(",")}export{convert};
