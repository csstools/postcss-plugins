"use strict";var e=require("@csstools/css-tokenizer"),n=require("@csstools/css-parser-algorithms");function isCalculation(e){return!!e&&"object"==typeof e&&"inputs"in e&&Array.isArray(e.inputs)&&"operation"in e}function solve(e){if(-1===e)return-1;const o=[];for(let t=0;t<e.inputs.length;t++){const u=e.inputs[t];if(n.isTokenNode(u)){o.push(u);continue}const i=solve(u);if(-1===i)return-1;o.push(i)}return e.operation(o)}const o={cm:"px",in:"px",mm:"px",pc:"px",pt:"px",px:"px",q:"px",deg:"deg",grad:"deg",rad:"deg",turn:"deg",ms:"s",s:"s",hz:"hz",khz:"hz"},t=new Map([["cm",e=>e],["mm",e=>10*e],["q",e=>40*e],["in",e=>e/2.54],["pc",e=>e/2.54*6],["pt",e=>e/2.54*72],["px",e=>e/2.54*96]]),u=new Map([["deg",e=>e],["grad",e=>e/.9],["rad",e=>e/180*Math.PI],["turn",e=>e/360]]),i=new Map([["deg",e=>.9*e],["grad",e=>e],["rad",e=>.9*e/180*Math.PI],["turn",e=>.9*e/360]]),r=new Map([["hz",e=>e],["khz",e=>e/1e3]]),a=new Map([["cm",e=>2.54*e],["mm",e=>25.4*e],["q",e=>25.4*e*4],["in",e=>e],["pc",e=>6*e],["pt",e=>72*e],["px",e=>96*e]]),l=new Map([["hz",e=>1e3*e],["khz",e=>e]]),s=new Map([["cm",e=>e/10],["mm",e=>e],["q",e=>4*e],["in",e=>e/25.4],["pc",e=>e/25.4*6],["pt",e=>e/25.4*72],["px",e=>e/25.4*96]]),c=new Map([["ms",e=>e],["s",e=>e/1e3]]),T=new Map([["cm",e=>e/6*2.54],["mm",e=>e/6*25.4],["q",e=>e/6*25.4*4],["in",e=>e/6],["pc",e=>e],["pt",e=>e/6*72],["px",e=>e/6*96]]),p=new Map([["cm",e=>e/72*2.54],["mm",e=>e/72*25.4],["q",e=>e/72*25.4*4],["in",e=>e/72],["pc",e=>e/72*6],["pt",e=>e],["px",e=>e/72*96]]),v=new Map([["cm",e=>e/96*2.54],["mm",e=>e/96*25.4],["q",e=>e/96*25.4*4],["in",e=>e/96],["pc",e=>e/96*6],["pt",e=>e/96*72],["px",e=>e]]),m=new Map([["cm",e=>e/4/10],["mm",e=>e/4],["q",e=>e],["in",e=>e/4/25.4],["pc",e=>e/4/25.4*6],["pt",e=>e/4/25.4*72],["px",e=>e/4/25.4*96]]),N=new Map([["deg",e=>180*e/Math.PI],["grad",e=>180*e/Math.PI/.9],["rad",e=>e],["turn",e=>180*e/Math.PI/360]]),y=new Map([["ms",e=>1e3*e],["s",e=>e]]),k=new Map([["deg",e=>360*e],["grad",e=>360*e/.9],["rad",e=>360*e/180*Math.PI],["turn",e=>e]]),f=new Map([["cm",t],["mm",s],["q",m],["in",a],["pc",T],["pt",p],["px",v],["ms",c],["s",y],["deg",u],["grad",i],["rad",N],["turn",k],["hz",r],["khz",l]]);function convertUnit(n,o){if(n[0]!==e.TokenType.Dimension)return o;if(o[0]!==e.TokenType.Dimension)return o;const t=n[4].unit.toLowerCase(),u=o[4].unit.toLowerCase();if(t===u)return o;const i=f.get(u);if(!i)return o;const r=i.get(t);if(!r)return o;const a=r(o[4].value);return[e.TokenType.Dimension,a.toString()+n[4].unit,o[2],o[3],{value:a,unit:n[4].unit,type:Number.isInteger(a)?e.NumberType.Integer:e.NumberType.Number}]}function toCanonicalUnit(n){if(n[0]!==e.TokenType.Dimension)return n;const t=n[4].unit.toLowerCase(),u=o[t];if(t===u)return n;const i=f.get(t);if(!i)return n;const r=i.get(u);if(!r)return n;const a=r(n[4].value);return[e.TokenType.Dimension,a.toString()+u,n[2],n[3],{value:a,unit:u,type:Number.isInteger(a)?e.NumberType.Integer:e.NumberType.Number}]}function addition(o){if(2!==o.length)return-1;const t=o[0].value;let u=o[1].value;if(t[0]===e.TokenType.Number&&u[0]===e.TokenType.Number){const o=t[4].value+u[4].value;return new n.TokenNode([e.TokenType.Number,o.toString(),t[2],u[3],{value:o,type:t[4].type===e.NumberType.Integer&&u[4].type===e.NumberType.Integer?e.NumberType.Integer:e.NumberType.Number}])}if(t[0]===e.TokenType.Percentage&&u[0]===e.TokenType.Percentage){const o=t[4].value+u[4].value;return new n.TokenNode([e.TokenType.Percentage,o.toString()+"%",t[2],u[3],{value:o}])}if(t[0]===e.TokenType.Dimension&&u[0]===e.TokenType.Dimension&&(u=convertUnit(t,u),t[4].unit.toLowerCase()===u[4].unit.toLowerCase())){const o=t[4].value+u[4].value;return new n.TokenNode([e.TokenType.Dimension,o.toString()+t[4].unit,t[2],u[3],{value:o,type:t[4].type===e.NumberType.Integer&&u[4].type===e.NumberType.Integer?e.NumberType.Integer:e.NumberType.Number,unit:t[4].unit}])}return-1}function division(o){if(2!==o.length)return-1;const t=o[0].value,u=o[1].value;if(t[0]===e.TokenType.Number&&u[0]===e.TokenType.Number){const o=t[4].value/u[4].value;return new n.TokenNode([e.TokenType.Number,o.toString(),t[2],u[3],{value:o,type:Number.isInteger(o)?e.NumberType.Integer:e.NumberType.Number}])}if(t[0]===e.TokenType.Percentage&&u[0]===e.TokenType.Number){const o=t[4].value/u[4].value;return new n.TokenNode([e.TokenType.Percentage,o.toString()+"%",t[2],u[3],{value:o}])}if(t[0]===e.TokenType.Dimension&&u[0]===e.TokenType.Number){const o=t[4].value/u[4].value;return new n.TokenNode([e.TokenType.Dimension,o.toString()+t[4].unit,t[2],u[3],{value:o,type:Number.isInteger(o)?e.NumberType.Integer:e.NumberType.Number,unit:t[4].unit}])}return-1}function multiplication(o){if(2!==o.length)return-1;const t=o[0].value,u=o[1].value;if(t[0]===e.TokenType.Number&&u[0]===e.TokenType.Number){const o=t[4].value*u[4].value;return new n.TokenNode([e.TokenType.Number,o.toString(),t[2],u[3],{value:o,type:t[4].type===e.NumberType.Integer&&u[4].type===e.NumberType.Integer?e.NumberType.Integer:e.NumberType.Number}])}if(t[0]===e.TokenType.Percentage&&u[0]===e.TokenType.Number){const o=t[4].value*u[4].value;return new n.TokenNode([e.TokenType.Percentage,o.toString()+"%",t[2],u[3],{value:o}])}if(t[0]===e.TokenType.Number&&u[0]===e.TokenType.Percentage){const o=t[4].value*u[4].value;return new n.TokenNode([e.TokenType.Percentage,o.toString()+"%",t[2],u[3],{value:o}])}if(t[0]===e.TokenType.Dimension&&u[0]===e.TokenType.Number){const o=t[4].value*u[4].value;return new n.TokenNode([e.TokenType.Dimension,o.toString()+t[4].unit,t[2],u[3],{value:o,type:t[4].type===e.NumberType.Integer&&u[4].type===e.NumberType.Integer?e.NumberType.Integer:e.NumberType.Number,unit:t[4].unit}])}if(t[0]===e.TokenType.Number&&u[0]===e.TokenType.Dimension){const o=t[4].value*u[4].value;return new n.TokenNode([e.TokenType.Dimension,o.toString()+u[4].unit,t[2],u[3],{value:o,type:t[4].type===e.NumberType.Integer&&u[4].type===e.NumberType.Integer?e.NumberType.Integer:e.NumberType.Number,unit:u[4].unit}])}return-1}function resolveGlobalsAndConstants(o,t){for(let u=0;u<o.length;u++){const i=o[u];if(!n.isTokenNode(i))continue;const r=i.value;if(r[0]!==e.TokenType.Ident)continue;const a=r[4].value.toLowerCase();switch(a){case"e":o.splice(u,1,new n.TokenNode([e.TokenType.Number,Math.E.toString(),r[2],r[3],{value:Math.E,type:e.NumberType.Number}]));break;case"pi":o.splice(u,1,new n.TokenNode([e.TokenType.Number,Math.PI.toString(),r[2],r[3],{value:Math.PI,type:e.NumberType.Number}]));break;case"infinity":o.splice(u,1,new n.TokenNode([e.TokenType.Number,"infinity",r[2],r[3],{value:1/0,type:e.NumberType.Number}]));break;case"-infinity":o.splice(u,1,new n.TokenNode([e.TokenType.Number,"-infinity",r[2],r[3],{value:-1/0,type:e.NumberType.Number}]));break;case"nan":o.splice(u,1,new n.TokenNode([e.TokenType.Number,"NaN",r[2],r[3],{value:Number.NaN,type:e.NumberType.Number}]));break;default:if(t.has(a)){const e=t.get(a);o.splice(u,1,new n.TokenNode(e))}}}return o}function unary(n){if(1!==n.length)return-1;const o=n[0].value;return o[0]===e.TokenType.Number||o[0]===e.TokenType.Dimension||o[0]===e.TokenType.Percentage?n[0]:-1}function resultToCalculation(n,o,t){return o[0]===e.TokenType.Dimension?dimensionToCalculation(n,o[4].unit,t):o[0]===e.TokenType.Percentage?percentageToCalculation(n,t):o[0]===e.TokenType.Number?numberToCalculation(n,t):-1}function dimensionToCalculation(o,t,u){const i=o.tokens();return{inputs:[new n.TokenNode([e.TokenType.Dimension,u.toString()+t,i[0][2],i[i.length-1][3],{value:u,type:Number.isInteger(u)?e.NumberType.Integer:e.NumberType.Number,unit:t}])],operation:unary}}function percentageToCalculation(o,t){const u=o.tokens();return{inputs:[new n.TokenNode([e.TokenType.Percentage,t.toString()+"%",u[0][2],u[u.length-1][3],{value:t}])],operation:unary}}function numberToCalculation(o,t){const u=o.tokens();return{inputs:[new n.TokenNode([e.TokenType.Number,t.toString(),u[0][2],u[u.length-1][3],{value:t,type:Number.isInteger(t)?e.NumberType.Integer:e.NumberType.Number}])],operation:unary}}function solveACos(n,o){const t=o.value;if(t[0]!==e.TokenType.Number)return-1;return dimensionToCalculation(n,"rad",Math.acos(t[4].value))}function solveASin(n,o){const t=o.value;if(t[0]!==e.TokenType.Number)return-1;return dimensionToCalculation(n,"rad",Math.asin(t[4].value))}function solveATan(n,o){const t=o.value;if(t[0]!==e.TokenType.Number)return-1;return dimensionToCalculation(n,"rad",Math.atan(t[4].value))}function solveATan2(n,o,t){const u=o.value;if(u[0]!==e.TokenType.Dimension&&u[0]!==e.TokenType.Number)return-1;const i=convertUnit(u,t.value);if(u[0]!==i[0])return-1;if(u[0]===e.TokenType.Dimension&&u[4].unit!==i[4].unit)return-1;return dimensionToCalculation(n,"rad",Math.atan2(u[4].value,i[4].value))}function solveAbs(n,o){const t=o.value;if(t[0]!==e.TokenType.Dimension&&t[0]!==e.TokenType.Number)return-1;return resultToCalculation(n,t,Math.abs(t[4].value))}function solveClamp(o,t,u,i){if(!n.isTokenNode(t)||!n.isTokenNode(u)||!n.isTokenNode(i))return-1;const r=t.value,a=convertUnit(r,u.value),l=convertUnit(r,i.value);if(r[0]!==e.TokenType.Dimension&&r[0]!==e.TokenType.Number&&r[0]!==e.TokenType.Percentage)return-1;if(r[0]!==a[0])return-1;if(r[0]!==l[0])return-1;if(r[0]===e.TokenType.Dimension){if(r[4].unit.toLowerCase()!==a[4].unit.toLowerCase())return-1;if(r[4].unit.toLowerCase()!==l[4].unit.toLowerCase())return-1}return resultToCalculation(o,r,Math.max(r[4].value,Math.min(a[4].value,l[4].value)))}function solveCos(n,o){const t=o.value;if(t[0]!==e.TokenType.Dimension&&t[0]!==e.TokenType.Number)return-1;if(t[0]===e.TokenType.Dimension)switch(t[4].unit.toLowerCase()){case"rad":break;case"deg":t[4].value=u.get("rad")(t[4].value);break;case"grad":t[4].value=i.get("rad")(t[4].value);break;case"turn":t[4].value=k.get("rad")(t[4].value);break;default:return-1}return numberToCalculation(n,Math.cos(t[4].value))}function solveExp(n,o){const t=o.value;if(t[0]!==e.TokenType.Number)return-1;return numberToCalculation(n,Math.exp(t[4].value))}function solveHypot(o,t){const u=t[0];if(!u||!n.isTokenNode(u))return-1;if(1!==new Set(t.map((e=>e.type))).size)return-1;const i=t[0].value;if(i[0]!==e.TokenType.Dimension&&i[0]!==e.TokenType.Number&&i[0]!==e.TokenType.Percentage)return-1;if(1!==new Set(t.map((e=>e.value[0]))).size)return-1;const r=t.map((e=>convertUnit(i,e.value)));if(1!==new Set(r.map((n=>n[0]===e.TokenType.Dimension?n[4].unit.toLowerCase():""))).size)return-1;const a=r.map((e=>e[4].value)),l=Math.hypot(...a);return resultToCalculation(o,i,l)}function solveMax(o,t){const u=t[0];if(!u||!n.isTokenNode(u))return-1;if(1!==new Set(t.map((e=>e.type))).size)return-1;const i=t[0].value;if(i[0]!==e.TokenType.Dimension&&i[0]!==e.TokenType.Number&&i[0]!==e.TokenType.Percentage)return-1;if(1!==new Set(t.map((e=>e.value[0]))).size)return-1;const r=t.map((e=>convertUnit(i,e.value)));if(1!==new Set(r.map((n=>n[0]===e.TokenType.Dimension?n[4].unit.toLowerCase():""))).size)return-1;const a=r.map((e=>e[4].value)),l=Math.max(...a);return resultToCalculation(o,i,l)}function solveMin(o,t){const u=t[0];if(!u||!n.isTokenNode(u))return-1;if(1!==new Set(t.map((e=>e.type))).size)return-1;const i=t[0].value;if(i[0]!==e.TokenType.Dimension&&i[0]!==e.TokenType.Number&&i[0]!==e.TokenType.Percentage)return-1;if(1!==new Set(t.map((e=>e.value[0]))).size)return-1;const r=t.map((e=>convertUnit(i,e.value)));if(1!==new Set(r.map((n=>n[0]===e.TokenType.Dimension?n[4].unit.toLowerCase():""))).size)return-1;const a=r.map((e=>e[4].value)),l=Math.min(...a);return resultToCalculation(o,i,l)}function solveMod(n,o,t){const u=o.value;if(u[0]!==e.TokenType.Dimension&&u[0]!==e.TokenType.Number&&u[0]!==e.TokenType.Percentage)return-1;const i=convertUnit(u,t.value);if(u[0]!==i[0])return-1;if(u[0]===e.TokenType.Dimension&&u[4].unit!==i[4].unit)return-1;let r;return r=0===i[4].value?Number.NaN:Number.isFinite(u[4].value)&&(Number.isFinite(i[4].value)||(i[4].value!==Number.POSITIVE_INFINITY||u[4].value!==Number.NEGATIVE_INFINITY&&!Object.is(0*u[4].value,-0))&&(i[4].value!==Number.NEGATIVE_INFINITY||u[4].value!==Number.POSITIVE_INFINITY&&!Object.is(0*u[4].value,0)))?Number.isFinite(i[4].value)?(u[4].value%i[4].value+i[4].value)%i[4].value:u[4].value:Number.NaN,resultToCalculation(n,u,r)}function solvePow(n,o,t){const u=o.value,i=t.value;if(u[0]!==e.TokenType.Number||i[0]!==e.TokenType.Number)return-1;return numberToCalculation(n,Math.pow(u[4].value,i[4].value))}function solveRem(n,o,t){const u=o.value;if(u[0]!==e.TokenType.Dimension&&u[0]!==e.TokenType.Number&&u[0]!==e.TokenType.Percentage)return-1;const i=convertUnit(u,t.value);if(u[0]!==i[0])return-1;if(u[0]===e.TokenType.Dimension&&u[4].unit!==i[4].unit)return-1;let r;return r=0===i[4].value?Number.NaN:Number.isFinite(u[4].value)?Number.isFinite(i[4].value)?u[4].value%i[4].value:u[4].value:Number.NaN,resultToCalculation(n,u,r)}function solveRound(n,o,t,u){const i=t.value;if(i[0]!==e.TokenType.Dimension&&i[0]!==e.TokenType.Number&&i[0]!==e.TokenType.Percentage)return-1;const r=convertUnit(i,u.value);if(i[0]!==r[0])return-1;if(i[0]===e.TokenType.Dimension&&i[4].unit!==r[4].unit)return-1;let a;if(0===r[4].value)a=Number.NaN;else if(Number.isFinite(i[4].value)||Number.isFinite(r[4].value))if(!Number.isFinite(i[4].value)&&Number.isFinite(r[4].value))a=i[4].value;else if(Number.isFinite(i[4].value)&&!Number.isFinite(r[4].value))switch(o){case"down":a=i[4].value<0?-1/0:Object.is(-0,0*i[4].value)?-0:0;break;case"up":a=i[4].value>0?1/0:Object.is(0,0*i[4].value)?0:-0;break;default:a=Object.is(0,0*i[4].value)?0:-0}else if(Number.isFinite(r[4].value))switch(o){case"down":a=Math.floor(i[4].value/r[4].value)*r[4].value;break;case"up":a=Math.ceil(i[4].value/r[4].value)*r[4].value;break;case"to-zero":a=Math.trunc(i[4].value/r[4].value)*r[4].value;break;default:{let e=Math.floor(i[4].value/r[4].value)*r[4].value,n=Math.ceil(i[4].value/r[4].value)*r[4].value;if(e>n){const o=e;e=n,n=o}const o=Math.abs(i[4].value-e),t=Math.abs(i[4].value-n);a=o===t?n:o<t?e:n;break}}else a=i[4].value;else a=Number.NaN;return resultToCalculation(n,i,a)}function solveSign(n,o){const t=o.value;if(t[0]!==e.TokenType.Dimension&&t[0]!==e.TokenType.Number)return-1;return numberToCalculation(n,Math.sign(t[4].value))}function solveSin(n,o){const t=o.value;if(t[0]!==e.TokenType.Dimension&&t[0]!==e.TokenType.Number)return-1;if(t[0]===e.TokenType.Dimension)switch(t[4].unit.toLowerCase()){case"rad":break;case"deg":t[4].value=u.get("rad")(t[4].value);break;case"grad":t[4].value=i.get("rad")(t[4].value);break;case"turn":t[4].value=k.get("rad")(t[4].value);break;default:return-1}return numberToCalculation(n,Math.sin(t[4].value))}function solveSqrt(n,o){const t=o.value;if(t[0]!==e.TokenType.Number)return-1;return numberToCalculation(n,Math.sqrt(t[4].value))}function solveTan(n,o){const t=o.value;if(t[0]!==e.TokenType.Dimension&&t[0]!==e.TokenType.Number)return-1;const r=t[4].value;let a=0;if(t[0]===e.TokenType.Dimension)switch(t[4].unit.toLowerCase()){case"rad":a=N.get("deg")(r);break;case"deg":a=r,t[4].value=u.get("rad")(r);break;case"grad":a=i.get("deg")(r),t[4].value=i.get("rad")(r);break;case"turn":a=k.get("deg")(r),t[4].value=k.get("rad")(r);break;default:return-1}const l=a/90;let s;return s=a%90==0&&l%2!=0?l>0?1/0:-1/0:Math.tan(t[4].value),numberToCalculation(n,s)}function subtraction(o){if(2!==o.length)return-1;const t=o[0].value;let u=o[1].value;if(t[0]===e.TokenType.Number&&u[0]===e.TokenType.Number){const o=t[4].value-u[4].value;return new n.TokenNode([e.TokenType.Number,o.toString(),t[2],u[3],{value:o,type:t[4].type===e.NumberType.Integer&&u[4].type===e.NumberType.Integer?e.NumberType.Integer:e.NumberType.Number}])}if(t[0]===e.TokenType.Percentage&&u[0]===e.TokenType.Percentage){const o=t[4].value-u[4].value;return new n.TokenNode([e.TokenType.Percentage,o.toString()+"%",t[2],u[3],{value:o}])}if(t[0]===e.TokenType.Dimension&&u[0]===e.TokenType.Dimension&&(u=convertUnit(t,u),t[4].unit.toLowerCase()===u[4].unit.toLowerCase())){const o=t[4].value-u[4].value;return new n.TokenNode([e.TokenType.Dimension,o.toString()+t[4].unit,t[2],u[3],{value:o,type:t[4].type===e.NumberType.Integer&&u[4].type===e.NumberType.Integer?e.NumberType.Integer:e.NumberType.Number,unit:t[4].unit}])}return-1}function solveLog(o,t){if(1!==t.length&&2!==t.length)return-1;const u=t[0];if(!u||!n.isTokenNode(u))return-1;if(1!==new Set(t.map((e=>e.type))).size)return-1;if(t[0].value[0]!==e.TokenType.Number)return-1;if(1!==new Set(t.map((e=>e.value[0]))).size)return-1;const i=t.map((e=>e.value[4].value));if(1===i.length){return numberToCalculation(o,Math.log(i[0]))}return numberToCalculation(o,Math.log(i[0])/Math.log(i[1]))}const d=new Map([["abs",function abs(e,n){return singleNodeSolver(e,n,solveAbs)}],["acos",function acos(e,n){return singleNodeSolver(e,n,solveACos)}],["asin",function asin(e,n){return singleNodeSolver(e,n,solveASin)}],["atan",function atan(e,n){return singleNodeSolver(e,n,solveATan)}],["atan2",function atan2(e,n){return twoCommaSeparatedNodesSolver(e,n,solveATan2)}],["calc",calc$1],["clamp",function clamp(o,t){const u=resolveGlobalsAndConstants([...o.value.filter((e=>!n.isCommentNode(e)&&!n.isWhitespaceNode(e)))],t),i=[],r=[],a=[];{let o=i;for(let t=0;t<u.length;t++){const l=u[t];if(n.isTokenNode(l)&&l.value[0]===e.TokenType.Comma){if(o===a)return-1;if(o===r){o=a;continue}if(o===i){o=r;continue}return-1}o.push(l)}}const l=solve(calc$1(new n.FunctionNode([e.TokenType.Function,"calc(",-1,-1,{value:"calc"}],[e.TokenType.CloseParen,")",-1,-1,void 0],i),t));if(-1===l)return-1;const s=solve(calc$1(new n.FunctionNode([e.TokenType.Function,"calc(",-1,-1,{value:"calc"}],[e.TokenType.CloseParen,")",-1,-1,void 0],r),t));if(-1===s)return-1;const c=solve(calc$1(new n.FunctionNode([e.TokenType.Function,"calc(",-1,-1,{value:"calc"}],[e.TokenType.CloseParen,")",-1,-1,void 0],a),t));if(-1===c)return-1;return solveClamp(o,l,s,c)}],["cos",function cos(e,n){return singleNodeSolver(e,n,solveCos)}],["exp",function exp(e,n){return singleNodeSolver(e,n,solveExp)}],["hypot",function hypot(e,n){return variadicNodesSolver(e,n,solveHypot)}],["log",function log(e,n){return variadicNodesSolver(e,n,solveLog)}],["max",function max(e,n){return variadicNodesSolver(e,n,solveMax)}],["min",function min(e,n){return variadicNodesSolver(e,n,solveMin)}],["mod",function mod(e,n){return twoCommaSeparatedNodesSolver(e,n,solveMod)}],["pow",function pow(e,n){return twoCommaSeparatedNodesSolver(e,n,solvePow)}],["rem",function rem(e,n){return twoCommaSeparatedNodesSolver(e,n,solveRem)}],["round",function round(o,t){const u=resolveGlobalsAndConstants([...o.value.filter((e=>!n.isCommentNode(e)&&!n.isWhitespaceNode(e)))],t);let i="";const r=[],a=[];{let o=r;for(let t=0;t<u.length;t++){const l=u[t];if(!i&&0===r.length&&0===a.length&&n.isTokenNode(l)&&l.value[0]===e.TokenType.Ident){const e=l.value;if(b.has(e[4].value.toLowerCase())){i=e[4].value.toLowerCase();continue}}if(n.isTokenNode(l)&&l.value[0]===e.TokenType.Comma){if(o===a)return-1;if(o===r&&i&&0===r.length)continue;if(o===r){o=a;continue}return-1}o.push(l)}}const l=solve(calc$1(new n.FunctionNode([e.TokenType.Function,"calc(",-1,-1,{value:"calc"}],[e.TokenType.CloseParen,")",-1,-1,void 0],r),t));if(-1===l)return-1;const s=solve(calc$1(new n.FunctionNode([e.TokenType.Function,"calc(",-1,-1,{value:"calc"}],[e.TokenType.CloseParen,")",-1,-1,void 0],a),t));if(-1===s)return-1;i||(i="nearest");return solveRound(o,i,l,s)}],["sign",function sign(e,n){return singleNodeSolver(e,n,solveSign)}],["sin",function sin(e,n){return singleNodeSolver(e,n,solveSin)}],["sqrt",function sqrt(e,n){return singleNodeSolver(e,n,solveSqrt)}],["tan",function tan(e,n){return singleNodeSolver(e,n,solveTan)}]]);function calc$1(o,t){const u=resolveGlobalsAndConstants([...o.value.filter((e=>!n.isCommentNode(e)&&!n.isWhitespaceNode(e)))],t);if(1===u.length&&n.isTokenNode(u[0]))return{inputs:[u[0]],operation:unary};let i=0;for(;i<u.length;){const o=u[i];if(n.isSimpleBlockNode(o)&&o.startToken[0]===e.TokenType.OpenParen){const e=calc$1(o,t);if(-1===e)return-1;u.splice(i,1,e)}else if(n.isFunctionNode(o)){const e=d.get(o.getName().toLowerCase());if(!e)return-1;{const n=e(o,t);if(-1===n)return-1;u.splice(i,1,n)}}else i++}if(i=0,1===u.length&&isCalculation(u[0]))return u[0];for(;i<u.length;){const o=u[i];if(!o||!n.isTokenNode(o)&&!isCalculation(o)){i++;continue}const t=u[i+1];if(!t||!n.isTokenNode(t)){i++;continue}const r=t.value;if(r[0]!==e.TokenType.Delim||"*"!==r[4].value&&"/"!==r[4].value){i++;continue}const a=u[i+2];if(!a||!n.isTokenNode(a)&&!isCalculation(a))return-1;"*"!==r[4].value?"/"!==r[4].value?i++:u.splice(i,3,{inputs:[o,a],operation:division}):u.splice(i,3,{inputs:[o,a],operation:multiplication})}if(i=0,1===u.length&&isCalculation(u[0]))return u[0];for(;i<u.length;){const o=u[i];if(!o||!n.isTokenNode(o)&&!isCalculation(o)){i++;continue}const t=u[i+1];if(!t||!n.isTokenNode(t)){i++;continue}const r=t.value;if(r[0]!==e.TokenType.Delim||"+"!==r[4].value&&"-"!==r[4].value){i++;continue}const a=u[i+2];if(!a||!n.isTokenNode(a)&&!isCalculation(a))return-1;"+"!==r[4].value?"-"!==r[4].value?i++:u.splice(i,3,{inputs:[o,a],operation:subtraction}):u.splice(i,3,{inputs:[o,a],operation:addition})}return 1===u.length&&isCalculation(u[0])?u[0]:-1}function singleNodeSolver(o,t,u){const i=resolveGlobalsAndConstants([...o.value.filter((e=>!n.isCommentNode(e)&&!n.isWhitespaceNode(e)))],t),r=solve(calc$1(new n.FunctionNode([e.TokenType.Function,"calc(",-1,-1,{value:"calc"}],[e.TokenType.CloseParen,")",-1,-1,void 0],i),t));return-1===r?-1:u(o,r)}function twoCommaSeparatedNodesSolver(o,t,u){const i=resolveGlobalsAndConstants([...o.value.filter((e=>!n.isCommentNode(e)&&!n.isWhitespaceNode(e)))],t),r=[],a=[];{let o=r;for(let t=0;t<i.length;t++){const u=i[t];if(n.isTokenNode(u)&&u.value[0]===e.TokenType.Comma){if(o===a)return-1;if(o===r){o=a;continue}return-1}o.push(u)}}const l=solve(calc$1(new n.FunctionNode([e.TokenType.Function,"calc(",-1,-1,{value:"calc"}],[e.TokenType.CloseParen,")",-1,-1,void 0],r),t));if(-1===l)return-1;const s=solve(calc$1(new n.FunctionNode([e.TokenType.Function,"calc(",-1,-1,{value:"calc"}],[e.TokenType.CloseParen,")",-1,-1,void 0],a),t));return-1===s?-1:u(o,l,s)}function variadicNodesSolver(o,t,u){const i=resolveGlobalsAndConstants([...o.value.filter((e=>!n.isCommentNode(e)&&!n.isWhitespaceNode(e)))],t),r=[];{const o=[];let u=[];for(let t=0;t<i.length;t++){const r=i[t];n.isTokenNode(r)&&r.value[0]===e.TokenType.Comma?(o.push(u),u=[]):u.push(r)}o.push(u);for(let u=0;u<o.length;u++){if(0===o[u].length)return-1;const i=solve(calc$1(new n.FunctionNode([e.TokenType.Function,"calc(",-1,-1,{value:"calc"}],[e.TokenType.CloseParen,")",-1,-1,void 0],o[u]),t));if(-1===i)return-1;r.push(i)}}return u(o,r)}const b=new Set(["nearest","up","down","to-zero"]);function tokenizeGlobals(n){const o=new Map;if(!n)return o;for(const[t,u]of n)if(e.isToken(u))o.set(t,u);else if("string"!=typeof u);else{const n=e.tokenizer({css:u}),i=n.nextToken();if(n.nextToken(),!n.endOfFile())continue;if(!i)continue;if(i[0]!==e.TokenType.Number&&i[0]!==e.TokenType.Dimension&&i[0]!==e.TokenType.Percentage)continue;o.set(t,i)}return o}function patchNaN(o){if(-1===o)return-1;if(n.isFunctionNode(o))return o;const t=o.value;return t[0]!==e.TokenType.Number&&t[0]!==e.TokenType.Percentage&&t[0]!==e.TokenType.Dimension?o:Number.isNaN(t[4].value)?t[0]===e.TokenType.Number?new n.FunctionNode([e.TokenType.Function,"calc(",t[2],t[3],{value:"calc"}],[e.TokenType.CloseParen,")",t[2],t[3],void 0],[new n.TokenNode([e.TokenType.Ident,"NaN",t[2],t[3],{value:"NaN"}])]):t[0]===e.TokenType.Dimension?new n.FunctionNode([e.TokenType.Function,"calc(",t[2],t[3],{value:"calc"}],[e.TokenType.CloseParen,")",t[2],t[3],void 0],[new n.TokenNode([e.TokenType.Ident,"NaN",t[2],t[3],{value:"NaN"}]),new n.WhitespaceNode([[e.TokenType.Whitespace," ",t[2],t[3],void 0]]),new n.TokenNode([e.TokenType.Delim,"*",t[2],t[3],{value:"*"}]),new n.WhitespaceNode([[e.TokenType.Whitespace," ",t[2],t[3],void 0]]),new n.TokenNode([e.TokenType.Dimension,"1"+t[4].unit,t[2],t[3],{value:1,type:e.NumberType.Integer,unit:t[4].unit}])]):t[0]===e.TokenType.Percentage?new n.FunctionNode([e.TokenType.Function,"calc(",t[2],t[3],{value:"calc"}],[e.TokenType.CloseParen,")",t[2],t[3],void 0],[new n.TokenNode([e.TokenType.Ident,"NaN",t[2],t[3],{value:"NaN"}]),new n.WhitespaceNode([[e.TokenType.Whitespace," ",t[2],t[3],void 0]]),new n.TokenNode([e.TokenType.Delim,"*",t[2],t[3],{value:"*"}]),new n.WhitespaceNode([[e.TokenType.Whitespace," ",t[2],t[3],void 0]]),new n.TokenNode([e.TokenType.Percentage,"1%",t[2],t[3],{value:1}])]):-1:o}function patchInfinity(o){if(-1===o)return-1;if(n.isFunctionNode(o))return o;const t=o.value;if(t[0]!==e.TokenType.Number&&t[0]!==e.TokenType.Percentage&&t[0]!==e.TokenType.Dimension)return o;if(Number.isFinite(t[4].value))return o;let u="";return Number.NEGATIVE_INFINITY===t[4].value&&(u="-"),t[0]===e.TokenType.Number?new n.FunctionNode([e.TokenType.Function,"calc(",t[2],t[3],{value:"calc"}],[e.TokenType.CloseParen,")",t[2],t[3],void 0],[new n.TokenNode([e.TokenType.Ident,u+"infinity",t[2],t[3],{value:u+"infinity"}])]):t[0]===e.TokenType.Dimension?new n.FunctionNode([e.TokenType.Function,"calc(",t[2],t[3],{value:"calc"}],[e.TokenType.CloseParen,")",t[2],t[3],void 0],[new n.TokenNode([e.TokenType.Ident,u+"infinity",t[2],t[3],{value:u+"infinity"}]),new n.WhitespaceNode([[e.TokenType.Whitespace," ",t[2],t[3],void 0]]),new n.TokenNode([e.TokenType.Delim,"*",t[2],t[3],{value:"*"}]),new n.WhitespaceNode([[e.TokenType.Whitespace," ",t[2],t[3],void 0]]),new n.TokenNode([e.TokenType.Dimension,"1"+t[4].unit,t[2],t[3],{value:1,type:e.NumberType.Integer,unit:t[4].unit}])]):t[0]===e.TokenType.Percentage?new n.FunctionNode([e.TokenType.Function,"calc(",t[2],t[3],{value:"calc"}],[e.TokenType.CloseParen,")",t[2],t[3],void 0],[new n.TokenNode([e.TokenType.Ident,u+"infinity",t[2],t[3],{value:u+"infinity"}]),new n.WhitespaceNode([[e.TokenType.Whitespace," ",t[2],t[3],void 0]]),new n.TokenNode([e.TokenType.Delim,"*",t[2],t[3],{value:"*"}]),new n.WhitespaceNode([[e.TokenType.Whitespace," ",t[2],t[3],void 0]]),new n.TokenNode([e.TokenType.Percentage,"1%",t[2],t[3],{value:1}])]):-1}function patchMinusZero(o){if(-1===o)return-1;if(n.isFunctionNode(o))return o;const t=o.value;return t[0]!==e.TokenType.Number&&t[0]!==e.TokenType.Percentage&&t[0]!==e.TokenType.Dimension?o:Object.is(-0,t[4].value)?("-0"===t[1]||(t[1]="-0"),o):o}function patchPrecision(o,t=13){if(-1===o)return-1;if(n.isFunctionNode(o))return o;const u=o.value;if(u[0]!==e.TokenType.Number&&u[0]!==e.TokenType.Percentage&&u[0]!==e.TokenType.Dimension)return o;if(Number.isInteger(u[4].value))return o;const i=Number(u[4].value.toFixed(t)).toString();return u[0]===e.TokenType.Number?u[1]=i:u[0]===e.TokenType.Percentage?u[1]=i+"%":u[0]===e.TokenType.Dimension&&(u[1]=i+u[4].unit),o}function patchCanonicalUnit(o){return-1===o?-1:(n.isFunctionNode(o)||o.value[0]!==e.TokenType.Dimension||(o.value=toCanonicalUnit(o.value)),o)}function patchCalcResult(e,n){let o=e;return o=patchNaN(e),o=patchInfinity(o),null!=n&&n.toCanonicalUnits&&(o=patchCanonicalUnit(o)),o=patchPrecision(o,null==n?void 0:n.precision),o=patchMinusZero(o),o}function calcFromComponentValues(e,o){const t=tokenizeGlobals(null==o?void 0:o.globals);for(let u=0;u<e.length;u++){const i=e[u];for(let e=0;e<i.length;e++){const u=i[e];if(n.isFunctionNode(u)){const n=d.get(u.getName().toLowerCase());if(n){const r=patchCalcResult(solve(n(u,t)),o);if(-1!==r){i.splice(e,1,r);continue}}}(n.isSimpleBlockNode(u)||n.isFunctionNode(u))&&u.walk(((e,u)=>{if("number"!=typeof u)return;const i=e.node;if(n.isFunctionNode(i)){const n=d.get(i.getName().toLowerCase());if(!n)return;const r=patchCalcResult(solve(n(i,t)),o);if(-1!==r)return void e.parent.value.splice(u,1,r)}}))}}return e}exports.calc=function calc(o,t){const u=e.tokenizer({css:o}),i=[];for(;!u.endOfFile();)i.push(u.nextToken());return i.push(u.nextToken()),calcFromComponentValues(n.parseCommaSeparatedListOfComponentValues(i,{}),t).map((n=>n.map((n=>e.stringify(...n.tokens()))).join(""))).join(",")},exports.calcFromComponentValues=calcFromComponentValues;
