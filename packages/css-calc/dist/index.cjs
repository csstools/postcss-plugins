"use strict";var e=require("@csstools/css-tokenizer"),n=require("@csstools/css-parser-algorithms");function isCalculation(e){return"inputs"in e&&Array.isArray(e.inputs)&&"operation"in e}function solve(e){const t=[];for(let o=0;o<e.inputs.length;o++){const r=e.inputs[o];if(n.isTokenNode(r)){t.push(r);continue}const u=solve(r);if(-1===u)return-1;t.push(u)}return e.operation(t)}function unary(n){if(1!==n.length)return-1;const t=n[0].value;return t[0]===e.TokenType.Number||t[0]===e.TokenType.Dimension||t[0]===e.TokenType.Percentage?n[0]:-1}function multiplication(t){if(2!==t.length)return-1;const o=t[0].value,r=t[1].value;if(o[0]===e.TokenType.Number&&r[0]===e.TokenType.Number){const t=o[4].value*r[4].value;return new n.TokenNode([e.TokenType.Number,t.toString(),o[2],r[3],{value:t,type:o[4].type===e.NumberType.Integer&&r[4].type===e.NumberType.Integer?e.NumberType.Integer:e.NumberType.Number}])}if(o[0]===e.TokenType.Percentage&&r[0]===e.TokenType.Number){const t=o[4].value*r[4].value;return new n.TokenNode([e.TokenType.Percentage,t.toString()+"%",o[2],r[3],{value:t}])}if(o[0]===e.TokenType.Number&&r[0]===e.TokenType.Percentage){const t=o[4].value*r[4].value;return new n.TokenNode([e.TokenType.Percentage,t.toString()+"%",o[2],r[3],{value:t}])}if(o[0]===e.TokenType.Dimension&&r[0]===e.TokenType.Number){const t=o[4].value*r[4].value;return new n.TokenNode([e.TokenType.Dimension,t.toString()+o[4].unit,o[2],r[3],{value:t,type:o[4].type===e.NumberType.Integer&&r[4].type===e.NumberType.Integer?e.NumberType.Integer:e.NumberType.Number,unit:o[4].unit}])}if(o[0]===e.TokenType.Number&&r[0]===e.TokenType.Dimension){const t=o[4].value*r[4].value;return new n.TokenNode([e.TokenType.Dimension,t.toString()+r[4].unit,o[2],r[3],{value:t,type:o[4].type===e.NumberType.Integer&&r[4].type===e.NumberType.Integer?e.NumberType.Integer:e.NumberType.Number,unit:r[4].unit}])}return-1}function division(t){if(2!==t.length)return-1;const o=t[0].value,r=t[1].value;if(o[0]===e.TokenType.Number&&r[0]===e.TokenType.Number){const t=o[4].value/r[4].value;return NaN_Token(t,o,r)??new n.TokenNode([e.TokenType.Number,t.toString(),o[2],r[3],{value:t,type:Number.isInteger(t)?e.NumberType.Integer:e.NumberType.Number}])}if(o[0]===e.TokenType.Percentage&&r[0]===e.TokenType.Number){const t=o[4].value*r[4].value;return NaN_Token(t,o,r)??new n.TokenNode([e.TokenType.Percentage,t.toString()+"%",o[2],r[3],{value:t}])}if(o[0]===e.TokenType.Dimension&&r[0]===e.TokenType.Number){const t=o[4].value/r[4].value;return NaN_Token(t,o,r)??new n.TokenNode([e.TokenType.Dimension,t.toString()+o[4].unit,o[2],r[3],{value:t,type:o[4].type===e.NumberType.Integer&&r[4].type===e.NumberType.Integer?e.NumberType.Integer:e.NumberType.Number,unit:o[4].unit}])}return-1}function NaN_Token(t,o,r){if(Number.isNaN(t))return new n.TokenNode([e.TokenType.Ident,"NaN",o[2],r[3],{value:"NaN"}])}function addition(t){if(2!==t.length)return-1;const o=t[0].value,r=t[1].value;if(o[0]===e.TokenType.Number&&r[0]===e.TokenType.Number){const t=o[4].value+r[4].value;return new n.TokenNode([e.TokenType.Number,t.toString(),o[2],r[3],{value:t,type:o[4].type===e.NumberType.Integer&&r[4].type===e.NumberType.Integer?e.NumberType.Integer:e.NumberType.Number}])}if(o[0]===e.TokenType.Percentage&&r[0]===e.TokenType.Percentage){const t=o[4].value+r[4].value;return new n.TokenNode([e.TokenType.Percentage,t.toString()+"%",o[2],r[3],{value:t}])}if(o[0]===e.TokenType.Dimension&&r[0]===e.TokenType.Dimension&&o[4].unit===r[4].unit){const t=o[4].value+r[4].value;return new n.TokenNode([e.TokenType.Dimension,t.toString()+o[4].unit,o[2],r[3],{value:t,type:o[4].type===e.NumberType.Integer&&r[4].type===e.NumberType.Integer?e.NumberType.Integer:e.NumberType.Number,unit:o[4].unit}])}return-1}function subtraction(t){if(2!==t.length)return-1;const o=t[0].value,r=t[1].value;if(o[0]===e.TokenType.Number&&r[0]===e.TokenType.Number){const t=o[4].value-r[4].value;return new n.TokenNode([e.TokenType.Number,t.toString(),o[2],r[3],{value:t,type:o[4].type===e.NumberType.Integer&&r[4].type===e.NumberType.Integer?e.NumberType.Integer:e.NumberType.Number}])}if(o[0]===e.TokenType.Percentage&&r[0]===e.TokenType.Percentage){const t=o[4].value-r[4].value;return new n.TokenNode([e.TokenType.Percentage,t.toString()+"%",o[2],r[3],{value:t}])}if(o[0]===e.TokenType.Dimension&&r[0]===e.TokenType.Dimension&&o[4].unit===r[4].unit){const t=o[4].value-r[4].value;return new n.TokenNode([e.TokenType.Dimension,t.toString()+o[4].unit,o[2],r[3],{value:t,type:o[4].type===e.NumberType.Integer&&r[4].type===e.NumberType.Integer?e.NumberType.Integer:e.NumberType.Number,unit:o[4].unit}])}return-1}function calcHandler(t){const o=[...t.value.filter((e=>!n.isCommentNode(e)&&!n.isWhitespaceNode(e)))];if(1===o.length&&n.isTokenNode(o[0]))return{inputs:[o[0]],operation:unary};for(let t=0;t<o.length;t++){const r=o[t];if(n.isSimpleBlockNode(r)&&r.startToken[0]===e.TokenType.OpenParen){const e=calcHandler(r);if(-1===e)return-1;o.splice(t,1,e)}else if(n.isFunctionNode(r))switch(r.getName().toLowerCase()){case"calc":{const e=calcHandler(r);if(-1===e)return-1;o.splice(t,1,e);break}default:return-1}else;}if(1===o.length&&isCalculation(o[0]))return o[0];for(let t=0;t<o.length;t++){const r=o[t];if(!r||!n.isTokenNode(r)&&!isCalculation(r))return-1;const u=o[t+1];if(!u)break;if(!n.isTokenNode(u))return-1;const i=o[t+2];if(!i||!n.isTokenNode(i)&&!isCalculation(i))return-1;const T=u.value;T[0]!==e.TokenType.Delim||"*"!==T[4].value?T[0]!==e.TokenType.Delim||"/"!==T[4].value||(o.splice(t,3,{inputs:[r,i],operation:division}),t--):(o.splice(t,3,{inputs:[r,i],operation:multiplication}),t--)}if(1===o.length&&isCalculation(o[0]))return o[0];for(let t=0;t<o.length;t++){const r=o[t];if(!r||!n.isTokenNode(r)&&!isCalculation(r))return-1;const u=o[t+1];if(!u)break;if(!n.isTokenNode(u))return-1;const i=o[t+2];if(!i||!n.isTokenNode(i)&&!isCalculation(i))return-1;const T=u.value;T[0]!==e.TokenType.Delim||"+"!==T[4].value?T[0]!==e.TokenType.Delim||"-"!==T[4].value||(o.splice(t,3,{inputs:[r,i],operation:subtraction}),t--):(o.splice(t,3,{inputs:[r,i],operation:addition}),t--)}return 1===o.length&&isCalculation(o[0])?o[0]:-1}exports.convert=function convert(t,o){const r=e.tokenizer({css:t}),u=[];for(;!r.endOfFile();)u.push(r.nextToken());u.push(r.nextToken());const i=n.parseComponentValue(u,{onParseError:e=>{throw e}});if("walk"in i){if(n.isFunctionNode(i)&&"calc"===i.getName().toLowerCase()){const e=calcHandler(i);-1!==e&&console.log(solve(e))}i.walk((e=>{const t=e.node;n.isFunctionNode(t)&&t.getName().toLowerCase()}))}};
