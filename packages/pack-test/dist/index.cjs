"use strict";var e=require("node:url"),n=require("node:fs/promises"),t=require("node:path"),a=require("node:os"),i=require("node:process"),o=require("node:child_process");const r="package";async function findPackageJsonFromDir(e,a=10){const i=t.join(e,"package.json");try{return await n.access(i),i}catch{if("/"===e||a<=0)throw new Error("Could not find package.json")}return findPackageJsonFromDir(t.dirname(e),a-1)}async function pack(e,a){const r=await n.mkdir(t.join(a,"pack"),{recursive:!0}),s=o.spawn("npm",["pack","--pack-destination",r],{cwd:e,shell:"win32"===i.platform}),c=await new Promise(((e,n)=>{let t="",a="";s.stdout.on("data",(e=>{t+=e.toString()})),s.stderr.on("data",(e=>{a+=e.toString()})),s.on("close",(i=>{0===i?e(t.trim()):(console.error(a),n(new Error(`npm pack exited with code ${i}`)))}))}));return t.join(r,c)}async function unpack(e,a){const i=t.join(a,r);await n.mkdir(i,{recursive:!0});const s=o.spawn("tar",["-xf",e,"-C",r,"--strip-components","1"],{cwd:a});return await new Promise(((e,n)=>{s.on("close",(t=>{0===t?e():n(new Error(`tar exited with code ${t}`))}))})),i}async function eraseDevDependenciesInfo(e){const t=JSON.parse(await n.readFile(e,"utf8"));delete t.devDependencies,await n.writeFile(e,JSON.stringify(t,null,"\t"))}async function getPackageInfo(e){return JSON.parse(await n.readFile(e,"utf8"))}async function createRootPackage(e,a){await n.writeFile(t.join(e,"package.json"),JSON.stringify({name:"@csstools/pack-test--root",private:!0,type:"module",version:"1.0.0",description:"",workspaces:[r],dependencies:a.peerDependencies??{},scripts:{test:"node --test"}},null,"\t")),await n.writeFile(t.join(e,"index.mjs"),`import '${a.name}';`)}async function runNPMInstall(e){const n=o.spawn("npm",["install","--omit","dev"],{cwd:e,stdio:"inherit",shell:"win32"===i.platform});await new Promise(((e,t)=>{n.on("close",(n=>{0===n?e():t(new Error(`npm install exited with code ${n}`))}))}))}async function runTest(e){const n=o.spawn("node",["index.mjs"],{cwd:e,stdio:"inherit",shell:"win32"===i.platform});await new Promise(((e,t)=>{n.on("close",(n=>{0===n?e():t(new Error(`npm install exited with code ${n}`))}))}))}exports.testPack=async function testPack(i){const o=await n.mkdtemp(t.join(a.tmpdir(),"csstools-pack-test-"));let r=!1;try{const n=new URL((void 0)(i));console.log(`Testing module: ${i}`);const a=e.fileURLToPath(n),r=await findPackageJsonFromDir(t.dirname(a)),s=t.dirname(r),c=await pack(s,o),d=await unpack(c,o),p=await getPackageInfo(t.join(d,"package.json"));await eraseDevDependenciesInfo(t.join(d,"package.json")),await createRootPackage(o,p),await runNPMInstall(o),await runTest(o)}catch(e){console.error(e),r=!0}finally{await n.rm(o,{recursive:!0})}r&&process.exit(1)};
