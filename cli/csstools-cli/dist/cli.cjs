#!/usr/bin/env node

"use strict";var s,e=require("css-blank-pseudo"),o=require("postcss"),t=require("node:path"),i=require("node:fs/promises"),c=require("css-has-pseudo"),n=require("css-prefers-color-scheme"),r=require("postcss-attribute-case-insensitive"),a=require("@csstools/postcss-cascade-layers"),l=require("@csstools/postcss-color-function"),p=require("postcss-color-functional-notation"),u=require("postcss-color-hex-alpha"),d=require("@csstools/postcss-color-mix-function"),g=require("postcss-color-rebeccapurple"),f=require("@csstools/postcss-content-alt-text"),S=require("postcss-custom-media"),v=require("postcss-custom-properties"),h=require("postcss-custom-selectors"),w=require("postcss-dir-pseudo-class"),m=require("postcss-double-position-gradients"),C=require("@csstools/postcss-exponential-functions"),y=require("postcss-focus-visible"),P=require("postcss-focus-within"),b=require("@csstools/postcss-font-format-keywords"),x=require("postcss-gap-properties"),L=require("@csstools/postcss-gradients-interpolation-method"),T=require("@csstools/postcss-hwb-function"),F=require("@csstools/postcss-ic-unit"),q=require("postcss-image-set-function"),k=require("@csstools/postcss-is-pseudo-class"),M=require("postcss-lab-function"),I=require("@csstools/postcss-light-dark-function"),D=require("postcss-logical"),A=require("@csstools/postcss-logical-float-and-clear"),N=require("@csstools/postcss-logical-resize"),O=require("@csstools/postcss-logical-viewport-units"),V=require("@csstools/postcss-media-minmax"),E=require("@csstools/postcss-media-queries-aspect-ratio-number-values"),z=require("@csstools/postcss-nested-calc"),R=require("postcss-nesting"),$=require("@csstools/postcss-normalize-display-values"),U=require("@csstools/postcss-oklab-function"),W=require("postcss-overflow-shorthand"),G=require("postcss-place"),j=require("postcss-preset-env"),H=require("postcss-pseudo-class-any-link"),B=require("@csstools/postcss-relative-color-syntax"),K=require("@csstools/postcss-scope-pseudo-class"),Q=require("postcss-selector-not"),J=require("@csstools/postcss-stepped-value-functions"),Y=require("@csstools/postcss-text-decoration-shorthand"),_=require("@csstools/postcss-trigonometric-functions"),X=require("@csstools/postcss-unset-value");function parseArguments(e,o,t){const i=e.map((s=>s.trim())).filter((s=>!!s)),c={stdin:!1,stdout:!1,output:void 0,outputDir:void 0,inputs:[],inlineMap:!0,externalMap:!1,replace:!1,pluginOptions:{},debug:!1};let n,r=!1;for(let e=0;e<i.length;e++){const o=i[e];switch(o){case"-o":case"--output":c.output=i[e+1],e++,r=!0;break;case"-m":case"--map":c.externalMap=!0,c.inlineMap=!1,r=!0;break;case"--no-map":c.externalMap=!1,c.inlineMap=!1,r=!0;break;case"-r":case"--replace":c.replace=!0,r=!0;break;case"--debug":c.debug=!0,r=!0;break;case"-d":case"--dir":c.outputDir=i[e+1],e++,r=!0;break;case"-p":case"--plugin-options":n=i[e+1],e++,r=!0;break;default:if(0===o.indexOf("-"))return console.warn(`[error] unknown argument : ${o}\n`),t(),s.InvalidArguments;if(!r){c.inputs.push(o);break}return t(),s.InvalidArguments}}if(c.replace&&(c.output=void 0,c.outputDir=void 0),c.outputDir&&(c.output=void 0),c.inputs.length>1&&c.output)return console.warn('[error] omit "--output" when processing multiple inputs\n'),t(),s.InvalidArguments;0===c.inputs.length&&(c.stdin=!0),c.output||c.outputDir||c.replace||(c.stdout=!0),c.stdout&&(c.externalMap=!1);let a={};if(n)try{a=JSON.parse(n)}catch{return console.warn("[error] plugin options must be valid JSON\n"),t(),s.InvalidArguments}for(const e in a){const i=a[e];if(!o.includes(e))return console.warn(`[error] unknown plugin option: ${e}\n`),t(),s.InvalidArguments;c.pluginOptions[e]=i}return c}async function getStdin(){return new Promise((s=>{let e="",o=!1;if(setTimeout((()=>{o=!0,s("")}),1e4),process.stdin.isTTY){if(o)return;s(e)}else process.stdin.setEncoding("utf8"),process.stdin.on("readable",(()=>{let s="";for(;s=process.stdin.read();)e+=s??""})),process.stdin.on("end",(()=>{o||s(e)}))}))}async function stdinToStdout(s,e,t){let i="";try{const c=await getStdin();c||(t(),process.exit(1));const n=await o([s]).process(c,{from:"stdin",to:"stdout",map:!!e.inlineMap&&{inline:!0}});n.warnings().forEach((s=>{console.warn(s.toString())})),i=n.css}catch(s){s instanceof Error?console.error(e.debug?s:s.message):console.error(s),process.exit(1)}process.stdout.write(i+(e.inlineMap?"\n":"")),process.exit(0)}async function stdinToFs(s,e,c){let n=e.output;!n&&e.outputDir&&(n=t.join(e.outputDir,"output.css")),n||process.exit(0);try{const t=await getStdin();t||(c(),process.exit(1));const r=await o([s]).process(t,{from:"stdin",to:n,map:!(!e.inlineMap&&!e.externalMap)&&{inline:e.inlineMap}});r.warnings().forEach((s=>{console.warn(s.toString())})),e.externalMap&&r.map?await Promise.all([await i.writeFile(n,r.css+(e.inlineMap?"\n":"")),await i.writeFile(`${n}.map`,r.map.toString())]):await i.writeFile(n,r.css+(e.inlineMap?"\n":""))}catch(s){s instanceof Error?console.error(e.debug?s:s.message):console.error(s),process.exit(1)}console.log(`CSS was written to "${t.normalize(n)}"`),process.exit(0)}async function fsToStdout(s,e){let t=[];try{t=await Promise.all(e.inputs.map((async e=>{const t=await i.readFile(e),c=await o([s]).process(t,{from:e,to:"stdout",map:!1});return c.warnings().forEach((s=>{console.warn(s.toString())})),c.css})))}catch(s){s instanceof Error?console.error(e.debug?s:s.message):console.error(s),process.exit(1)}for(const s of t)process.stdout.write(s);process.exit(0)}async function fsToFs(s,e){try{await Promise.all(e.inputs.map((async c=>{let n=e.output;e.outputDir&&(n=t.join(e.outputDir,t.basename(c))),e.replace&&(n=c),n||process.exit(0);const r=await i.readFile(c),a=await o([s]).process(r,{from:c,to:n,map:!(!e.inlineMap&&!e.externalMap)&&{inline:e.inlineMap}});a.warnings().forEach((s=>{console.warn(s.toString())})),e.externalMap&&a.map?await Promise.all([await i.writeFile(n,a.css+(e.inlineMap?"\n":"")),await i.writeFile(`${n}.map`,a.map.toString())]):await i.writeFile(n,a.css+(e.inlineMap?"\n":"")),console.log(`CSS was written to "${t.normalize(n)}"`)})))}catch(s){s instanceof Error?console.error(e.debug?s:s.message):console.error(s),process.exit(1)}process.exit(0)}function helpTextLogger(s,e,o,t=null){let i=[];if(t){const s=Math.max(...Object.keys(t).map((s=>s.length))),e=new Array(s).fill(" ").join("");e.length&&(i=["\nPlugin Options:",...Object.keys(t).map((s=>`  ${(s+e).slice(0,e.length)}  ${typeof t[s]}`))],i.push(`\n  ${JSON.stringify(t,null,2).split("\n").join("\n  ")}`))}const c=[`${e}\n`,`  ${o}\n`,"Usage:",`  ${s} [input.css] [OPTIONS] [-o|--output output.css]`,`  ${s} <input.css>... [OPTIONS] --dir <output-directory>`,`  ${s} <input.css>... [OPTIONS] --replace`,"\nOptions:","  -o, --output          Output file","  -d, --dir             Output directory","  -r, --replace         Replace (overwrite) the input file","  -m, --map             Create an external sourcemap","  --no-map              Disable the default inline sourcemaps","  -p, --plugin-options  Stringified JSON object with plugin options"];return i.length>0&&c.push(...i),()=>{console.warn(c.join("\n"))}}async function cli(e,o,t,i=!0){const c=parseArguments(process.argv.slice(i?2:3),o,t);c===s.InvalidArguments&&process.exit(1);const n=e(c.pluginOptions);c.stdin&&c.stdout?await stdinToStdout(n,c,t):c.stdin?await stdinToFs(n,c,t):c.stdout?await fsToStdout(n,c):await fsToFs(n,c)}async function cssBlankPseudo(){await cli(e,["preserve","replaceWith"],helpTextLogger("@csstools/cli css-blank-pseudo","PostCSS Blank Pseudo","Lets you style form elements when they are empty, following the Selectors Level 4 specification.",{preserve:!0,replaceWith:".css-blank"}),!1)}async function cssHasPseudo(){await cli(c,["preserve"],helpTextLogger("@csstools/cli css-has-pseudo","PostCSS Has Pseudo","Transforms CSS with :has {}",{preserve:!0}),!1)}async function cssPrefersColorScheme(){await cli(n,["preserve","mediaQuery"],helpTextLogger("@csstools/cli css-prefers-color-scheme","Prefers Color Scheme","Lets you use light and dark color schemes in all browsers, following the Media Queries specification.",{preserve:!0,mediaQuery:"color|color-index"}),!1)}async function postcssAttributeCaseInsensitive(){await cli(r,[],helpTextLogger("@csstools/cli postcss-attribute-case-insensitive","PostCSS Attribute Case Insensitive","Enables support for Case Insensitive Attribute matching in selectors"),!1)}async function postcssCascadeLayers(){await cli(a,[],helpTextLogger("@csstools/cli postcss-cascade-layers","PostCSS Cascade Layers","Lets you use `@layer` following the Cascade Layers Specification."),!1)}async function postcssColorFunction(){await cli(l,["preserve","enableProgressiveCustomProperties"],helpTextLogger("@csstools/cli postcss-color-function","PostCSS Color Function","Lets you use the color() function in CSS.",{preserve:!0,enableProgressiveCustomProperties:!1}),!1)}async function postcssColorFunctionalNotation(){await cli(p,["preserve"],helpTextLogger("@csstools/cli postcss-color-functional-notation","PostCSS Color Functional Notation","Lets you use space and slash separated color notation in CSS, following the CSS Color specification.",{preserve:!0}),!1)}async function postcssColorHexAlpha(){await cli(u,["preserve"],helpTextLogger("@csstools/cli postcss-color-hex-alpha","PostCSS Color Hex Alpha","Lets you use 4 & 8 character hex color notation in CSS, following the CSS Color Module specification.",{preserve:!0}),!1)}async function postcssColorMixFunction(){await cli(d,["preserve","enableProgressiveCustomProperties"],helpTextLogger("@csstools/cli postcss-color-mix-function","PostCSS Color Mix Function","Lets you use the color-mix() function in CSS.",{preserve:!0,enableProgressiveCustomProperties:!1,subFeatures:{displayP3:!1}}),!1)}async function postcssColorRebeccaPurple(){await cli(g,["preserve"],helpTextLogger("@csstools/cli postcss-color-rebeccapurple","PostCSS RebeccaPurple","Lets you use the rebeccapurple color keyword in CSS.",{preserve:!0}),!1)}async function postcssContentAltText(){await cli(f,["preserve","stripAltText","enableProgressiveCustomProperties"],helpTextLogger("@csstools/cli postcss-content-alt-text","PostCSS Content Alt Text","Generate fallback values for content with alt text.",{preserve:!0,stripAltText:!1,enableProgressiveCustomProperties:!0}),!1)}async function postcssCustomMedia(){await cli(S,["preserve"],helpTextLogger("@csstools/cli postcss-custom-media","PostCSS Custom Media","Lets you define @custom-media in CSS following the Custom Media Specification",{preserve:!0}),!1)}async function postcssCustomProperties(){await cli(v,["preserve"],helpTextLogger("@csstools/cli postcss-custom-properties","PostCSS Custom Properties","Lets you use Custom Properties in CSS, following the CSS Custom Properties specification.",{preserve:!0}),!1)}async function postcssCustomSelectors(){await cli(h,["preserve"],helpTextLogger("@csstools/cli postcss-custom-selectors","PostCSS Custom Selectors","Lets you define @custom-selector in CSS following the Custom Selectors Specification",{preserve:!0}),!1)}async function postcssDirPseudoClass(){await cli(w,["dir","preserve","shadow"],helpTextLogger("@csstools/cli postcss-dir-pseudo-class","PostCSS Dir Pseudo Class","Lets you style by directionality using the `:dir()` pseudo-class in CSS",{dir:"ltr",preserve:!0,shadow:!0}),!1)}async function postcssDoublePositionGradients(){await cli(m,["preserve","enableProgressiveCustomProperties"],helpTextLogger("@csstools/cli postcss-double-position-gradients","PostCSS Double Position Gradients","Lets you use double-position gradients in CSS, following the CSS Image Values and Replaced Content specification",{preserve:!0,enableProgressiveCustomProperties:!1}),!1)}async function postcssExponentialFunctions(){await cli(C,["preserve"],helpTextLogger("@csstools/cli postcss-exponential-functions","PostCSS Exponential Functions","Lets you use the `pow()`, `sqrt()`, `hypot()`, `log()`, `exp()` functions following the CSS Values 4 Specification.",{preserve:!0}),!1)}async function postcssFocusVisible(){await cli(y,["preserve","replaceWith"],helpTextLogger("@csstools/cli postcss-focus-visible","PostCSS Focus Visible","Lets you use the `:focus-visible` pseudo-class in CSS, following the Selectors Level 4 specification.",{preserve:!0,replaceWith:".focus-visible"}),!1)}async function postcssFocusWithin(){await cli(P,["preserve","replaceWith"],helpTextLogger("@csstools/cli postcss-focus-within","PostCSS Focus Within","Lets you use the `:focus-within` pseudo-class in CSS, following the Selectors Level 4 specification.",{preserve:!0,replaceWith:".focus-within"}),!1)}async function postcssFontFormatKeywords(){await cli(b,["preserve"],helpTextLogger("@csstools/cli postcss-font-format-keywords","PostCSS Font Format Keyword","Lets you use unquoted format on @font-face CSS definitions.",{preserve:!0}),!1)}async function postcssGapProperties(){await cli(x,["preserve"],helpTextLogger("@csstools/cli postcss-gap-properties","PostCSS Gap Properties","Lets you use the gap, column-gap, and row-gap shorthand properties in CSS, following the CSS Grid Layout specification.",{preserve:!0}),!1)}async function postcssGradientsInterpolationMethod(){await cli(L,["preserve","enableProgressiveCustomProperties"],helpTextLogger("@csstools/cli postcss-gradients-interpolation-method","PostCSS Gradients Interpolation Method","Lets you use different interpolation methods in CSS gradient functions.",{preserve:!0,enableProgressiveCustomProperties:!1}),!1)}async function postcssHWBFunction(){await cli(T,["preserve"],helpTextLogger("@csstools/cli postcss-hwb-function","PostCSS HWB function","Convert hwb() to rgb()",{preserve:!0}),!1)}async function postcssICUnit(){await cli(F,["preserve","enableProgressiveCustomProperties"],helpTextLogger("@csstools/cli postcss-ic-unit","PostCSS IC Unit","Lets you use the ic length unit.",{preserve:!0,enableProgressiveCustomProperties:!1}),!1)}async function postcssImageSetFunction(){await cli(q,["oninvalid","preserve"],helpTextLogger("@csstools/cli postcss-image-set-function","PostCSS Image Set Function","Lets you display resolution-dependent images using the image-set() function in CSS, following the CSS Images specification.",{preserve:!0,oninvalid:"ignore|warn|throw"}),!1)}async function postcssIsPseudoClass(){await cli(k,["onComplexSelector","preserve","specificityMatchingName"],helpTextLogger("@csstools/cli postcss-is-pseudo-class","PostCSS Is Pseudo Class","Lets you use the :is pseudo class function, following the CSS Selector specification.",{onComplexSelector:"warning",preserve:!0,specificityMatchingName:"does-not-exist"}),!1)}async function postcssLabFunction(){await cli(M,["preserve","enableProgressiveCustomProperties","subFeatures"],helpTextLogger("@csstools/cli postcss-lab-function","PostCSS Lab function","Convert lab() to rgb()",{preserve:!0,enableProgressiveCustomProperties:!1,subFeatures:{displayP3:!1}}),!1)}async function postcssLightDarkFunction(){await cli(I,["preserve"],helpTextLogger("@csstools/cli postcss-light-dark-function","PostCSS Light Dark function","Use the light-dark() color function in CSS",{preserve:!0}),!1)}async function postcssLogical$1(){await cli(D,["inlineDirection","blockDirection"],helpTextLogger("@csstools/cli postcss-logical","PostCSS Logical","Lets you use logical, rather than physical, direction and dimension mappings in CSS, following the CSS Logical Properties and Values specification.",{inlineDirection:"left-to-right",blockDirection:"top-to-bottom"}),!1)}async function postcssLogical(){await cli(A,["inlineDirection","blockDirection"],helpTextLogger("@csstools/cli postcss-logical-float-and-clear","PostCSS Logical Float And Clear","Lets you use flow-relative (inline-start and inline-end) values for float and clear, following the CSS Logical Properties and Values specification.",{inlineDirection:"left-to-right"}),!1)}async function postcssLogicalResize(){await cli(N,["inlineDirection"],helpTextLogger("@csstools/cli postcss-logical-resize","PostCSS Logical Resize","Lets you use logical values in the resize property, following the CSS Logical Properties and Values specification.",{inlineDirection:"left-to-right"}),!1)}async function postcssLogicalViewportUnits(){await cli(O,["inlineDirection","preserve"],helpTextLogger("@csstools/cli postcss-viewport-units","PostCSS Logical Viewport Units","Lets you use vb and vi length units in CSS, following the CSS Values and Units Module Level 4 specification.",{inlineDirection:"left-to-right",preserve:!0}),!1)}async function postcssMediaMinMax(){await cli(V,[],helpTextLogger("@csstools/cli postcss-media-minmax","PostCSS Media MinMax","Lets you use the range notation in CSS media queries.",{}),!1)}async function postcssMediaQueriesAspectRatioNumberValues(){await cli(E,[],helpTextLogger("@csstools/cli postcss-media-queries-aspect-ratio-number-values","PostCSS Media Queries Aspect-Ratio Number Values","Lets you use number values in aspect-ratio media queries.",{}),!1)}async function postcssNestedCalc(){await cli(z,["preserve"],helpTextLogger("@csstools/cli postcss-nested-calc","PostCSS Nested Calc","Lets you use nested calc() expressions in CSS.",{preserve:!0}),!1)}async function postcssNesting(){await cli(R,["noIsPseudoSelector"],helpTextLogger("@csstools/cli postcss-nesting","PostCSS Nesting","Lets you nest style rules inside each other, following the CSS Nesting specification.",{noIsPseudoSelector:!0}),!1)}async function postcssNormalizeDisplayValues(){await cli($,["preserve"],helpTextLogger("@csstools/cli postcss-normalize-display-values","PostCSS Normalize Display Values","Lets you use two values display syntax for inner and outer display types.",{preserve:!0}),!1)}async function postcssOKLabFunction(){await cli(U,["preserve","enableProgressiveCustomProperties","subFeatures"],helpTextLogger("@csstools/cli postcss-oklab-function","PostCSS OKLab Function","Lets you use oklab() and oklch() color functions in CSS.",{preserve:!0,enableProgressiveCustomProperties:!1,subFeatures:{displayP3:!1}}),!1)}async function postcssOverflowShorthand(){await cli(W,["preserve"],helpTextLogger("@csstools/cli postcss-overflow-shorthand","PostCSS Overflow Shorthand","Lets you use the `overflow` shorthand in CSS, following the CSS Overflow specification.",{preserve:!0}),!1)}async function postcssPlace(){await cli(G,["preserve"],helpTextLogger("@csstools/cli postcss-place","PostCSS Place","Lets you use place-* properties as shorthands for align-* and justify-*, following the CSS Box Alignment specification.",{preserve:!0}),!1)}async function postcssPresetEnv(){await cli(j,["stage","minimumVendorImplementations","features","env","browsers","autoprefixer","preserve","logical","enableClientSidePolyfills","debug"],helpTextLogger("@csstools/cli postcss-preset-env","PostCSS Preset Env","Lets you convert modern CSS into something most browsers can understand, determining the polyfills you need based on your targeted browsers or runtime environments.",{stage:0,minimumVendorImplementations:2,features:{"blank-pseudo-class":{preserve:!1},"color-functional-notation":{preserve:!0}},env:"production",browsers:"last 2 versions",autoprefixer:{grid:!0},preserve:!1,logical:{inlineDirection:"left-to-right",blockDirection:"top-to-bottom"},enableClientSidePolyfills:!1,debug:!1}),!1)}async function postcssPseudoClassAnyLink(){await cli(H,["preserve"],helpTextLogger("@csstools/cli postcss-pseudo-class-any-link","PostCSS Pseudo Class Any Link","Lets you :any-link pseudo-class in CSS, following the Selectors specification.",{preserve:!0}),!1)}async function postcssRelativeColorSyntax(){await cli(B,["preserve","enableProgressiveCustomProperties","subFeatures"],helpTextLogger("@csstools/cli postcss-relative-color-syntax","PostCSS Relative Color Syntax","Lets you use the relative color syntax in CSS color functions.",{preserve:!0,enableProgressiveCustomProperties:!1,subFeatures:{displayP3:!1}}),!1)}async function postcssScopePseudoClass(){await cli(K,["preserve"],helpTextLogger("@csstools/cli postcss-scope-pseudo-class","PostCSS Scope Pseudo Class","Lets you use the Reference Element Pseudo-class: :scope.",{preserve:!0}),!1)}async function postcssSelectorNot(){await cli(Q,[],helpTextLogger("@csstools/cli postcss-selector-not","PostCSS Selector Not","Transforms :not() W3C CSS level 4 pseudo classes to :not() CSS level 3 selectors following the Selectors 4 Specification"),!1)}async function postcssSteppedValueFunctions(){await cli(J,["preserve","onInvalid"],helpTextLogger("@csstools/cli postcss-stepped-value-functions","PostCSS Stepped Value Functions","Lets you use round(), mod() and rem() functions.",{preserve:!1,onInvalid:"warn"}),!1)}async function postcssTextDecorationShorthand(){await cli(Y,["preserve"],helpTextLogger("@csstools/cli postcss-text-decoration-shorthand","PostCSS Text Decoration Shorthand","Lets you use text-decoration in it's shorthand form in CSS.",{preserve:!0}),!1)}async function postcssTrigonometricFunctions(){await cli(_,["preserve"],helpTextLogger("@csstools/cli postcss-trigonometric-functions","PostCSS Trigonometric Functions","Lets you use `sin`, `cos`, `tan`, `asin`, `acos`, `atan` and `atan2` to be able to compute trigonometric relationships following the CSS Values 4 specification.",{preserve:!0}),!1)}async function postcssUnsetValue(){await cli(X,["preserve"],helpTextLogger("@csstools/cli postcss-unset-value","PostCSS Stepped Unset Value","Use the unset keyword in CSS.",{preserve:!1}),!1)}(s||(s={})).InvalidArguments="INVALID_ARGUMENTS",async function main(){switch(process.argv[2]??!1){case"css-blank-pseudo":return void await cssBlankPseudo();case"css-has-pseudo":return void await cssHasPseudo();case"css-prefers-color-scheme":return void await cssPrefersColorScheme();case"postcss-attribute-case-insensitive":return void await postcssAttributeCaseInsensitive();case"postcss-cascade-layers":return void await postcssCascadeLayers();case"postcss-color-function":return void await postcssColorFunction();case"postcss-color-mix-function":return void await postcssColorMixFunction();case"postcss-color-functional-notation":return void await postcssColorFunctionalNotation();case"postcss-color-hex-alpha":return void await postcssColorHexAlpha();case"postcss-color-rebeccapurple":return void await postcssColorRebeccaPurple();case"postcss-content-alt-text":return void await postcssContentAltText();case"postcss-custom-media":return void await postcssCustomMedia();case"postcss-custom-properties":return void await postcssCustomProperties();case"postcss-custom-selectors":return void await postcssCustomSelectors();case"postcss-dir-pseudo-class":return void await postcssDirPseudoClass();case"postcss-double-position-gradients":return void await postcssDoublePositionGradients();case"postcss-exponential-functions":return void await postcssExponentialFunctions();case"postcss-focus-visible":return void await postcssFocusVisible();case"postcss-focus-within":return void await postcssFocusWithin();case"postcss-font-format-keywords":return void await postcssFontFormatKeywords();case"postcss-gap-properties":return void await postcssGapProperties();case"postcss-gradients-interpolation-method":return void await postcssGradientsInterpolationMethod();case"postcss-hwb-function":return void await postcssHWBFunction();case"postcss-ic-unit":return void await postcssICUnit();case"postcss-image-set-function":return void await postcssImageSetFunction();case"postcss-is-pseudo-class":return void await postcssIsPseudoClass();case"postcss-lab-function":return void await postcssLabFunction();case"postcss-light-dark-function":return void await postcssLightDarkFunction();case"postcss-logical":return void await postcssLogical$1();case"postcss-logical-float-and-clear":return void await postcssLogical();case"postcss-logical-resize":return void await postcssLogicalResize();case"postcss-logical-viewport-units":return void await postcssLogicalViewportUnits();case"postcss-media-minmax":return void await postcssMediaMinMax();case"postcss-media-queries-aspect-ratio-number-values":return void await postcssMediaQueriesAspectRatioNumberValues();case"postcss-nested-calc":return void await postcssNestedCalc();case"postcss-nesting":return void await postcssNesting();case"postcss-normalize-display-values":return void await postcssNormalizeDisplayValues();case"postcss-oklab-function":return void await postcssOKLabFunction();case"postcss-overflow-shorthand":return void await postcssOverflowShorthand();case"postcss-place":return void await postcssPlace();case"postcss-preset-env":return void await postcssPresetEnv();case"postcss-pseudo-class-any-link":return void await postcssPseudoClassAnyLink();case"postcss-scope-pseudo-class":return void await postcssScopePseudoClass();case"postcss-relative-color-syntax":return void await postcssRelativeColorSyntax();case"postcss-selector-not":return void await postcssSelectorNot();case"postcss-stepped-value-functions":return void await postcssSteppedValueFunctions();case"postcss-text-decoration-shorthand":return void await postcssTextDecorationShorthand();case"postcss-trigonometric-functions":return void await postcssTrigonometricFunctions();case"postcss-unset-value":return void await postcssUnsetValue();default:{const s=["CSSTools CLI\n","  Transform CSS with any plugin from https://github.com/csstools/postcss-plugins\n","Usage:","  @csstools/csstools-cli postcss-preset-env [input.css] [OPTIONS] [-o|--output output.css]","  @csstools/csstools-cli postcss-preset-env <input.css>... [OPTIONS] --dir <output-directory>","  @csstools/csstools-cli postcss-preset-env <input.css>... [OPTIONS] --replace","\nAvailable Plugins:","  postcss-preset-env","  css-blank-pseudo","  css-has-pseudo","  css-prefers-color-scheme","  postcss-attribute-case-insensitive","  postcss-cascade-layers","  postcss-color-function","  postcss-color-functional-notation","  postcss-color-hex-alpha","  postcss-color-mix-function","  postcss-color-rebeccapurple","  postcss-content-alt-text","  postcss-custom-media","  postcss-custom-properties","  postcss-custom-selectors","  postcss-dir-pseudo-class","  postcss-double-position-gradients","  postcss-exponential-functions","  postcss-focus-visible","  postcss-focus-within","  postcss-font-format-keywords","  postcss-gap-properties","  postcss-gradients-interpolation-method","  postcss-hwb-function","  postcss-ic-unit","  postcss-image-set-function","  postcss-is-pseudo-class","  postcss-lab-function","  postcss-light-dark-function","  postcss-logical","  postcss-logical-float-and-clear","  postcss-logical-resize","  postcss-logical-viewport-units","  postcss-media-minmax","  postcss-media-queries-aspect-ratio-number-values","  postcss-nested-calc","  postcss-nesting","  postcss-normalize-display-values","  postcss-oklab-function","  postcss-overflow-shorthand","  postcss-place","  postcss-pseudo-class-any-link","  postcss-relative-color-syntax","  postcss-scope-pseudo-class","  postcss-selector-not","  postcss-stepped-value-functions","  postcss-text-decoration-shorthand","  postcss-trigonometric-functions","  postcss-unset-value","\nPlugin Help:","  @csstools/csstools-cli <plugin-name>","  @csstools/csstools-cli postcss-preset-env"];console.warn(s.join("\n"))}}}();
