:root {
	--order: 1;
}

.test-custom-property-fallbacks {
	--firebrick: rgb(179, 35, 35);
}

.test-custom-properties {
	order: var(--order);
}

.test-image-set-function {
	background-image: image-set(url(img/test.png) 1x, url(img/test-2x.png) 2x);
	order: 2;
}

.test-logical-properties-and-values {
	margin-inline-start: 1px;
	margin-inline-end: 2px;
	order: 3;
	padding-block: 4px;
}

.test-logical-resize {
	resize: horizontal;
}

.test-logical-viewport-units {
	width: calc(10vi + 5px);
}

.test-nesting-rules {
	order: 4;

	order: 6;
}

.test-nesting-rules p {
		order: 5;
	}

.test-nesting-rules,
#test-is-pseudo {
	order: 7;

	order: 9;
}

:is(.test-nesting-rules,#test-is-pseudo) + p {
		order: 8;
	}

@media (max-width: 30em) {
	.test-custom-media-queries {
		order: 10;
	}
}

@media (480px <= width < 768px) {
	.test-media-query-ranges {
		order: 11;
	}
}

@media (prefers-color-scheme: dark) {
	body {
		background-color: black;
		color: white;
	}
}

.test-custom-selectors:is(h1, h2, h3, h4, h5, h6, .heading-7) {
	order:12;
}

.test-case-insensitive-attributes[frame=hsides i] {
	order: 13;
}

.test-rebeccapurple-color {
	color: rebeccapurple;
	order: 14;
}

.test-hexadecimal-alpha-notation {
	background-color: #f3f3f3f3;
	color: #0003;
	order: 15;
}

.test-color-functional-notation {
	color: rgb(70% 13.5% 13.5% / 50%);
	order: 16;
}

.test-lab-function {
	background-color: rgb(179, 35, 35);
	color: rgba(179, 34, 35, 0.5);
	order: 17;
}

.test-system-ui-font-family {
	font-family: system-ui;
	order: 18;
}

.test-font-variant-property {
	font-feature-settings: "smcp";
	font-variant-caps: small-caps;
	order: 19;
}

.test-all-property {
	all: initial;
	order: 20;
}

.test-matches-pseudo-class:matches(:first-child, .special) {
	order: 21;
}

.test-not-pseudo-class:not(:first-child, .special) {
	order: 22;
}

.test-any-link-pseudo-class:any-link {
	order: 23;
}

[dir="rtl"] .test-dir-pseudo-class {
	order: 24;
}

.test-overflow-wrap-property {
	order: 25;
	overflow-wrap: break-word;
}

.test-focus-visible-pseudo-class:focus-visible {
	order: 26;
}

.test-double-position-gradients {
	background-image: conic-gradient(yellowgreen 40%, gold 0deg 75%, #f06 0deg);
}

.test-blank-pseudo-class:blank {
	background-color: yellow;
}

.test-has-pseudo-class:has(.inner-class) {
	background-color: yellow;
}

:is(.a, .b):is(:focus, :hover) {
	order: 27;
}

:is(.a > .b) + :is(.c > .d) {
	order: 28;
}

.test-hwb-function {
	background-color: hwb(194 0% 0% / .5);
}

.test-opacity-percent {
	opacity: 42%;
}

.clamp-same-unit {
	width: clamp(10px, 64px, 80px);
}

.complex-clamp {
	width: clamp(calc(100% - 10px), min(10px, 100%), max(40px, 4em));
}

.clamp-different-units {
	width: clamp(10%, 2px, 4rem);
}

.mixed-clamp {
	grid-template-columns: clamp(22rem, 40%, 32rem) minmax(0, 1fr);
	margin: clamp(1rem, 2%, 3rem) 4vh;
}

.calc-clamp {
	margin: 0 40px 0 calc(-1 * clamp(32px, 16vw, 64px));
}

.multiple-calc-clamp {
	margin: calc(-1 * clamp(1px, 2vw, 3px)) calc(-1 * clamp(4px, 5vw, 6px));
}

.nested-clamp {
	font-size: clamp(clamp(1rem, 2vw, 3rem), 4vw, 5rem);
}

@font-face {
	font-family: 'A';
	font-style: normal;
	font-weight: 300;
	font-display: swap;
	src: url(a) format(woff2);
}

.block-flow {
	display: block;
	display: block flow;
}

.block-flow-root {
	display: flow-root;
	display: block flow-root;
}

.inline-flow {
	display: inline;
	display: inline flow;
}

.inline-flow-root {
	display: inline-block;
	display: inline flow-root;
}

.run-in-flow {
	display: run-in;
	display: run-in flow;
}

.list-item-block-flow {
	display: list-item;
	display: list-item block flow;
}

.inline-flow-list-item {
	display: inline list-item;
	display: inline flow list-item;
}

.block-flex {
	display: flex;
	display: block flex;
}

.inline-flex {
	display: inline-flex;
	display: inline flex;
}

.block-grid {
	display: grid;
	display: block grid;
}

.inline-grid {
	display: inline-grid;
	display: inline grid;
}

.inline-ruby {
	display: ruby;
	display: inline ruby;
}

.block-table {
	display: table;
	display: block table;
}

.inline-table {
	display: inline-table;
	display: inline table;
}

.table-cell-flow {
	display: table-cell;
	display: table-cell flow;
}

.table-caption-flow {
	display: table-caption;
	display: table-caption flow;
}

.ruby-base-flow {
	display: ruby-base;
	display: ruby-base flow;
}

.ruby-text-flow {
	display: ruby-text;
	display: ruby-text flow;
}

.logical-float {
	float: right;
}

.color-function {
	prop-1: rgb(0, 129, 96);
	prop-2: 'color(display-p3 0.02472 0.01150 0.00574 / 1)';
	prop-3: color(display-p3 0.02472 0.01150 0.00574 / 1);
	prop-4: color(display-p3 0.02472 0.01150 0.00574 / calc(33 / 22));
	prop-5: color(display-p3 1 1 1 1);
}

@media (color-gamut: p3) {
.color-function {
	prop-1: color(display-p3 0.00000 0.51872 0.36985);
}
}

.oklab {
	color-1: rgb(73, 71, 69);
	color-2: rgb(121, 34, 67);
	color-3: rgba(121, 34, 67, 0.5);
	color-4: rgb(121, 34, 67);
	color-5: rgba(121, 34, 67, 0.5);
	color-6: rgb(177, 102, 126);
	color-7: oklab(60% 0.1 0 foo);
	color-8: rgb(125, 35, 41);
	color-9: rgb(198, 93, 7);
	color-10: rgb(157, 147, 24);
	color-11: rgb(104, 166, 57);
	color-12: rgb(98, 172, 239);
}

.oklch {
	color-1: rgb(126, 37, 15);
	color-2: rgb(126, 37, 15);
	color-3: rgba(126, 37, 15, 0.5);
	color-4: rgb(126, 37, 15);
	color-5: rgba(126, 37, 15, 0.5);
	color-6: rgb(197, 84, 124);

	color-7: rgb(0, 149, 131);
	color-8: rgb(0, 149, 131);
	color-9: rgb(0, 149, 131);
	color-10: rgb(0, 149, 131);
	color-11: rgb(0, 149, 131);

	color-12: rgb(188, 101, 59);
	color-13: rgb(188, 101, 59);
	color-14: rgb(188, 101, 59);
	color-15: rgb(188, 101, 59);
	color-16: rgb(188, 101, 59);
	color-17: oklch(60% 0.1250 0.785398unknown);
}

@media (color-gamut: p3) {
.oklch {

	color-7: color(display-p3 0.19244 0.58461 0.51559);
	color-8: color(display-p3 0.19244 0.58461 0.51559);
	color-9: color(display-p3 0.19244 0.58461 0.51559);
	color-10: color(display-p3 0.19244 0.58461 0.51559);
	color-11: color(display-p3 0.19244 0.58461 0.51559);
}
}

.ic-unit {
	--value-2ic: initial;
	text-indent: 2ic;
	content: var(--value-2ic);
	left: var(--non-existing, 2ic);
	width: calc(8ic + 20px);
	height: 10px;
	margin: 0.5ic 1ic .2ic;
	padding: 2    ic;
}

.unset {
	clip: unset;
}

.mod {
	padding: 8px 3px 1px calc(3px + 50%);
	transform: rotate(-50deg);
	width: 2px;
}

.rem {
	padding: 8px 3px 1px calc(3px + 50%);
	transform: rotate(-50deg);
}

.round {
	top: 3px;
	right: 3px;
	bottom: 3px;
	left: 2px;
	padding-left: 2px;
}

.trigonometric {
	left: sin(45deg);
	left: cos(45deg);
	left: tan(45deg);
	left: asin(0.5);
	left: acos(0.5);
	left: atan(10);
	left: atan2(-1, 1);
	left: asin(sin(pi / 2));
	left: atan2(infinity, -infinity);
	left: sin((1deg * 3) + .25turn);
}

.trigonometric-ignore-not-a-function {
	left: sin;
	left: cos;
	left: tan;
	left: asin;
	left: acos;
	left: atan;
	left: atan2;
}

.trigonometric-ignore-no-arguments {
	left: sin();
	left: cos();
	left: tan();
	left: asin();
	left: acos();
	left: atan();
	left: atan2();
}

:is([data-view-size=m]) .view {
		background: red;
	}

.nested-calc {
	order: calc(1 * calc(8 / 3 + calc(5 * 10)));
}

.text-decoration-shorthand {
	text-decoration: 3px wavy pink overline;
}

.stage__container {
	inset-inline-start: var(--size, 1rem);
}

:scope {
	content: "plain :scope";
}

@scope (.foo) {
	:scope {
		content: ":scope in @scope";
	}
}

:scope {
	@scope (.foo) {
		content: ":scope in @scope, but with nesting";
	}
}

@media (min-aspect-ratio: 1.77) {
	/* media query aspect ratio : <number> */
}

.color-mix {
	color-1: color-mix(in srgb, rgb(255 0 0 / 0), blue 65%);
	color-2: color-mix(in lab, rgb(255 0 0 / 0), blue 65%);
	color-3: color-mix(in xyz, rgb(255 0 0 / 0), blue 65%);
	color-4: color-mix(in oklch, rgb(255 0 0 / 0), blue 65%);
	color-5: color-mix(in lch, rgb(255 0 0 / 0), blue 65%);
	color-6: color-mix(in hsl, rgb(255 0 0 / 0), blue 65%);
}

.gradients-interpolation-method {
	--background-image: linear-gradient(in oklch decreasing hue, hsl(0deg 85% 75%) 0%, hsl(180deg 80% 65%) 100%);

	background-image: radial-gradient(farthest-corner circle at 50% 115% in oklch, rgb(255, 157, 133) 0%, rgb(31, 251, 255) 100%);
}

@media (color-gamut: p3) {
.gradients-interpolation-method {

	background-image: radial-gradient(farthest-corner circle at 50% 115% in oklch, color(display-p3 1 0.61669 0.51066) 0%, color(display-p3 0.46442 0.97081 1) 100%);
}
}

.test-css-color-5-interop {
	color-1: rgb(196, 129, 72);
	color-2: color(from color(a98-rgb 0.7 0.5 0.3) a98-rgb r g b / none);
	color-3: rgb(234, 133, 82);
	color-4: color(from color(prophoto-rgb 0.7 0.5 0.3) prophoto-rgb r g none);
	color-5: rgb(179, 157, 51);
	color-6: rgb(179, 35, 35);
	color-7: rgb(163, 57, 39);
	color-8: rgb(141, 0, 0);
	color-9: rgb(130, 31, 0);
}

@media (color-gamut: p3) {
.test-css-color-5-interop {
	color-8: color(display-p3 0.50566 0.0781 0);
	color-9: color(display-p3 0.48896 0.1211 0);
}
}

.test-property-with-var {
	--opacity: 1;
	color: rgba(87 107 149 / var(--opacity));
}

.exponential-functions {
	width: 8px;
}

.out-of-gamut {
	--color: rgb(0, 249, 66);
}

@media (color-gamut: p3) {
.out-of-gamut {
	--color: color(display-p3 0 1 0);
}
}

.issue-1244--a {
	background-image: -ms-linear-gradient(180deg, red 0%, blue 100%);
}

.issue-1244--b {
	background-image: linear-gradient(180deg, red 0%, blue 100%);
}

.issue-1244--c {
	background-image: linear-gradient(180deg, red 0%, blue 100%);
}

.dark {
	--csstools-color-scheme--light:  ;
	--csstools-color-scheme--dark: initial;
	color-scheme: dark;
}

.light {
	--csstools-color-scheme--light: initial;
	--csstools-color-scheme--dark:  ;
	color-scheme: light;
}

.schemed-colors {
	color: var(--csstools-color-scheme--light, rgb(141, 0, 0)) var(--csstools-color-scheme--dark, magenta);
	color: light-dark(rgb(141, 0, 0), magenta);
}

@media (color-gamut: p3) {
.schemed-colors {
	color: light-dark(color(display-p3 0.50566 0.0781 0), magenta);
}
}

.schemed-prop {
	--theme-color: var(--csstools-color-scheme--light, cyan) var(--csstools-color-scheme--dark, deepskyblue);
}

@supports (color: light-dark(red, red)) {
.schemed-prop {
	--theme-color: light-dark(cyan, deepskyblue);
}
}

.schemed-prop * {
	--theme-color: var(--csstools-color-scheme--light, cyan) var(--csstools-color-scheme--dark, deepskyblue);
}

:root {
	--csstools-color-scheme--light: initial;
	--csstools-color-scheme--dark:  ;
}

@media (prefers-color-scheme: dark) {

	:root {
		--csstools-color-scheme--light:  ;
		--csstools-color-scheme--dark: initial;
	}
}
