import e from"path";import t from"postcss-value-parser";import n from"fs";import r from"module";import s from"@csstools/postcss-rebase-url";function isWarning(e){return"warning"===e.type}function isCharsetStatement(e){return"charset"===e.type}function isImportStatement(e){return"import"===e.type}const o=/^data:text\/css(?:;(base64|plain))?,/i,i=/^data:text\/css;base64,/i,a=/^data:text\/css;plain,/i;function isValidDataURL(e){return!!e&&o.test(e)}function parseStatements(e,t,n,r){const s=[];if("document"===t.type)return t.each((t=>{s.push(...parseStatements(e,t,n,r))})),s;let o=[];return t.each((t=>{let i;"atrule"===t.type&&("import"===t.name?i=parseImport(e,t,n,r):"charset"===t.name&&(i=parseCharset(e,t,n,r))),i?(o.length&&(s.push({type:"nodes",nodes:o,conditions:[...n],from:r}),o=[]),s.push(i)):o.push(t)})),o.length&&s.push({type:"nodes",nodes:o,conditions:[...n],from:r}),s}function parseCharset(e,t,n,r){return t.prev()?e.warn("@charset must precede all other statements",{node:t}):{type:"charset",node:t,conditions:[...n],from:r}}function parseImport(e,n,r,s){let o=n.prev();for(;o;)if("comment"!==o.type){if("atrule"!==o.type||"import"!==o.name)break;o=o.prev()}else o=o.prev();for(;o;)if("comment"!==o.type)if("atrule"!==o.type||"charset"!==o.name){if("atrule"!==o.type||"layer"!==o.name||o.nodes)return e.warn("@import must precede all other statements (besides @charset or empty @layer)",{node:n});o=o.prev()}else o=o.prev();else o=o.prev();if(n.nodes)return e.warn("It looks like you didn't end your @import statement correctly. Child nodes are attached to it.",{node:n});const i=t(n.params).nodes,a={type:"import",uri:"",fullUri:"",node:n,conditions:[...r],from:s};let p=[],l=[],u=[];for(let r=0;r<i.length;r++){const s=i[r];if("space"!==s.type&&"comment"!==s.type)if("string"!==s.type)if("function"===s.type&&/^url$/i.test(s.value)){var c;if(a.uri)return e.warn(`Multiple url's in '${n.toString()}'`,{node:n});if(null==(c=s.nodes)||null==(c=c[0])||!c.value)return e.warn(`Unable to find uri in '${n.toString()}'`,{node:n});a.uri=s.nodes[0].value,a.fullUri=t.stringify(s)}else{if(!a.uri)return e.warn(`Unable to find uri in '${n.toString()}'`,{node:n});if("word"!==s.type&&"function"!==s.type||!/^layer$/i.test(s.value)){if("function"!==s.type||!/^supports$/i.test(s.value)){l=split(i,r);break}u=[t.stringify(s.nodes)]}else p="function"===s.type&&s.nodes?[t.stringify(s.nodes)]:[""]}else{if(a.uri)return e.warn(`Multiple url's in '${n.toString()}'`,{node:n});if(!s.value)return e.warn(`Unable to find uri in '${n.toString()}'`,{node:n});a.uri=s.value,a.fullUri=t.stringify(s)}}return a.uri?(a.uri=stripHash(a.uri),(l.length>0||p.length>0||u.length>0)&&a.conditions.push({layer:p,media:l,supports:u}),a):e.warn(`Unable to find uri in '${n.toString()}'`,{node:n})}function split(e,n){const r=[],s=e.reduce(((e,s,o)=>o<n?"":"div"===s.type&&","===s.value?(r.push(e),""):e+t.stringify(s)),"");return r.push(s),r}function stripHash(e){try{const t=new URL(e,"http://example.com");return t.hash?e.slice(0,e.length-t.hash.length):e}catch{return e}}const p=r.createRequire(import.meta.url);function resolveId(t,r,s){let o="";if(t.startsWith("node_modules://"))try{o=p.resolve(t.slice(15),{paths:[r]})}catch(e){throw s.error(`Failed to find '${t}'`)}else o=e.resolve(r,t);if(!n.existsSync(o))throw s.error(`Failed to find '${t}'`);return o}function loadContent(e){return isValidDataURL(e)?(t=e,i.test(t)?Buffer.from(t.slice(21),"base64").toString():a.test(t)?decodeURIComponent(t.slice(20)):decodeURIComponent(t.slice(14))):n.readFileSync(e,"utf-8");var t}const noopPlugin=()=>({postcssPlugin:"noop-plugin",Once(){}});async function parseStyles(e,t,n,r,s){const o=parseStatements(e,t,n,r);for(const t of o)isImportStatement(t)&&isProcessableURL(t.uri)&&await resolveImportId(e,t,s);let i=null;const a=[],p=[];function handleCharset(e){if(i){if(e.node.params.toLowerCase()!==i.node.params.toLowerCase()){var t,n;throw e.node.error(`Incompatible @charset statements:\n  ${e.node.params} specified in ${null==(t=e.node.source)?void 0:t.input.file}\n  ${i.node.params} specified in ${null==(n=i.node.source)?void 0:n.input.file}`)}}else i=e}return o.forEach((e=>{isCharsetStatement(e)?handleCharset(e):isImportStatement(e)?e.children?e.children.forEach((e=>{isImportStatement(e)?a.push(e):isCharsetStatement(e)?handleCharset(e):p.push(e)})):a.push(e):"nodes"===e.type&&p.push(e)})),i?[i,...a.concat(p)]:a.concat(p)}async function resolveImportId(t,n,r){var s;if(isValidDataURL(n.uri))return void(n.children=await loadImportContent(t,n,n.uri,r));if(isValidDataURL(n.from[n.from.length-1]))return n.children=[],void t.warn(`Unable to import '${n.uri}' from a stylesheet that is embedded in a data url`,{node:n.node});const o=n.node;let i;if(null==(s=o.source)||null==(s=s.input)||!s.file)return n.children=[],void t.warn("The current PostCSS AST Node is lacking a source file reference. This is most likely a bug in a PostCSS plugin.",{node:n.node});i=o.source.input.file;const a=e.dirname(i),p=resolveId(n.uri,a,o);t.messages.push({type:"dependency",plugin:"postcss-import",resolved:p,parent:i});const l=await loadImportContent(t,n,p,r);n.children=l??[]}async function loadImportContent(e,t,n,r){var s;const{conditions:o,from:i}=t;if(i.includes(n))return;const a=await loadContent(n),p=await r([noopPlugin()]).process(a,{from:n,parser:(null==(s=e.opts.syntax)?void 0:s.parse)??e.opts.parser??void 0}),l=p.root;return e.messages=e.messages.concat(p.messages),parseStyles(e,l,o,[...i,n],r)}function isProcessableURL(e){if(/^(?:[a-z]+:)?\/\//i.test(e))return!1;try{if(new URL(e,"https://example.com").search)return!1}catch{}return!0}function formatImportPrelude(e,t,n){const r=[];if(e.length){const t=e.join(".");let n="layer";t&&(n=`layer(${t})`),r.push(n)}return 1===n.length?r.push(`supports(${n[0]})`):n.length>0&&r.push(`supports(${n.map((e=>`(${e})`)).join(" and ")})`),t.length&&r.push(t.join(", ")),r.join(" ")}function applyConditions(e,t){e.forEach(((n,r)=>{if(isWarning(n))return;if(!n.conditions.length||isCharsetStatement(n))return;if(isImportStatement(n)){if(1===n.conditions.length)n.node.params=`${n.fullUri} ${formatImportPrelude(n.conditions[0].layer,n.conditions[0].media,n.conditions[0].supports)}`;else if(n.conditions.length>1){const e=n.conditions.slice().reverse(),t=e.pop();let r=`${n.fullUri} ${formatImportPrelude(t.layer,t.media,t.supports)}`;for(const t of e)r=`'data:text/css;base64,${Buffer.from(`@import ${r}`).toString("base64")}' ${formatImportPrelude(t.layer,t.media,t.supports)}`;n.node.params=r}return}const{nodes:s}=n;if(!s.length)return;const{parent:o}=s[0];if(!o)return;const i=[];for(const e of n.conditions){if(e.media.length>0){const n=t({name:"media",params:e.media.join(", "),source:o.source});i.push(n)}if(e.supports.length>0){const n=t({name:"supports",params:1===e.supports.length?`(${e.supports[0]})`:e.supports.map((e=>`(${e})`)).join(" and "),source:o.source});i.push(n)}if(e.layer.length>0){const n=t({name:"layer",params:e.layer.join("."),source:o.source});i.push(n)}}const a=i.shift();if(!a)return;const p=i.reduce(((e,t)=>(e.append(t),t)),a);o.insertBefore(s[0],a),s.forEach((e=>{e.parent=void 0})),s[0].raws.before=s[0].raws.before||"\n",p.append(s),e[r]={type:"nodes",nodes:[a],conditions:n.conditions,from:n.from}}))}function applyStyles(e,t){t.nodes=[],e.forEach((e=>{isCharsetStatement(e)||isImportStatement(e)?(e.node.parent=void 0,t.append(e.node)):"nodes"===e.type&&e.nodes.forEach((e=>{e.parent=void 0,t.append(e)}))}))}noopPlugin.postcss=!0;const creator$1=()=>({postcssPlugin:"postcss-import",async Once(e,{result:t,atRule:n,postcss:r}){const s=await parseStyles(t,e,[],[],r);applyConditions(s,n),applyStyles(s,e)}});creator$1.postcss=!0;const creator=()=>({postcssPlugin:"postcss-bundler",plugins:[creator$1(),s()]});creator.postcss=!0;export{creator as default};
