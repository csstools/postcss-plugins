"use strict";var e=require("postcss-selector-parser");const creator=t=>{const r=Object.assign({dir:null,preserve:!1,shadow:!1},t);return{postcssPlugin:"postcss-dir-pseudo-class",Rule(t,{result:o}){let s,a=!1;if(t.selector.toLowerCase().includes(":dir(")){try{s=e((s=>{s.nodes.forEach((s=>{s.walk((s=>{if("pseudo"!==s.type)return;if(":dir"!==s.value.toLowerCase())return;if(!s.nodes||!s.nodes.length)return;const n=s.nodes.toString().toLowerCase();if("rtl"!==n&&"ltr"!==n)return;const l=s.parent;l.nodes.filter((e=>"pseudo"===e.type&&":dir"===e.value.toLowerCase())).length>1&&!a&&(a=!0,t.warn(o,`Hierarchical :dir pseudo class usage can't be transformed correctly to [dir] attributes. This will lead to incorrect selectors for "${t.selector}"`));const c=s.prev(),i=s.next(),p=c&&c.type&&"combinator"!==c.type,u=i&&i.type&&"combinator"!==i.type,d=i&&i.type&&("combinator"!==i.type||"combinator"===i.type&&" "===i.value);p||u||0===l.nodes.indexOf(s)&&d||1===l.nodes.length?s.remove():s.replaceWith(e.universal());const v=l.nodes[0],y=v&&"combinator"===v.type&&" "===v.value,w=v&&"tag"===v.type&&"html"===v.value.toLowerCase(),b=v&&"pseudo"===v.type&&":root"===v.value.toLowerCase();!v||w||b||y||l.prepend(e.combinator({value:" "}));const f=r.dir===n,h=e.attribute({attribute:"dir",operator:"=",quoteMark:'"',value:`"${n}"`,raws:null}),m=e.pseudo({value:":host-context"});m.append(h);const g=e.pseudo({value:(w||b?"":"html")+":not"});g.append(e.attribute({attribute:"dir",operator:"=",quoteMark:'"',value:`"${"ltr"===n?"rtl":"ltr"}"`,raws:null})),f?w?l.insertAfter(v,g):l.prepend(g):w?l.insertAfter(v,h):r.shadow&&!b?l.prepend(m):l.prepend(h)}))}))})).processSync(t.selector)}catch(e){return void t.warn(o,`Failed to parse selector : ${t.selector}`)}void 0!==s&&s!==t.selector&&(t.cloneBefore({selector:s}),r.preserve||t.remove())}}}};creator.postcss=!0,module.exports=creator;
