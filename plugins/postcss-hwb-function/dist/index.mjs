import{color as e,SyntaxFlag as s,serializeRGB as t}from"@csstools/css-color-parser";import{hasSupportsAtRuleAncestor as r,hasFallback as o}from"@csstools/utilities";import{replaceComponentValues as a,parseCommaSeparatedListOfComponentValues as n,isFunctionNode as l,stringify as c}from"@csstools/css-parser-algorithms";import{tokenize as p}from"@csstools/css-tokenizer";const i=/\bhwb\(/i,u=/^hwb$/i,f="(color: hwb(0 0% 0%))",postcssPlugin=m=>{const h="preserve"in Object(m)&&Boolean(m?.preserve);return{postcssPlugin:"postcss-hwb-function",Declaration:(m,{postcss:v})=>{const x=m.value;if(!i.test(x))return;if(r(m,i))return;if(o(m))return;const b=a(n(p({css:x})),(r=>{if(!l(r)||!u.test(r.getName()))return;const o=e(r);return o&&!(o.syntaxFlags.has(s.Experimental)||o.syntaxFlags.has(s.HasNoneKeywords)||o.syntaxFlags.has(s.RelativeColorSyntax))?t(o):void 0})),g=c(b);if(g!==x)if(m.variable&&h&&m.parent){const e=m.parent,s=v.atRule({name:"supports",params:f,source:m.source}),t=e.clone();t.removeAll(),t.append(m.clone()),s.append(t),insertAtSupportsAfterCorrectRule(s,e,f),m.replaceWith(m.clone({value:g}))}else h?m.cloneBefore({value:g}):m.replaceWith(m.clone({value:g}))}}};function insertAtSupportsAfterCorrectRule(e,s,t){let r=s,o=s.next();for(;r&&o&&"atrule"===o.type&&"supports"===o.name.toLowerCase()&&o.params===t;)r=o,o=o.next();r.after(e)}postcssPlugin.postcss=!0;export{postcssPlugin as default};
