import s from"@csstools/postcss-progressive-custom-properties";import{tokenize as e}from"@csstools/css-tokenizer";import{color as r,SyntaxFlag as t,serializeRGB as o}from"@csstools/css-color-parser";import{replaceComponentValues as n,parseCommaSeparatedListOfComponentValues as a,isFunctionNode as p,stringify as c}from"@csstools/css-parser-algorithms";function hasFallback(s){const e=s.parent;if(!e)return!1;const r=s.prop.toLowerCase(),t=e.index(s);for(let s=0;s<t;s++){const t=e.nodes[s];if("decl"===t.type&&t.prop.toLowerCase()===r)return!0}return!1}function hasSupportsAtRuleAncestor(s){let e=s.parent;for(;e;)if("atrule"===e.type){if("supports"===e.name.toLowerCase()&&e.params.includes("(color: hwb(0 0% 0%))"))return!0;e=e.parent}else e=e.parent;return!1}const i=/hwb\(/i,l=/^hwb$/i,basePlugin=s=>({postcssPlugin:"postcss-hwb-function",Declaration:u=>{const f=u.value;if(!i.test(f))return;if(hasFallback(u))return;if(hasSupportsAtRuleAncestor(u))return;const m=n(a(e({css:f})),(s=>{if(!p(s)||!l.test(s.getName()))return;const e=r(s);return e&&!(e.syntaxFlags.has(t.Experimental)||e.syntaxFlags.has(t.HasNoneKeywords)||e.syntaxFlags.has(t.RelativeColorSyntax))?o(e):void 0})),h=c(m);h!==f&&(u.cloneBefore({value:h}),s?.preserve||u.remove())}});basePlugin.postcss=!0;const postcssPlugin=e=>{const r=Object.assign({preserve:!1,enableProgressiveCustomProperties:!0},e);return r.enableProgressiveCustomProperties&&r.preserve?{postcssPlugin:"postcss-hwb-function",plugins:[s(),basePlugin(r)]}:basePlugin(r)};postcssPlugin.postcss=!0;export{postcssPlugin as default};
