import e from"@csstools/postcss-progressive-custom-properties";import{tokenize as r,TokenType as t}from"@csstools/css-tokenizer";import{hasFallback as o,hasSupportsAtRuleAncestor as s}from"@csstools/utilities";import{isFunctionNode as n,isWhitespaceNode as a,isCommentNode as i,walk as c,isTokenNode as l,replaceComponentValues as u,parseCommaSeparatedListOfComponentValues as p,FunctionNode as f,TokenNode as v,WhitespaceNode as m,stringify as g}from"@csstools/css-parser-algorithms";const d="--csstools-color-scheme--dark",h="initial";function toggleNameGenerator(e){return`--csstools-light-dark-toggle--${e}`}const k=/dark/i,D=/light/i;function colorSchemes(e){const o=r({css:e});let s=!1,n=!1;return o.forEach((e=>{e[0]===t.Ident&&(D.test(e[4].value)?s=!0:k.test(e[4].value)&&(n=!0))})),[s,n]}const C=/^light-dark$/i;function isComma(e){return l(e)&&e.value[0]===t.Comma}function parseLightDark(e){if(!n(e)||!C.test(e.getName()))return!1;const r=e.value.filter((e=>!a(e)&&!i(e)));if(3!==r.length)return!1;let t=r[0];const o=r[1];let s=r[2];if(!t||!o||!s)return!1;if(!isComma(o))return!1;if(isComma(t)||isComma(s))return!1;if(n(t)){const e=[t];c(e,(({node:e,parent:r},t)=>{recurseLightDark(e,r,t,!0)})),[t]=e}if(n(s)){const e=[s];c(e,(({node:e,parent:r},t)=>{recurseLightDark(e,r,t,!1)})),[s]=e}return[t,s]}function recurseLightDark(e,r,t,o){if("number"!=typeof t)return;const s=parseLightDark(e);if(!s)return;let a=s[o?0:1];if(n(a)){const e=[a];c(e,(({node:e,parent:r},t)=>{recurseLightDark(e,r,t,o)})),[a]=e}r.value[t]=a}function transformLightDark(e,o){const s=new Map,n=u(p(r({css:e})),(e=>{const r=parseLightDark(e);if(!r)return;const[n,a]=r,i=o();return s.set(i,`var(${d}) ${n.toString()}`),new f([t.Function,"var(",-1,-1,{value:"var"}],[t.CloseParen,")",-1,-1,void 0],[new v([t.Ident,i,-1,-1,{value:i}]),new v([t.Comma,",",-1,-1,void 0]),new m([[t.Whitespace," ",-1,-1,void 0]]),a])}));return{value:g(n),toggles:s}}const L=/^color-scheme$/i,P=/\blight-dark\(/i,basePlugin=e=>({postcssPlugin:"postcss-light-dark-function",prepare(){let r=0;const currentToggleNameGenerator=()=>toggleNameGenerator(r++);return{postcssPlugin:"postcss-light-dark-function",Declaration(r,{atRule:t,rule:n}){const a=r.parent;if(a){if(L.test(r.prop)){if(a.some((e=>"decl"===e.type&&e.prop===d)))return;const[e,o]=colorSchemes(r.value);if(e&&o){r.cloneBefore({prop:d,value:" "});const e=a.clone();e.removeAll(),e.append(r.clone({prop:d,value:h}));const o=t({name:"media",params:"(prefers-color-scheme: dark)",source:a.source});return o.append(e),void a.after(o)}return o?void r.cloneBefore({prop:d,value:h}):e?void r.cloneBefore({prop:d,value:" "}):void 0}if(P.test(r.value)){if(o(r))return;if(s(r,P))return;const t=transformLightDark(r.value,currentToggleNameGenerator);if(t.value===r.value)return;for(const[e,o]of t.toggles)r.cloneBefore({prop:e,value:o});if(r.cloneBefore({value:t.value}),r.variable&&r.parent){const e=n({selector:"& *",source:r.source});for(const[o,s]of t.toggles)e.append(r.clone({prop:o,value:s}));e.append(r.clone({value:t.value})),r.parent.append(e)}e?.preserve||r.remove()}}}}}});basePlugin.postcss=!0;const postcssPlugin=r=>{const t=Object.assign({enableProgressiveCustomProperties:!0,preserve:!0},r);return t.enableProgressiveCustomProperties&&t.preserve?{postcssPlugin:"postcss-light-dark-function",plugins:[e(),basePlugin(t)]}:basePlugin(t)};postcssPlugin.postcss=!0;export{postcssPlugin as default};
