import{tokenizer as e,stringify as o}from"@csstools/css-tokenizer";import{parseCommaSeparatedListOfComponentValues as s,isFunctionNode as t,isSimpleBlockNode as n}from"@csstools/css-parser-algorithms";import{calcFromComponentValues as r}from"@csstools/css-calc";const c=["mod(","rem(","round("];function calc(l){const a=e({css:l}),i=[];for(;!a.endOfFile();)i.push(a.nextToken());i.push(a.nextToken());const u=s(i,{});let p=!1;for(let e=0;e<u.length;e++){const o=u[e];for(let e=0;e<o.length;e++){const s=o[e];if(t(s)&&c.includes(s.getName().toLowerCase()+"(")){p=!0;break}(n(s)||t(s))&&s.walk(((e,o)=>{if("number"!=typeof o)return;const s=e.node;return t(s)&&c.includes(s.getName().toLowerCase()+"(")?(p=!0,!1):void 0}))}}return p?r(u,{precision:5,toCanonicalUnits:!0}).map((e=>e.map((e=>o(...e.tokens()))).join(""))).join(","):l}const creator=e=>{const o=Object.assign({preserve:!1,onInvalid:""},e);return{postcssPlugin:"postcss-stepped-value-functions",Declaration(e){if(!c.some((o=>e.value.toLowerCase().includes(o))))return;const s=calc(e.value);s!==e.value&&(e.cloneBefore({value:s}),o.preserve||e.remove())}}};creator.postcss=!0;export{creator as default};
