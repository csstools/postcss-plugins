"use strict";var e=require("@csstools/media-query-list-parser"),r=require("@csstools/css-parser-algorithms"),o=require("@csstools/css-tokenizer");const n=1e5,t=2147483647;function transformMediaFeatureValue(a){if(Array.isArray(a.value)&&e.matchesRatioExactly(a.value)){const e=[];for(let n=0;n<a.value.length;n++){const t=a.value[n];r.isTokenNode(t)&&t.value[0]===o.TokenType.Number?e.push(t):r.isFunctionNode(t)&&"calc"===t.getName().toLowerCase()&&e.push(t)}if(2!==e.length)return;const i=e[0],u=a.value.indexOf(i),s=e[1],l=a.value.indexOf(s);if(r.isTokenNode(s)&&s.value[0]===o.TokenType.Number&&0===s.value[4].value)return a.value.splice(u,1,new r.TokenNode([o.TokenType.Number,t.toString(),-1,-1,{value:t,type:o.NumberType.Integer}])),void a.value.splice(l,1,new r.TokenNode([o.TokenType.Number,"1",-1,-1,{value:1,type:o.NumberType.Integer}]));if(r.isTokenNode(i)&&i.value[0]===o.TokenType.Number&&i.value[4].type===o.NumberType.Integer&&r.isTokenNode(s)&&s.value[0]===o.TokenType.Number&&s.value[4].type===o.NumberType.Integer)return;let c,p;if(r.isFunctionNode(i)&&"calc"===i.getName().toLowerCase()){if(i.toString().includes(n.toString()))return;c=modifyCalc(i)}if(r.isFunctionNode(s)&&"calc"===s.getName().toLowerCase()){if(s.toString().includes(n.toString()))return;p=modifyCalc(s)}if(r.isTokenNode(i)&&i.value[0]===o.TokenType.Number&&r.isTokenNode(s)&&s.value[0]===o.TokenType.Number){const e=i.value,t=s.value,a=Math.round(e[4].value*n),u=Math.round(t[4].value*n),l=greatestCommonDivisor(a,u);c=new r.TokenNode([o.TokenType.Number,Math.round(a/l).toString(),-1,-1,{value:Math.round(a/l),type:o.NumberType.Integer}]),p=new r.TokenNode([o.TokenType.Number,Math.round(u/l).toString(),-1,-1,{value:Math.round(u/l),type:o.NumberType.Integer}])}else{if(r.isTokenNode(i)&&i.value[0]===o.TokenType.Number){const e=i.value;c=new r.TokenNode([o.TokenType.Number,Math.round(e[4].value*n).toString(),-1,-1,{value:Math.round(e[4].value*n),type:o.NumberType.Integer}])}if(r.isTokenNode(s)&&s.value[0]===o.TokenType.Number){const e=s.value;p=new r.TokenNode([o.TokenType.Number,Math.round(e[4].value*n).toString(),-1,-1,{value:Math.round(e[4].value*n),type:o.NumberType.Integer}])}}return c&&p?(a.value.splice(u,1,c),void a.value.splice(l,1,p)):void 0}const i=Array.isArray(a.value)?a.value:[a.value];for(let e=0;e<i.length;e++){const t=i[e];if(r.isTokenNode(t)){const u=t.value;if(u[0]!==o.TokenType.Number)return;if(u[4].type===o.NumberType.Integer)return i.splice(e+1,0,new r.TokenNode([o.TokenType.Delim,"/",-1,-1,{value:"/"}]),new r.TokenNode([o.TokenType.Number,"1",-1,-1,{value:1,type:o.NumberType.Integer}])),void(a.value=i);if(u[4].type===o.NumberType.Number){const t=Math.round(u[4].value*n),s=greatestCommonDivisor(t,n);return i.splice(e,1,new r.TokenNode([o.TokenType.Number,Math.round(t/s).toString(),-1,-1,{value:Math.round(t/s),type:o.NumberType.Integer}]),new r.TokenNode([o.TokenType.Delim,"/",-1,-1,{value:"/"}]),new r.TokenNode([o.TokenType.Number,Math.round(n/s).toString(),-1,-1,{value:Math.round(n/s),type:o.NumberType.Integer}])),void(a.value=i)}return}if(r.isFunctionNode(t)&&"calc"===t.getName().toLowerCase())return i.splice(e,1,modifyCalc(t),new r.TokenNode([o.TokenType.Delim,"/",-1,-1,{value:"/"}]),new r.TokenNode([o.TokenType.Number,n.toString(),-1,-1,{value:n,type:o.NumberType.Integer}])),void(a.value=i)}}function modifyCalc(e){return new r.FunctionNode([o.TokenType.Function,"calc(",-1,-1,{value:"calc("}],[o.TokenType.CloseParen,")",-1,-1,void 0],[new r.SimpleBlockNode([o.TokenType.OpenParen,"(",-1,-1,void 0],[o.TokenType.CloseParen,")",-1,-1,void 0],e.value),new r.WhitespaceNode([[o.TokenType.Whitespace," ",-1,-1,void 0]]),new r.TokenNode([o.TokenType.Delim,"*",-1,-1,{value:"*"}]),new r.WhitespaceNode([[o.TokenType.Whitespace," ",-1,-1,void 0]]),new r.TokenNode([o.TokenType.Number,n.toString(),-1,-1,{value:n,type:o.NumberType.Integer}])])}function greatestCommonDivisor(e,r){if(Number.isNaN(e)||Number.isNaN(r))throw new Error("Unexpected 'NaN' when calculating the greatest common divisor.");if(!Number.isFinite(e)||!Number.isFinite(r))throw new Error("Unexpected 'Infinite' value when calculating the greatest common divisor.");for(r>e&&([e,r]=[r,e]);;){if(0==r)return e;if(0==(e%=r))return r;r%=e}}const a=new Set(["aspect-ratio","min-aspect-ratio","max-aspect-ratio","device-aspect-ratio","min-device-aspect-ratio","max-device-aspect-ratio"]);function transformMediaQueryList(r,o){const n=e.parse(r,{preserveInvalidMediaQueries:!0,onParseError:()=>{throw new Error(`Unable to parse media query "${r}"`)}}),t=new Set(n.map((e=>e.toString())));return n.flatMap((r=>{if(e.isMediaQueryInvalid(r))return[r.toString()];const n=e.cloneMediaQuery(r);n.walk((r=>{const o=r.node;if(e.isMediaFeaturePlain(o)||e.isMediaFeatureRangeNameValue(o)||e.isMediaFeatureRangeValueName(o)){const e=o.name.getName().toLowerCase();if(!a.has(e))return;transformMediaFeatureValue(o.value)}else if(e.isMediaFeatureRangeValueNameValue(o)){const e=o.name.getName().toLowerCase();if(!a.has(e))return;transformMediaFeatureValue(o.valueOne);transformMediaFeatureValue(o.valueTwo)}else;}));const i=r.toString(),u=n.toString();return u===i||t.has(u)?[i]:o?[i,u]:[u]})).join(",")}const creator=e=>{const r=Object.assign({preserve:!1},e);return{postcssPlugin:"postcss-media-queries-aspect-ratio-number-values",AtRule(e,{result:o}){if("media"!==e.name.toLowerCase())return;const n=e.params.toLowerCase();if(!(n.includes("aspect-ratio")||n.includes("min-aspect-ratio")||n.includes("max-aspect-ratio")||n.includes("device-aspect-ratio")||n.includes("min-device-aspect-ratio")||n.includes("max-device-aspect-ratio")))return;let t=e.params;try{if(t=transformMediaQueryList(e.params,r.preserve),t===e.params)return}catch(r){return void e.warn(o,`Failed to transform @media params for "${e.params}" with message: "${r.message}"`)}e.cloneBefore({params:t}),e.remove()}}};creator.postcss=!0,module.exports=creator;
