import{tokenize as r,TokenType as e}from"@csstools/css-tokenizer";import{parseCommaSeparatedListOfComponentValues as t,replaceComponentValues as o,isFunctionNode as s,isWhitespaceNode as i,isCommentNode as a,isTokenNode as l,stringify as u}from"@csstools/css-parser-algorithms";function serializeString(r){let e="";for(const t of r){const r=t.codePointAt(0);if(void 0!==r)switch(r){case 0:e+=String.fromCodePoint(65533);break;case 127:e+=`\\${r.toString(16)}`;break;case 34:case 39:case 92:e+=`\\${t}`;break;default:if(1<=r&&r<=31){e+=`\\${r.toString(16)} `;break}e+=t}else e+=String.fromCodePoint(65533)}return e}const n=/rewrite-url\(/i,c=/^rewrite-url$/i,creator=f=>{const m=f?.rewriter??(r=>r);return{postcssPlugin:"postcss-rewrite-url",prepare:()=>({Declaration(f,{result:v}){if(!n.test(f.value))return;const p={rootFrom:v.opts.from,from:f.source?.input.from},g=t(r({css:f.value})),S=o(g,(r=>{if(s(r)&&c.test(r.getName()))for(const t of r.value)if(!i(t)&&!a(t)&&l(t)&&t.value[0]===e.String){const e=t.value[4].value.trim(),o=m({url:e},p);if(o.url===e)break;return t.value[4].value=o.url,t.value[1]=`"${serializeString(o.url)}"`,r.name[1]="url(",r.name[4].value="url",r}})),d=u(S);d!==f.value&&(f.value=d)}})}};creator.postcss=!0;export{creator as default};
