import{tokenize as r,TokenType as e}from"@csstools/css-tokenizer";import{parseCommaSeparatedListOfComponentValues as t,replaceComponentValues as s,isTokenNode as o,isFunctionNode as u,isWhitespaceNode as a,isCommentNode as i,stringify as l}from"@csstools/css-parser-algorithms";function serializeString(r){let e="";for(const t of r){const r=t.codePointAt(0);if(void 0!==r)switch(r){case 0:e+=String.fromCodePoint(65533);break;case 127:e+=`\\${r.toString(16)}`;break;case 34:case 39:case 92:e+=`\\${t}`;break;default:if(1<=r&&r<=31){e+=`\\${r.toString(16)} `;break}e+=t}else e+=String.fromCodePoint(65533)}return e}const n=/url\(/i,c=/^url$/i,creator=f=>{const v=f?.rewriter??(r=>r);return{postcssPlugin:"postcss-rewrite-url",prepare(){const f=new WeakSet;return{Declaration(m,{result:g}){if(f.has(m))return;if(!n.test(m.value))return;const p={rootFrom:g.opts.from,from:m.source?.input.from},S=t(r({css:m.value})),d=s(S,(r=>{if(o(r)&&r.value[0]===e.URL){const e=r.value[4].value.trim(),t=v({url:e},p);if(t.url===e)return;return r.value[4].value=t.url,r.value[1]=`url(${serializeString(t.url)})`,r}if(u(r)&&c.test(r.getName()))for(const t of r.value)if(!a(t)&&!i(t)&&o(t)&&t.value[0]===e.String){const e=t.value[4].value.trim(),s=v({url:e},p);if(s.url===e)break;return t.value[4].value=s.url,t.value[1]=`"${serializeString(s.url)}"`,r}})),k=l(d);k!==m.value&&(m.value=k,f.add(m))}}}}};creator.postcss=!0;export{creator as default};
