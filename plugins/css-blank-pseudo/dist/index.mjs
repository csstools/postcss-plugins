import e from"postcss-selector-parser";const s=[" ",">","~",":","+","@","#","(",")"];function isValidReplacement(e){let n=!0;for(let l=0,t=s.length;l<t&&n;l++)e.indexOf(s[l])>-1&&(n=!1);return n}const n="js-blank-pseudo",l=":blank",creator=s=>{const t=Object.assign({preserve:!0,replaceWith:"[blank]",disablePolyfillReadyClass:!1},s),o=e().astSync(t.replaceWith);return isValidReplacement(t.replaceWith)?{postcssPlugin:"css-blank-pseudo",Rule(s,{result:a}){if(!s.selector.toLowerCase().includes(l))return;const r=s.selectors.flatMap((r=>{if(!r.toLowerCase().includes(l))return[r];let i;try{i=e().astSync(r)}catch(e){return s.warn(a,`Failed to parse selector : "${r}" with message: "${e.message}"`),[r]}if(void 0===i)return[r];let c=!1;if(i.walkPseudos((e=>{e.value.toLowerCase()===l&&(e.nodes&&e.nodes.length||(c=!0,e.replaceWith(o.clone({}))))})),!c)return[r];const d=i.clone();if(!t.disablePolyfillReadyClass){var u,p,f,m,b;if(null!=(u=i.nodes)&&null!=(p=u[0])&&null!=(f=p.nodes)&&f.length)for(let s=0;s<i.nodes[0].nodes.length;s++){const l=i.nodes[0].nodes[s];if("combinator"===l.type||e.isPseudoElement(l)){i.nodes[0].insertBefore(l,e.className({value:n}));break}if(s===i.nodes[0].nodes.length-1){i.nodes[0].append(e.className({value:n}));break}}null!=(m=i.nodes)&&null!=(b=m[0])&&b.nodes&&(d.nodes[0].prepend(e.combinator({value:" "})),d.nodes[0].prepend(e.className({value:n})))}return[i.toString(),d.toString()]}));r.join(",")!==s.selectors.join(",")&&(s.cloneBefore({selectors:r}),t.preserve||s.remove())}}:{postcssPlugin:"css-blank-pseudo",Once:(e,{result:s})=>{e.warn(s,`${t.replaceWith} is not a valid replacement since it can't be applied to single elements.`)}}};creator.postcss=!0;export{creator as default};
