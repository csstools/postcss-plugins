import{tokenizer as e,stringify as s}from"@csstools/css-tokenizer";import{parseCommaSeparatedListOfComponentValues as o,isFunctionNode as t,isSimpleBlockNode as n}from"@csstools/css-parser-algorithms";import{calcFromComponentValues as r}from"@csstools/css-calc";const c=["asin(","acos(","atan(","atan2(","sin(","cos(","tan("];function calc(a){const i=e({css:a}),l=[];for(;!i.endOfFile();)l.push(i.nextToken());l.push(i.nextToken());const u=o(l,{});let p=!1;for(let e=0;e<u.length;e++){const s=u[e];for(let e=0;e<s.length;e++){const o=s[e];if(t(o)&&c.includes(o.getName().toLowerCase()+"(")){p=!0;break}(n(o)||t(o))&&o.walk(((e,s)=>{if("number"!=typeof s)return;const o=e.node;return t(o)&&c.includes(o.getName().toLowerCase()+"(")?(p=!0,!1):void 0}))}}return p?r(u,{precision:5,toCanonicalUnits:!0}).map((e=>e.map((e=>s(...e.tokens()))).join(""))).join(","):a}const creator=e=>{const s=Object.assign({preserve:!1},e);return{postcssPlugin:"postcss-trigonometric-functions",Declaration(e){if(!c.some((s=>e.value.toLowerCase().includes(s))))return;const o=calc(e.value);o!==e.value&&(e.cloneBefore({value:o}),s.preserve||e.remove())}}};creator.postcss=!0;export{creator as default};
