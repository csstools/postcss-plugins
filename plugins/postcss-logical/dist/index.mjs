import r from"postcss-value-parser";var o,t;!function(r){r.Block="block",r.Inline="inline"}(o||(o={})),function(r){r.Start="start",r.End="end"}(t||(t={}));const n={BlockStart:"block-start",BlockEnd:"block-end",InlineStart:"inline-start",InlineEnd:"inline-end"};var e,i;function cloneDeclaration(r,o,t){r.parent&&r.parent.some((r=>"decl"==r.type&&r.prop===t&&r.value===o))||r.cloneBefore({value:o,prop:t})}function parseValueCouple(o){const t=r(o.value),n=t.nodes.filter((r=>"space"!==r.type)),e=t.nodes.find((r=>"function"===r.type&&"var"===r.value.toLowerCase()));if(n.length>2){const r=`[postcss-logical] Invalid number of values for ${o.prop}. Found ${n.length} values, expected 1 or 2.`;throw o.error(r)}let i,a;if(1===n.length){if(e)return;i=r.stringify(n[0]),a=r.stringify(n[0])}return 2===n.length&&(i=r.stringify(n[0]),a=r.stringify(n[1])),[i,a]}function transformBorder(r,o){return t=>(cloneDeclaration(t,t.value,`border-${o}-${r}`),!0)}function transformBorderProperty(r,o){return t=>{const[n,e]=o,i=parseValueCouple(t);if(!i)return;const[a,l]=i;return cloneDeclaration(t,a,`border-${n}-${r}`),cloneDeclaration(t,l,`border-${e}-${r}`),!0}}function transformBorderShorthand(r){return o=>(r.forEach((r=>cloneDeclaration(o,o.value,`border-${r}`))),!0)}function transformBorderRadius(r,o){return t=>{let n;switch(t.prop.toLowerCase()){case"border-start-start-radius":n=`border-top-${r}-radius`;break;case"border-start-end-radius":n=`border-top-${o}-radius`;break;case"border-end-start-radius":n=`border-bottom-${r}-radius`;break;case"border-end-end-radius":n=`border-bottom-${o}-radius`}return cloneDeclaration(t,t.value,n),!0}}function transformLogicalSize(r){return o=>{const{value:t}=o,n=r.inlineIsHorizontal?"width":"height",e=r.inlineIsHorizontal?"height":"width";return cloneDeclaration(o,t,"block-size"===o.prop?e:n),!0}}function transformOffset(r){return o=>(cloneDeclaration(o,o.value,r),!0)}function transformOffsetShorthand(r){return o=>{const[t,n]=r,e=parseValueCouple(o);if(!e)return;const[i,a]=e;return cloneDeclaration(o,i,t),cloneDeclaration(o,a,n),!0}}function transformResize(o){return t=>{const{prop:n,value:e}=t,i=r(e),a=o.inlineIsHorizontal?"horizontal":"vertical",l=o.inlineIsHorizontal?"vertical":"horizontal";i.nodes.forEach((r=>{if("word"===r.type){const o=r.value.toLowerCase();if("inline"===o)return void(r.value=a);"block"===o&&(r.value=l)}}));const s=i.toString();return s!==e&&(cloneDeclaration(t,s,n),!0)}}function transformSide(r,o){return t=>(cloneDeclaration(t,t.value,`${r}-${o}`),!0)}function transformSideShorthand(r,o){return t=>{const[n,e]=o,i=parseValueCouple(t);if(!i)return;const[a,l]=i;return cloneDeclaration(t,a,`${r}-${n}`),cloneDeclaration(t,l,`${r}-${e}`),!0}}function logicalToPhysical(r,o){const[t,e]=o.block,[i,a]=o.inline;switch(r){case n.BlockStart:return t;case n.BlockEnd:return e;case n.InlineStart:return i;case n.InlineEnd:return a}}function doTransform(o,t,n){const{prop:e,value:i}=o,a=r(i);a.nodes.forEach((r=>{if("word"===r.type){const o=r.value.toLowerCase();t.includes(o)&&(r.value=logicalToPhysical(o,n))}}));const l=a.toString();return l!==i&&(cloneDeclaration(o,l,e),!0)}function transformValueWithSingleDirection(r,t){return e=>{let i;return i=r===o.Block?[n.BlockStart,n.BlockEnd]:[n.InlineStart,n.InlineEnd],doTransform(e,i,t)}}function directionFlowToAxes(r){switch(r){case e.TopToBottom:return[i.Top,i.Bottom];case e.BottomToTop:return[i.Bottom,i.Top];case e.RightToLeft:return[i.Right,i.Left];case e.LeftToRight:return[i.Left,i.Right]}}!function(r){r.TopToBottom="top-to-bottom",r.BottomToTop="bottom-to-top",r.RightToLeft="right-to-left",r.LeftToRight="left-to-right"}(e||(e={})),function(r){r.Top="top",r.Right="right",r.Bottom="bottom",r.Left="left"}(i||(i={}));const creator=a=>{const l=Object.assign({preserve:!1,blockDirection:e.TopToBottom,inlineDirection:e.LeftToRight},a),s=Object.values(e);if(!s.includes(l.blockDirection))throw new Error(`[postcss-logical] "blockDirection" must be one of ${s.join(", ")}`);if(!s.includes(l.inlineDirection))throw new Error(`[postcss-logical] "inlineDirection" must be one of ${s.join(", ")}`);const[c,d]=directionFlowToAxes(l.blockDirection),[f,u]=directionFlowToAxes(l.inlineDirection);if(!Object.values(i).every((r=>[c,d,f,u].includes(r))))throw new Error('[postcss-logical] "blockDirection" and "inlineDirection" must be on separate axes');const m={block:[c,d],inline:[f,u],inlineIsHorizontal:[e.LeftToRight,e.RightToLeft].includes(l.inlineDirection)},makeTransform=r=>(o,{result:t})=>{if(!r)return;let n=!1;try{n=r(o)}catch(r){return void o.warn(t,r.message)}n&&(l.preserve||o.remove())},b=m.inlineIsHorizontal?[f,u]:[i.Left,i.Right];return{postcssPlugin:"postcss-logical",Declaration:{"caption-side":makeTransform((p=m,r=>doTransform(r,Object.values(n),p))),float:makeTransform(m.inlineIsHorizontal?transformValueWithSingleDirection(o.Inline,m):null),clear:makeTransform(m.inlineIsHorizontal?transformValueWithSingleDirection(o.Inline,m):null),"text-align":makeTransform(m.inlineIsHorizontal?(h=m.inline,o=>{const{prop:n,value:e}=o,i=r(e),[a,l]=h;i.nodes.forEach((r=>{if("word"===r.type){const o=r.value.toLowerCase();if(o===t.End)return void(r.value=l);o===t.Start&&(r.value=a)}}));const s=i.toString();return s!==e&&(cloneDeclaration(o,s,n),!0)}):null),resize:makeTransform(transformResize(m)),"block-size":makeTransform(transformLogicalSize(m)),"inline-size":makeTransform(transformLogicalSize(m)),"margin-block-start":makeTransform(transformSide("margin",c)),"margin-block-end":makeTransform(transformSide("margin",d)),"margin-inline-start":makeTransform(transformSide("margin",f)),"margin-inline-end":makeTransform(transformSide("margin",u)),"margin-block":makeTransform(transformSideShorthand("margin",m.block)),"margin-inline":makeTransform(transformSideShorthand("margin",[f,u])),"inset-block":makeTransform(transformOffsetShorthand(m.block)),"inset-block-start":makeTransform(transformOffset(c)),"inset-block-end":makeTransform(transformOffset(d)),"inset-inline":makeTransform(transformOffsetShorthand([f,u])),"inset-inline-start":makeTransform(transformOffset(f)),"inset-inline-end":makeTransform(transformOffset(u)),inset:makeTransform((o=>{const t=r(o.value),n=t.nodes.filter((r=>"space"!==r.type&&"comment"!==r.type)),e=t.nodes.find((r=>"function"===r.type&&"var"===r.value.toLowerCase()));if(n.length>4){const r=`[postcss-logical] Invalid number of values for ${o.prop}. Found ${n.length} values, expected up to 4 values.`;throw o.error(r)}const i={top:"",right:"",bottom:"",left:""};if(!e||4===n.length)return 1===n.length&&(i.top=r.stringify(n[0]),i.right=i.top,i.bottom=i.top,i.left=i.top),2===n.length&&(i.top=r.stringify(n[0]),i.right=r.stringify(n[1]),i.bottom=i.top,i.left=i.right),3===n.length&&(i.top=r.stringify(n[0]),i.right=r.stringify(n[1]),i.left=i.right,i.bottom=r.stringify(n[2])),4===n.length&&(i.top=r.stringify(n[0]),i.right=r.stringify(n[1]),i.bottom=r.stringify(n[2]),i.left=r.stringify(n[3])),Object.keys(i).forEach((r=>{cloneDeclaration(o,i[r],r)})),!0})),"padding-block-start":makeTransform(transformSide("padding",c)),"padding-block-end":makeTransform(transformSide("padding",d)),"padding-inline-start":makeTransform(transformSide("padding",f)),"padding-inline-end":makeTransform(transformSide("padding",u)),"padding-block":makeTransform(transformSideShorthand("padding",m.block)),"padding-inline":makeTransform(transformSideShorthand("padding",[f,u])),"border-block-start-width":makeTransform(transformBorder("width",c)),"border-block-end-width":makeTransform(transformBorder("width",d)),"border-inline-start-width":makeTransform(transformBorder("width",f)),"border-inline-end-width":makeTransform(transformBorder("width",u)),"border-block-width":makeTransform(transformBorderProperty("width",m.block)),"border-inline-width":makeTransform(transformBorderProperty("width",m.inline)),"border-block-start-style":makeTransform(transformBorder("style",c)),"border-block-end-style":makeTransform(transformBorder("style",d)),"border-inline-start-style":makeTransform(transformBorder("style",f)),"border-inline-end-style":makeTransform(transformBorder("style",u)),"border-block-style":makeTransform(transformBorderProperty("style",m.block)),"border-inline-style":makeTransform(transformBorderProperty("style",m.inline)),"border-block-start-color":makeTransform(transformBorder("color",c)),"border-block-end-color":makeTransform(transformBorder("color",d)),"border-inline-start-color":makeTransform(transformBorder("color",f)),"border-inline-end-color":makeTransform(transformBorder("color",u)),"border-block-color":makeTransform(transformBorderProperty("color",m.block)),"border-inline-color":makeTransform(transformBorderProperty("color",m.inline)),"border-block":makeTransform(transformBorderShorthand(m.block)),"border-block-start":makeTransform(transformBorderShorthand([c])),"border-block-end":makeTransform(transformBorderShorthand([d])),"border-inline":makeTransform(transformBorderShorthand(m.inline)),"border-inline-start":makeTransform(transformBorderShorthand([f])),"border-inline-end":makeTransform(transformBorderShorthand([u])),"border-start-start-radius":makeTransform(transformBorderRadius(...b)),"border-start-end-radius":makeTransform(transformBorderRadius(...b)),"border-end-start-radius":makeTransform(transformBorderRadius(...b)),"border-end-end-radius":makeTransform(transformBorderRadius(...b))}};var h,p};creator.postcss=!0;export{creator as default};
