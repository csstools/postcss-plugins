"use strict";var r,o,e=require("postcss-value-parser");!function(r){r.Block="block",r.Inline="inline"}(r||(r={})),function(r){r.Start="start",r.End="end"}(o||(o={}));const n={BlockStart:"block-start",BlockEnd:"block-end",InlineStart:"inline-start",InlineEnd:"inline-end"};var t,i;function cloneDeclaration(r,o,e){r.parent&&r.parent.some((r=>"decl"==r.type&&r.prop===e&&r.value===o))||r.cloneBefore({value:o,prop:e})}function parseValueCouple(r){const o=e(r.value).nodes.filter((r=>"space"!==r.type));if(o.length>2){const e=`[postcss-logical] Invalid number of values for ${r.prop}. Found ${o.length} values, expected 1 or 2.`;throw r.error(e)}let n,t;return 1===o.length&&(n=e.stringify(o[0]),t=n),2===o.length&&(n=e.stringify(o[0]),t=e.stringify(o[1])),[n,t]}function transformBorder(r,o){return e=>(cloneDeclaration(e,e.value,`border-${o}-${r}`),!0)}function transformBorderProperty(r,o){return e=>{const[n,t]=o,[i,a]=parseValueCouple(e);return cloneDeclaration(e,i,`border-${n}-${r}`),cloneDeclaration(e,a,`border-${t}-${r}`),!0}}function transformBorderShorthand(r){return o=>(r.forEach((r=>cloneDeclaration(o,o.value,`border-${r}`))),!0)}function transformBorderRadius(r){return o=>{let e;switch(o.prop.toLowerCase()){case"border-start-start-radius":e=`border-${r.inlineIsHorizontal?`${r.block[0]}-${r.inline[0]}`:`${r.inline[0]}-${r.block[0]}`}-radius`;break;case"border-start-end-radius":e=`border-${r.inlineIsHorizontal?`${r.block[0]}-${r.inline[1]}`:`${r.inline[1]}-${r.block[0]}`}-radius`;break;case"border-end-start-radius":e=`border-${r.inlineIsHorizontal?`${r.block[1]}-${r.inline[0]}`:`${r.inline[0]}-${r.block[1]}`}-radius`;break;case"border-end-end-radius":e=`border-${r.inlineIsHorizontal?`${r.block[1]}-${r.inline[1]}`:`${r.inline[1]}-${r.block[1]}`}-radius`;break}return cloneDeclaration(o,o.value,e),!0}}function transformLogicalSize(r){return o=>{const{value:e}=o,n=r.inlineIsHorizontal?"width":"height",t=r.inlineIsHorizontal?"height":"width",i=o.prop.toLowerCase().replace("inline-size",n).replace("block-size",t);return cloneDeclaration(o,e,i),!0}}function transformOffset(r){return o=>(cloneDeclaration(o,o.value,r),!0)}function transformOffsetShorthand(r){return o=>{const[e,n]=r,[t,i]=parseValueCouple(o);return cloneDeclaration(o,t,e),cloneDeclaration(o,i,n),!0}}function transformSide(r,o){return e=>(cloneDeclaration(e,e.value,`${r}-${o}`),!0)}function transformSideShorthand(r,o){return e=>{const[n,t]=o,[i,a]=parseValueCouple(e);return cloneDeclaration(e,i,`${r}-${n}`),cloneDeclaration(e,a,`${r}-${t}`),!0}}function logicalToPhysical(r,o){const[e,t]=o.block,[i,a]=o.inline;switch(r){case n.BlockStart:return e;case n.BlockEnd:return t;case n.InlineStart:return i;case n.InlineEnd:return a}}function doTransform(r,o,n){const{prop:t,value:i}=r,a=e(i);a.nodes.forEach((r=>{if("word"===r.type){const e=r.value.toLowerCase();o.includes(e)&&(r.value=logicalToPhysical(e,n))}}));const l=a.toString();return l!==i&&(cloneDeclaration(r,l,t),!0)}function directionFlowToAxes(r){switch(r){case t.TopToBottom:return[i.Top,i.Bottom];case t.BottomToTop:return[i.Bottom,i.Top];case t.RightToLeft:return[i.Right,i.Left];case t.LeftToRight:return[i.Left,i.Right]}}!function(r){r.TopToBottom="top-to-bottom",r.BottomToTop="bottom-to-top",r.RightToLeft="right-to-left",r.LeftToRight="left-to-right"}(t||(t={})),function(r){r.Top="top",r.Right="right",r.Bottom="bottom",r.Left="left"}(i||(i={}));const creator=r=>{const a=Object.assign({blockDirection:t.TopToBottom,inlineDirection:t.LeftToRight},r),l=Object.values(t);if(!l.includes(a.blockDirection))throw new Error(`[postcss-logical] "blockDirection" must be one of ${l.join(", ")}`);if(!l.includes(a.inlineDirection))throw new Error(`[postcss-logical] "inlineDirection" must be one of ${l.join(", ")}`);const[s,c]=directionFlowToAxes(a.blockDirection),[d,f]=directionFlowToAxes(a.inlineDirection);if(!Object.values(i).every((r=>[s,c,d,f].includes(r))))throw new Error('[postcss-logical] "blockDirection" and "inlineDirection" must be on separate axes');const u={block:[s,c],inline:[d,f],inlineIsHorizontal:[t.LeftToRight,t.RightToLeft].includes(a.inlineDirection)},makeTransform=r=>(o,{result:e})=>{if(!r)return;let n=!1;try{n=r(o)}catch(r){return void o.warn(e,r.message)}n&&o.remove()};return{postcssPlugin:"postcss-logical",Declaration:{"caption-side":makeTransform((m=u,r=>doTransform(r,Object.values(n),m))),"text-align":makeTransform(u.inlineIsHorizontal?(b=u.inline,r=>{const{prop:n,value:t}=r,i=e(t),[a,l]=b;i.nodes.forEach((r=>{if("word"===r.type){const e=r.value.toLowerCase();if(e===o.End)return void(r.value=l);e===o.Start&&(r.value=a)}}));const s=i.toString();return s!==t&&(cloneDeclaration(r,s,n),!0)}):null),"block-size":makeTransform(transformLogicalSize(u)),"inline-size":makeTransform(transformLogicalSize(u)),"min-block-size":makeTransform(transformLogicalSize(u)),"max-block-size":makeTransform(transformLogicalSize(u)),"min-inline-size":makeTransform(transformLogicalSize(u)),"max-inline-size":makeTransform(transformLogicalSize(u)),"margin-block-start":makeTransform(transformSide("margin",s)),"margin-block-end":makeTransform(transformSide("margin",c)),"margin-inline-start":makeTransform(transformSide("margin",d)),"margin-inline-end":makeTransform(transformSide("margin",f)),"margin-block":makeTransform(transformSideShorthand("margin",u.block)),"margin-inline":makeTransform(transformSideShorthand("margin",u.inline)),"inset-block":makeTransform(transformOffsetShorthand(u.block)),"inset-block-start":makeTransform(transformOffset(s)),"inset-block-end":makeTransform(transformOffset(c)),"inset-inline":makeTransform(transformOffsetShorthand(u.inline)),"inset-inline-start":makeTransform(transformOffset(d)),"inset-inline-end":makeTransform(transformOffset(f)),inset:makeTransform((r=>{const o=e(r.value).nodes.filter((r=>"space"!==r.type&&"comment"!==r.type));if(o.length>4){const e=`[postcss-logical] Invalid number of values for ${r.prop}. Found ${o.length} values, expected up to 4 values.`;throw r.error(e)}const n={top:"",right:"",bottom:"",left:""};return 1===o.length&&(n.top=e.stringify(o[0]),n.right=n.top,n.bottom=n.top,n.left=n.top),2===o.length&&(n.top=e.stringify(o[0]),n.right=e.stringify(o[1]),n.bottom=n.top,n.left=n.right),3===o.length&&(n.top=e.stringify(o[0]),n.right=e.stringify(o[1]),n.left=n.right,n.bottom=e.stringify(o[2])),4===o.length&&(n.top=e.stringify(o[0]),n.right=e.stringify(o[1]),n.bottom=e.stringify(o[2]),n.left=e.stringify(o[3])),Object.keys(n).forEach((o=>{cloneDeclaration(r,n[o],o)})),!0})),"padding-block-start":makeTransform(transformSide("padding",s)),"padding-block-end":makeTransform(transformSide("padding",c)),"padding-inline-start":makeTransform(transformSide("padding",d)),"padding-inline-end":makeTransform(transformSide("padding",f)),"padding-block":makeTransform(transformSideShorthand("padding",u.block)),"padding-inline":makeTransform(transformSideShorthand("padding",u.inline)),"border-block-start-width":makeTransform(transformBorder("width",s)),"border-block-end-width":makeTransform(transformBorder("width",c)),"border-inline-start-width":makeTransform(transformBorder("width",d)),"border-inline-end-width":makeTransform(transformBorder("width",f)),"border-block-width":makeTransform(transformBorderProperty("width",u.block)),"border-inline-width":makeTransform(transformBorderProperty("width",u.inline)),"border-block-start-style":makeTransform(transformBorder("style",s)),"border-block-end-style":makeTransform(transformBorder("style",c)),"border-inline-start-style":makeTransform(transformBorder("style",d)),"border-inline-end-style":makeTransform(transformBorder("style",f)),"border-block-style":makeTransform(transformBorderProperty("style",u.block)),"border-inline-style":makeTransform(transformBorderProperty("style",u.inline)),"border-block-start-color":makeTransform(transformBorder("color",s)),"border-block-end-color":makeTransform(transformBorder("color",c)),"border-inline-start-color":makeTransform(transformBorder("color",d)),"border-inline-end-color":makeTransform(transformBorder("color",f)),"border-block-color":makeTransform(transformBorderProperty("color",u.block)),"border-inline-color":makeTransform(transformBorderProperty("color",u.inline)),"border-block":makeTransform(transformBorderShorthand(u.block)),"border-block-start":makeTransform(transformBorderShorthand([s])),"border-block-end":makeTransform(transformBorderShorthand([c])),"border-inline":makeTransform(transformBorderShorthand(u.inline)),"border-inline-start":makeTransform(transformBorderShorthand([d])),"border-inline-end":makeTransform(transformBorderShorthand([f])),"border-start-start-radius":makeTransform(transformBorderRadius(u)),"border-start-end-radius":makeTransform(transformBorderRadius(u)),"border-end-start-radius":makeTransform(transformBorderRadius(u)),"border-end-end-radius":makeTransform(transformBorderRadius(u))}};var b,m};creator.postcss=!0,module.exports=creator;
