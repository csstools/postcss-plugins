// "@webref/css": "^3.0.6",
// "@mdn/browser-compat-data": "^4.1.8"

// Only needed to be generated once.
// This is only included as reference.
// New CSS properties added in the future do not need this plugin as all browsers now support "unset".

import css from '@webref/css';
import mdn from '@mdn/browser-compat-data';
import { promises as fsp } from 'fs';

const inherited = new Set();
const nonInherited = new Set();

generate();
async function generate() {
	const parsedFiles = await css.listAll();
	for (const [specName, data] of Object.entries(parsedFiles)) {
		for (const propertyName in data.properties) {
			const property = data.properties[propertyName];
			if (property.name.indexOf('-') === 0) {
				// vendor prefix
				continue;
			}

			// Property was introduced after "unset"
			if (mdn.css.properties[property.name] && mdn.css.properties[property.name].__compat && unsetPredatesProperty(mdn.css.properties[property.name].__compat.support)) {
				continue;
			}

			if (property.name === 'list-style') {
				// Shorthand, manually set to "inherited" to match long form properties.
				inherited.add(propertyName);
				continue;
			}

			if (property.name === 'caption-side' || property.name === 'text-align') {
				// Received new values and has two entries, still "inherited".
				inherited.add(propertyName);
				continue;
			}

			if (property.name === 'fill' && specName === 'fill-stroke') {
				// Shorthand, manually set to "inherited" to match long form properties.
				inherited.add(propertyName);
				continue;
			}

			if (property.name === 'stroke' && specName === 'fill-stroke') {
				// Shorthand, manually set to "inherited" to match long form properties.
				inherited.add(propertyName);
				continue;
			}

			if (property.inherited === 'yes') {
				inherited.add(property.name);
				if (nonInherited.has(property.name)) {
					console.error(`${property.name} is already defined as non-inherited`);
					process.exit(1);
				}
			} else {
				nonInherited.add(property.name);
				if (inherited.has(property.name)) {
					console.error(`${property.name} is already defined as inherited`);
					process.exit(1);
				}
			}
		}
	}

	await fsp.writeFile(
		'src/property-def.ts',
		`// This file is generated by generate/property-def.mjs
export const inherited : Set<string> = new Set(${JSON.stringify(Array.from(inherited.values()))});

export const nonInherited : Set<string> = new Set(${JSON.stringify(Array.from(nonInherited.values()))});
`,
	);
}

function unsetPredatesProperty(support) {
	if (browserSupport(support.ie).version_added) {
		// Supported in IE, definitely not introduced after "unset"
		return false;
	}

	const browsers = [
		'chrome',
		'chrome_android',
		'edge',
		'firefox',
		'firefox_android',
		'ie',
		'opera',
		'opera_android',
		'safari',
		'safari_ios',
		'samsunginternet_android',
		'webview_android',
	];

	for (const browser of browsers) {
		if (parseFloat(browserSupport(support[browser]).version_added) < mdnDataForUnset.__compat.support[browser].version_added) {
			// Supported in this browser, definitely not introduced after "unset"
			return false;
		}
	}

	return true;
}

function browserSupport(x) {
	if (Array.isArray(x)) {
		x.sort((a, b) => parseFloat(a.version_added) - parseFloat(b.version_added));
		x = x.filter((x) => x.version_added && !x.alternative_name);

		return x.find((y) => y.version_added) || {};
	}

	return x;
}

const mdnDataForUnset = {
	'__compat': {
		'mdn_url': 'https://developer.mozilla.org/docs/Web/CSS/unset',
		'spec_url': 'https://drafts.csswg.org/css-cascade/#inherit-initial',
		'support': {
			'chrome': {
				'version_added': 41,
			},
			'chrome_android': {
				'version_added': 41,
			},
			'edge': {
				'version_added': 13,
			},
			'firefox': {
				'version_added': 27,
			},
			'firefox_android': {
				'version_added': 27,
			},
			'ie': {
				'version_added': false,
			},
			'opera': {
				'version_added': 28,
			},
			'opera_android': {
				'version_added': 28,
			},
			'safari': {
				'version_added': 9.1,
			},
			'safari_ios': {
				'version_added': 9.3,
			},
			'samsunginternet_android': {
				'version_added': 4.0,
			},
			'webview_android': {
				'version_added': 41,
			},
		},
		'status': {
			'experimental': false,
			'standard_track': true,
			'deprecated': false,
		},
	},
};
