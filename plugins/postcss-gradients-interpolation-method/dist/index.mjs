import e from"@csstools/postcss-progressive-custom-properties";import o from"postcss-value-parser";function colorStopList(e,n){const t=[];let r={color:"",colorStopLength:"",colorHintBetween:[],nodes:[]};for(let o=0;o<e.length;o++){const n=e[o];"div"!==n.type||","!==n.value?r.nodes.push(n):(t.push(r),r={color:"",colorStopLength:"",colorHintBetween:[],nodes:[]})}t.push(r);const s=[];for(let e=0;e<t.length;e++){const n=t[e];switch(n.nodes.length){case 0:break;case 1:return!1;case 2:n.color=o.stringify(n.nodes[0]),n.colorStopLength=o.stringify(n.nodes[1]),s.push(n);break;case 3:s.push({color:o.stringify(n.nodes[0]),colorStopLength:o.stringify(n.nodes[1]),colorHintBetween:[],nodes:[n.nodes[0],n.nodes[1]]}),s.push({color:o.stringify(n.nodes[0]),colorStopLength:o.stringify(n.nodes[2]),colorHintBetween:[],nodes:[n.nodes[0],n.nodes[2]]})}}for(let e=0;e<s.length;e++){const o=s[e];o.color||(o.color=`color-mix(in ${n}, ${s[e-1].color} 50%, ${s[e+1].color} 50%)`,o.colorHintBetween=[s[e-1],s[e+1]])}return s}function includesGradientsFunction(e){return e.includes("in ")&&(e.includes("conic-gradient(")||e.includes("linear-gradient(")||e.includes("radial-gradient(")||e.includes("repeating-conic-gradient(")||e.includes("repeating-linear-gradient(")||e.includes("repeating-radial-gradient("))}function hasSupportsAtRuleAncestor(e){let o=e.parent;for(;o;)if("atrule"===o.type){if("supports"===o.name&&includesGradientsFunction(o.params))return!0;o=o.parent}else o=o.parent;return!1}const n=["shorter","longer","increasing","decreasing","specified"],basePlugin=e=>({postcssPlugin:"postcss-gradients-interpolation-method",Declaration(t,{result:r}){if(!includesGradientsFunction(t.value))return;if(hasSupportsAtRuleAncestor(t))return;let s;try{s=o(t.value)}catch(e){t.warn(r,`Failed to parse value '${t.value}' as a CSS gradient. Leaving the original value intact.`)}if(void 0===s)return;let i=!1;if(s.walk((e=>{if("function"!==e.type||"conic-gradient"!==(t=e.value)&&"linear-gradient"!==t&&"radial-gradient"!==t&&"repeating-conic-gradient"!==t&&"repeating-linear-gradient"!==t&&"repeating-radial-gradient"!==t)return;var t;const r=e.nodes.filter((e=>"comment"!==e.type&&"space"!==e.type)),s={interpolationArguments:[],argumentsRemainder:[],colorStops:[]};for(let e=0;e<r.length;e++){const t=r[e];if("div"===t.type&&","===t.value){const n=s.interpolationArguments.map((e=>o.stringify(e))).join(" "),t=colorStopList(r.slice(e),n);if(t){s.colorStops=t;break}n&&(i=!0);break}if("word"===t.type&&"in"===t.value&&r[e+1]){if(s.interpolationArguments.push(r[e+1]),e++,r[e+1]&&"word"===r[e+1].type&&n.includes(r[e+1].value)){s.interpolationArguments.push(r[e+1]),e++;continue}}else s.argumentsRemainder.push(t)}if(!s.interpolationArguments.length||!s.colorStops.length)return;e.nodes=[],s.argumentsRemainder.length&&(e.nodes.push(...s.argumentsRemainder.flatMap((e=>[e,{type:"space",value:" ",sourceIndex:0,sourceEndIndex:0}]))),e.nodes.push({type:"div",value:",",before:"",after:"",sourceIndex:0,sourceEndIndex:0}));const l=s.interpolationArguments.map((e=>o.stringify(e))).join(" ");for(let n=0;n<s.colorStops.length;n++){const t=s.colorStops[n],r=s.colorStops[n+1];if(r)if(t.color!==r.color)for(let n=0;n<10;n++){if(0===n){e.nodes.push(...o(`${t.color} ${t.colorStopLength}`).nodes,{type:"div",value:",",before:"",after:"",sourceIndex:0,sourceEndIndex:0});continue}const s=`color-mix(in ${l}, ${t.color} ${100-10*n}%, ${r.color} ${10*n}%)`,i=`calc(${t.colorStopLength} + ((${r.colorStopLength} - ${t.colorStopLength}) * ${n/10}))`;e.nodes.push(...o(`${s} ${i}`).nodes,{type:"div",value:",",before:"",after:"",sourceIndex:0,sourceEndIndex:0})}else e.nodes.push(...o(`${t.color} ${t.colorStopLength}`).nodes,{type:"div",value:",",before:"",after:"",sourceIndex:0,sourceEndIndex:0});else e.nodes.push(...o(`${t.color} ${t.colorStopLength}`).nodes)}})),i)return void t.warn(r,`Failed to parse value '${t.value}' as a CSS gradient with interpolation. Leaving the original value intact.`);const l=o.stringify(s.nodes);l!==t.value&&(null!=e&&e.preserve?t.cloneBefore({prop:t.prop,value:l}):t.value=l)}});basePlugin.postcss=!0;const postcssPlugin=o=>{const n=Object.assign({enableProgressiveCustomProperties:!0,preserve:!0},o);return n.enableProgressiveCustomProperties&&n.preserve?{postcssPlugin:"postcss-gradients-interpolation-method",plugins:[e(),basePlugin(n)]}:basePlugin(n)};postcssPlugin.postcss=!0;export{postcssPlugin as default};
