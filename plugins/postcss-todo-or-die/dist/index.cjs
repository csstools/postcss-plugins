"use strict";var e=require("browserslist"),o=require("@csstools/css-tokenizer"),t=require("@csstools/css-parser-algorithms");function died(e){return"string"==typeof e}function matchBeforeDateCondition(e,o,t){const n=new Date;n.setUTCFullYear(e),n.setUTCMonth(o),n.setUTCDate(t);return(new Date).getTime()<n.getTime()||`Died because ${e}-${o}-${t} is in the past`}function matchBrowserslistCondition(o,t){const n=e(o);for(let e=0;e<n.length;e++){const o=n[e];if(t.has(o))return!0}return`Died because the browsers matching "${o}" do not have any overlap with your project browserslist`}function matchIfCondition(e){const t=e.a,n=e.b;if(!(t[0]!==n[0]||o.isTokenDimension(t)&&o.isTokenDimension(n)&&t[4].unit.toLowerCase()!==n[4].unit.toLowerCase())){switch(e.operator){case"<":if(t[4].value>=n[4].value)return`Died because A (${t[1]}) is no longer less than B (${n[1]})`;break;case">":if(t[4].value<=n[4].value)return`Died because A (${t[1]}) is no longer greater than B (${n[1]})`;break;case"=":if(t[4].value!==n[4].value)return`Died because A (${t[1]}) is no longer equal to B (${n[1]})`}return!0}}function matchNotCondition(e){const t=e.a,n=e.b;if(!(t[0]!==n[0]||o.isTokenDimension(t)&&o.isTokenDimension(n)&&t[4].unit.toLowerCase()!==n[4].unit.toLowerCase())){switch(e.operator){case"<":if(t[4].value<n[4].value)return`Died because A (${t[1]}) is less than B (${n[1]})`;break;case">":if(t[4].value>n[4].value)return`Died because A (${t[1]}) is greater than B (${n[1]})`;break;case"=":if(t[4].value===n[4].value)return`Died because A (${t[1]}) equals B (${n[1]})`}return!0}}function parseBeforeDateCondition(e){const n=e.value.filter((e=>!t.isWhitespaceNode(e)&&!t.isCommentNode(e)));if(n.length>3)return!1;const r=n[0],i=n[1],s=n[2];if(!r||!i||!s)return!1;if(!t.isTokenNode(r)||!t.isTokenNode(i)||!t.isTokenNode(s))return!1;const a=r.value,u=i.value,c=s.value;return!(!o.isTokenNumber(a)||a[4].type!==o.NumberType.Integer)&&(!(!o.isTokenNumber(u)||u[4].type!==o.NumberType.Integer)&&(!(!o.isTokenNumber(c)||c[4].type!==o.NumberType.Integer)&&{year:a[4].value,month:u[4].value,day:c[4].value}))}function parseBrowserslistCondition(e){const n=e.value.filter((e=>!t.isWhitespaceNode(e)&&!t.isCommentNode(e)));if(n.length>1)return!1;const r=n[0];if(!r)return!1;if(!t.isTokenNode(r))return!1;const i=r.value;return!!o.isTokenString(i)&&i[4].value}const n=[o.TokenType.Ident,o.TokenType.Number,o.TokenType.Percentage,o.TokenType.Dimension],r=["<",">","="];function parseIfCondition(e){const i=e.value.filter((e=>!t.isWhitespaceNode(e)&&!t.isCommentNode(e)));if(i.length>3)return!1;const s=i[0],a=i[1],u=i[2];if(!s||!a||!u)return!1;if(!t.isTokenNode(s)||!t.isTokenNode(a)||!t.isTokenNode(u))return!1;const c=s.value,d=a.value,l=u.value;return!!o.isTokenDelim(d)&&(!!r.includes(d[4].value)&&(!!n.includes(c[0])&&(!!n.includes(l[0])&&{a:c,b:l,operator:d[4].value})))}function parseNotCondition(e){const o=parseIfCondition(e);return!!o&&{a:o.a,b:o.b,operator:o.operator}}const creator=()=>{const n=new Set(e());return{postcssPlugin:"postcss-todo-or-die",Once(e,{result:r}){const i=[];e.walkAtRules((e=>{if("todo-or-die"===e.name.toLowerCase()){if(!e.params.trim())throw e.error("Rule must have valid params");i.push(e)}}));for(const e of i){const errorHandler=o=>{throw e.error(o.message)},i=o.tokenize({css:e.params},{onParseError:errorHandler}),s=t.parseCommaSeparatedListOfComponentValues(i,{onParseError:errorHandler});if(!s.length)return void e.warn(r,"Rule must have some valid params.");for(let o=0;o<s.length;o++){const i=s[o].filter((e=>!t.isWhitespaceNode(e)&&!t.isCommentNode(e)));if(1!==i.length)return void e.warn(r,"Conditions must be split by commas when adding multiple in a list.");if(!t.isFunctionNode(i[0]))return void e.warn(r,"Conditions must be one of the supported functions.");switch(i[0].name[4].value.toLowerCase()){case"if":{const o=parseIfCondition(i[0]);if(!o)return void e.warn(r,"Incorrect arguments in `if()` function.");const t=matchIfCondition(o);if(died(t))throw e.error(t);break}case"not":{const o=parseNotCondition(i[0]);if(!o)return void e.warn(r,"Incorrect arguments in `not()` function.");const t=matchNotCondition(o);if(died(t))throw e.error(t);break}case"browserslist":{const o=parseBrowserslistCondition(i[0]);if(!o)return void e.warn(r,"Incorrect arguments in `browserslist()` function.");const t=matchBrowserslistCondition(o,n);if(died(t))throw e.error(t);break}case"before-date":{const o=parseBeforeDateCondition(i[0]);if(!o)return void e.warn(r,"Incorrect arguments in `before-date()` function.");const t=matchBeforeDateCondition(o.year,o.month,o.day);if(died(t))throw e.error(t);break}}}e.nodes?e.replaceWith(e.nodes):e.remove()}}}};creator.postcss=!0,module.exports=creator;
