import e from"browserslist";import{TokenType as t,NumberType as r,tokenizer as n}from"@csstools/css-tokenizer";import{isWhitespaceNode as o,isCommentNode as s,isTokenNode as i,parseCommaSeparatedListOfComponentValues as a,isFunctionNode as u}from"@csstools/css-parser-algorithms";function died(e){return"string"==typeof e}function matchBeforeDateCondition(e,t,r){const n=new Date;n.setUTCFullYear(e),n.setUTCMonth(t),n.setUTCDate(r);return(new Date).getTime()<n.getTime()||`Died because ${e}-${t}-${r} is in the past`}function matchBrowserslistCondition(t,r){const n=e(t);for(let e=0;e<n.length;e++){const t=n[e];if(r.has(t))return!0}return`Died because the browsers matching "${t}" do not have any overlap with your project browserslist`}function matchIfCondition(e){const r=e.a,n=e.b;if(r[0]===n[0]&&(r[0]!==t.Dimension||n[0]!==t.Dimension||r[4].unit.toLowerCase()===n[4].unit.toLowerCase())){switch(e.operator){case"<":if(r[4].value>=n[4].value)return`Died because A (${r[1]}) is no longer less than B (${n[1]})`;break;case">":if(r[4].value<=n[4].value)return`Died because A (${r[1]}) is no longer greater than B (${n[1]})`;break;case"=":if(r[4].value!==n[4].value)return`Died because A (${r[1]}) is no longer equal to B (${n[1]})`}return!0}}function matchNotCondition(e){const r=e.a,n=e.b;if(r[0]===n[0]&&(r[0]!==t.Dimension||n[0]!==t.Dimension||r[4].unit.toLowerCase()===n[4].unit.toLowerCase())){switch(e.operator){case"<":if(r[4].value<n[4].value)return`Died because A (${r[1]}) is less than B (${n[1]})`;break;case">":if(r[4].value>n[4].value)return`Died because A (${r[1]}) is greater than B (${n[1]})`;break;case"=":if(r[4].value===n[4].value)return`Died because A (${r[1]}) equals B (${n[1]})`}return!0}}function parseBeforeDateCondition(e){const n=e.value.filter((e=>!o(e)&&!s(e)));if(n.length>3)return!1;const a=n[0],u=n[1],c=n[2];if(!a||!u||!c)return!1;if(!i(a)||!i(u)||!i(c))return!1;const l=a.value,f=u.value,d=c.value;return l[0]===t.Number&&l[4].type===r.Integer&&(f[0]===t.Number&&f[4].type===r.Integer&&(d[0]===t.Number&&d[4].type===r.Integer&&{year:l[4].value,month:f[4].value,day:d[4].value}))}function parseBrowserslistCondition(e){const r=e.value.filter((e=>!o(e)&&!s(e)));if(r.length>1)return!1;const n=r[0];if(!n)return!1;if(!i(n))return!1;const a=n.value;return a[0]===t.String&&a[4].value}const c=[t.Ident,t.Number,t.Percentage,t.Dimension],l=["<",">","="];function parseIfCondition(e){const r=e.value.filter((e=>!o(e)&&!s(e)));if(r.length>3)return!1;const n=r[0],a=r[1],u=r[2];if(!n||!a||!u)return!1;if(!i(n)||!i(a)||!i(u))return!1;const f=n.value,d=a.value,m=u.value;return d[0]===t.Delim&&(!!l.includes(d[4].value)&&(!!c.includes(f[0])&&(!!c.includes(m[0])&&{a:f,b:m,operator:d[4].value})))}function parseNotCondition(e){const t=parseIfCondition(e);return!!t&&{a:t.a,b:t.b,operator:t.operator}}const creator=()=>{const t=new Set(e());return{postcssPlugin:"postcss-todo-or-die",async Once(e,{result:r}){const i=[];e.walkAtRules((e=>{if("todo-or-die"===e.name.toLowerCase()){if(!e.params.trim())throw e.error("Rule must have valid params");i.push(e)}}));for(const e of i){const errorHandler=t=>{throw e.error(t.message)},i=n({css:e.params},{onParseError:errorHandler}),c=[];for(;!i.endOfFile();)c.push(i.nextToken());c.push(i.nextToken());const l=a(c,{onParseError:errorHandler});if(!l.length)return void e.warn(r,"Rule must have some valid params.");for(let n=0;n<l.length;n++){const i=l[n].filter((e=>!o(e)&&!s(e)));if(1!==i.length)return void e.warn(r,"Conditions must be split by commas when adding multiple in a list.");if(!u(i[0]))return void e.warn(r,"Conditions must be one of the supported functions.");switch(i[0].name[4].value.toLowerCase()){case"if":{const t=parseIfCondition(i[0]);if(!t)return void e.warn(r,"Incorrect arguments in `if()` function.");const n=matchIfCondition(t);if(died(n))throw e.error(n);break}case"not":{const t=parseNotCondition(i[0]);if(!t)return void e.warn(r,"Incorrect arguments in `not()` function.");const n=matchNotCondition(t);if(died(n))throw e.error(n);break}case"browserslist":{const n=parseBrowserslistCondition(i[0]);if(!n)return void e.warn(r,"Incorrect arguments in `browserslist()` function.");const o=matchBrowserslistCondition(n,t);if(died(o))throw e.error(o);break}case"before-date":{const t=parseBeforeDateCondition(i[0]);if(!t)return void e.warn(r,"Incorrect arguments in `before-date()` function.");const n=matchBeforeDateCondition(t.year,t.month,t.day);if(died(n))throw e.error(n);break}}}e.nodes&&e.nodes.length?e.replaceWith(e.nodes):e.remove()}}}};creator.postcss=!0;export{creator as default};
