input[active]:hover > b, input[active]:focus > b, button[active]:hover > b, button[active]:focus > b {
	order: 1;
}

input.a[active]:focus-within > b {
	order: 2;
}

input.b[active]:focus-within > b {
	order: 2;
}

input.c[active]:focus-within > b {
	order: 2;
}

input.d[active]:focus-within > b {
	order: 2;
}

button.a[active]:focus-within > b {
	order: 2;
}

button.b[active]:focus-within > b {
	order: 2;
}

button.c[active]:focus-within > b {
	order: 2;
}

button.d[active]:focus-within > b {
	order: 2;
}

input.a[active]:hover > b, input.b[active]:hover > b, input.c[active]:hover > b, input.d[active]:hover > b, input.a[active]:focus > b, input.b[active]:focus > b, input.c[active]:focus > b, input.d[active]:focus > b, button.a[active]:hover > b, button.b[active]:hover > b, button.c[active]:hover > b, button.d[active]:hover > b, button.a[active]:focus > b, button.b[active]:focus > b, button.c[active]:focus > b, button.d[active]:focus > b {
	order: 2;
}

a:hover, a:focus, button:hover, button:focus {
	order: 3;
}

a:hover, button:hover, a:focus, button:focus {
	order: 4;
}

button:focus-within {
	order: 5;
}

button:hover, button:focus {
	order: 5;
}

:not(.some, .other) {
	order: 6;
}

.button:hover, button:hover:not(.something-random), .button:focus, button:focus:not(.something-random) {
	order: 7;
}

button:hover, button:focus, input {
	order: 8;
}

foo[baz=":is(.some, .other)"], .ok {
	order: 9;
}

.alpha:focus > .beta + .beta {
	order: 10;
}

.alpha > .beta.pre + :is(:focus > .beta) {
	order: 11;
}

.pre :is(.alpha > .beta)+ :is(:focus > .beta) {
	order: 12;
}

.alpha > .beta.post + :is(:focus > .beta) {
	order: 13;
}

.alpha > .beta .post + :is(:focus > .beta) {
	order: 14;
}

.alpha ~ .delta:focus > .beta + .beta {
	order: 15;
}

.alpha:focus > .beta + .beta, .alpha:focus > .beta + .two, .one:focus > .two + .beta, .one:focus > .two + .two {
	order: 16;
}

.alpha:focus > .beta ~ .beta {
	order: 17;
}

.alpha .beta > h1:not([attr*="foo-"]), .alpha .beta > h2:not([attr*="foo-"]), .alpha .beta > h3:not([attr*="foo-"]), .alpha .beta > h4:not([attr*="foo-"]), .alpha .beta > h5:not([attr*="foo-"]), .alpha .beta > h6:not([attr*="foo-"]) {
	order: 18;
}

.one > .two.alpha {
	order: 19;
}

.one > .two.pre.alpha {
	order: 20;
}

.pre .alpha:is(.one > .two) {
	order: 21;
}

a:not(.something-random), .e a, .e b {
	order: 22;
}

.empty-is:not(*) {
	order: 23;
}

.invalid-is:is {
	order: 24;
}

a:hover, a:focus, button:hover, button:focus {
	order: 25;
}

a:hover::before {
	order: 26;
}

a:focus::before {
	order: 26;
}

button:hover::before {
	order: 26;
}

button:focus::before {
	order: 26;
}

a:hover, a:focus, button:hover, button:focus {
	order: 27;
}

a:hover:before {
	order: 28;
}

a:focus:before {
	order: 28;
}

button:hover:before {
	order: 28;
}

button:focus:before {
	order: 28;
}

.foo:lang(ae, ar, arc, bcc, bqi, ckb, dv, fa, glk, he, ku, mzn, nqo, pnb, ps, sd, ug, ur, yi) {
	order: 29;
}

.bar:not(.something-random) {
	order: 29;
}

::before:hover {
	order: 30;
}

::before:focus {
	order: 30;
}

:hover::after {
	order: 31;
}

:focus::after {
	order: 31;
}

ol:focus-visible > li.foo {
	order: 32
}

ol:focus-visible > li.bar {
	order: 32
}

ul:focus-visible > li.foo {
	order: 32
}

ul:focus-visible > li.bar {
	order: 32
}

ol:hover > li.foo, ol:hover > li.bar, ol:focus > li.foo, ol:focus > li.bar, ul:hover > li.foo, ul:hover > li.bar, ul:focus > li.foo, ul:focus > li.bar {
	order: 32
}

.all.mixed:not(.something-random):not(.something-random),.all.caps.nested:focus,.caps.mixed:not(.something-random):not(.something-random),.caps.caps.nested:focus {
	order: 33;
}

:not(h1, h2, h3) {
	order: 34;
}

:not(h1, h2, h3) {
	order: 35;
}

:has(:is(h1, h2, h3)) {
	order: 36;
}

input:is(select) {
	order: 37;
}

input:is(textarea) {
	order: 37;
}

button:is(select) {
	order: 37;
}

button:is(textarea) {
	order: 37;
}

h1.a, h2.a, h3.a, h4.a, h5.a, h6.a, .a h1, .a h2, .a h3, .a h4, .a h5, .a h6 {
	order: 38;
}

input:hover, input:focus, button:hover, button:focus {
	to-clone: 1;
}

.a header.b {
	color: green;
}

>:is(.a .b) {
	color: green;
}

:has(:is(.foo .bar)) {
	color: green;
}

:has( .fooz .bar,:is(.foo .bar)) {
	color: green;
}

:has(:is(.foo .bar) .fooz) {
	color: green;
}
