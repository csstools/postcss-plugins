import s from"@csstools/postcss-progressive-custom-properties";import{tokenize as o}from"@csstools/css-tokenizer";import{color as t,SyntaxFlag as e,serializeHSL as r,serializeRGB as a}from"@csstools/css-color-parser";import{hasFallback as n,hasSupportsAtRuleAncestor as l}from"@csstools/utilities";import{replaceComponentValues as c,parseCommaSeparatedListOfComponentValues as i,isFunctionNode as p,stringify as g}from"@csstools/css-parser-algorithms";const u=/^(?:rgb|hsl)a?$/i,m=/\b(?:rgb|hsl)a?\(/i,basePlugin=s=>({postcssPlugin:"postcss-color-functional-notation",Declaration:f=>{const h=f.value;if(!m.test(h))return;if(n(f))return;if(l(f,m))return;const v=c(i(o({css:h})),(s=>{if(!p(s)||!u.test(s.getName()))return;const o=t(s);return!o||o.syntaxFlags.has(e.Experimental)||o.syntaxFlags.has(e.HasNoneKeywords)||o.syntaxFlags.has(e.RelativeColorSyntax)||(o.syntaxFlags.has(e.LegacyRGB)||o.syntaxFlags.has(e.LegacyHSL))&&!o.syntaxFlags.has(e.HasPercentageAlpha)?void 0:"hsl"===o.colorNotation?r(o):a(o)})),y=g(v);y!==h&&(f.cloneBefore({value:y}),s?.preserve||f.remove())}});basePlugin.postcss=!0;const postcssPlugin=o=>{const t=Object.assign({preserve:!1,enableProgressiveCustomProperties:!0},o);return t.enableProgressiveCustomProperties&&t.preserve?{postcssPlugin:"postcss-color-functional-notation",plugins:[s(),basePlugin(t)]}:basePlugin(t)};postcssPlugin.postcss=!0;export{postcssPlugin as default};
