"use strict";var e=require("@csstools/css-parser-algorithms"),t=require("@csstools/css-tokenizer");const o=new Map([["thin",100],["extra-light",200],["extralight",200],["ultra-light",200],["ultralight",200],["light",300],["book",400],["normal",400],["regular",400],["roman",400],["medium",500],["semi-bold",600],["semibold",600],["demi-bold",600],["demibold",600],["bold",700],["extra-bold",800],["extrabold",800],["ultra-bold",800],["ultrabold",800],["black",900],["heavy",900]]),creator=r=>{const s=r?.prefix?`-${r.prefix}-`:"",i=new RegExp(`^${s}(font(-weight)?)$`,"i");let n=o;if(r?.weights){n=new Map(o);for(const[e,t]of Object.entries(r.weights))n.set(e,t)}const l=new RegExp(`(${Array.from(n.keys()).join("|")})`,"i");return{postcssPlugin:"postcss-font-weights",Declaration(o){if(!i.test(o.prop))return;{const e=o.prop.match(i)?.[1];s&&e&&(o.prop=e)}if(!l.test(o.value))return;const r=e.replaceComponentValues(e.parseCommaSeparatedListOfComponentValues(t.tokenize({css:o.value})),(o=>{if(!e.isTokenNode(o)||!t.isTokenIdent(o.value))return;const r=o.value[4].value.toLowerCase(),s=n.get(r);return s?new e.TokenNode([t.TokenType.Number,s.toString(),-1,-1,{value:s,type:t.NumberType.Integer}]):void 0})),a=e.stringify(r);a!==o.value&&(o.value=a)}}};creator.postcss=!0,module.exports=creator;
