import{replaceComponentValues as t,parseCommaSeparatedListOfComponentValues as e,isTokenNode as o,TokenNode as r,stringify as s}from"@csstools/css-parser-algorithms";import{tokenize as l,isTokenIdent as i,TokenType as a,NumberType as n}from"@csstools/css-tokenizer";const u=new Map([["thin",100],["extra-light",200],["extralight",200],["ultra-light",200],["ultralight",200],["light",300],["book",400],["normal",400],["regular",400],["roman",400],["medium",500],["semi-bold",600],["semibold",600],["demi-bold",600],["demibold",600],["bold",700],["extra-bold",800],["extrabold",800],["ultra-bold",800],["ultrabold",800],["black",900],["heavy",900]]),creator=p=>{const c=p?.prefix?`-${p.prefix}-`:"",g=new RegExp(`^${c}(font(-weight)?)$`,"i");let m=u;if(p?.weights){m=new Map(u);for(const[t,e]of Object.entries(p.weights))m.set(t,e)}const d=new RegExp(`(${Array.from(m.keys()).join("|")})`,"i");return{postcssPlugin:"postcss-font-weights",Declaration(u){if(!g.test(u.prop))return;{const t=u.prop.match(g)?.[1];c&&t&&(u.prop=t)}if(!d.test(u.value))return;const p=t(e(l({css:u.value})),(t=>{if(!o(t)||!i(t.value))return;const e=t.value[4].value.toLowerCase(),s=m.get(e);return s?new r([a.Number,s.toString(),-1,-1,{value:s,type:n.Integer}]):void 0})),f=s(p);f!==u.value&&(u.value=f)}}};creator.postcss=!0;export{creator as default};
