import r from"@csstools/postcss-progressive-custom-properties";import{hasFallback as o,hasSupportsAtRuleAncestor as e}from"@csstools/utilities";import{TokenType as s,tokenize as t,NumberType as n}from"@csstools/css-tokenizer";import{isFunctionNode as c,isWhitespaceNode as a,isCommentNode as l,isTokenNode as u,replaceComponentValues as i,parseCommaSeparatedListOfComponentValues as p,FunctionNode as f,TokenNode as m,stringify as v}from"@csstools/css-parser-algorithms";import{color as C,serializeRGB as E,serializeP3 as d}from"@csstools/css-color-parser";import{contrast_ratio_wcag_2_1 as g}from"@csstools/color-helpers";const P=/^contrast-color$/i;function parseContrastColor(r){if(!c(r)||!P.test(r.getName()))return!1;const o=r.value.filter((r=>!a(r)&&!l(r)));if(o.length>2)return!1;const e=o[0],t=o[1];return!!e&&(t?!(!u(t)||t.value[0]!==s.Ident||"max"!==t.value[4].value.toLowerCase())&&[e,"max"]:[e])}var h;!function(r){r[r.MORE=0]="MORE",r[r.LESS=1]="LESS",r[r.NO_PREFERENCE=2]="NO_PREFERENCE"}(h||(h={}));const R=/\bcontrast-color\(/i;function transformContrastColor(r,o,e=0){const c=i(p(t({css:r})),(r=>{const e=parseContrastColor(r);if(!e)return;const[t,c]=e;if("max"===c){const o=C(r);if(!o)return;return E(o,!0)}if(c)return;const a=C(new f([s.Function,"contrast-color(",-1,-1,{value:"contrast-color"}],[s.CloseParen,")",-1,-1,void 0],[t,new m([s.Ident,"max",-1,-1,{value:"max"}])]));if(!a)return;if(o===h.MORE)return E(a,!0);const l=C(t);if(!l)return;let u=0;const i=C(E(l,!0));if(!i)return;{const r=g(i.channels,[0,0,0]),e=g(i.channels,[1,1,1]);u=o===h.LESS?r>=e?.3:.9:r>=e?.2:.95}const p=C(new f([s.Function,"oklch(",-1,-1,{value:"oklch"}],[s.CloseParen,")",-1,-1,void 0],[new m([s.Ident,"from",-1,-1,{value:"from"}]),t,new m([s.Number,u.toString(),-1,-1,{value:u,type:n.Number}]),new m([s.Ident,"c",-1,-1,{value:"c"}]),new m([s.Ident,"h",-1,-1,{value:"h"}])]));if(!p)return;const v=C(E(p,!0));if(!v)return;return g(i.channels,v.channels)<4.5?E(a,!0):d(p,!0)})),a=v(c);return a===r?r:e>10?a:R.test(a)?transformContrastColor(a,o,e+1):a}const basePlugin=r=>({postcssPlugin:"postcss-contrast-color-function",prepare:()=>({postcssPlugin:"postcss-contrast-color-function",Declaration(s,{atRule:t}){const n=s.parent;if(!n)return;if(!R.test(s.value))return;if(o(s))return;if(e(s,R))return;const c=transformContrastColor(s.value,h.NO_PREFERENCE);if(c===s.value)return;const a=transformContrastColor(s.value,h.LESS);if(a===s.value)return;const l=transformContrastColor(s.value,h.MORE);if(l!==s.value){if(s.cloneBefore({value:c}),c!==a){const o=n.clone();o.removeAll(),o.append(s.clone({value:a}));const e=t({name:"media",params:"(prefers-contrast: less)",source:n.source});if(e.append(o),r?.preserve){const r=t({name:"supports",params:"not (color: contrast-color(red max))",source:n.source});r.append(e),n.after(r)}else n.after(e)}if(c!==l){const o=n.clone();o.removeAll(),o.append(s.clone({value:l}));const e=t({name:"media",params:"(prefers-contrast: more)",source:n.source});if(e.append(o),r?.preserve){const r=t({name:"supports",params:"not (color: contrast-color(red max))",source:n.source});r.append(e),n.after(r)}else n.after(e)}r?.preserve||s.remove()}}})});basePlugin.postcss=!0;const postcssPlugin=o=>{const e=Object.assign({enableProgressiveCustomProperties:!0,preserve:!0},o);return e.enableProgressiveCustomProperties&&e.preserve?{postcssPlugin:"postcss-contrast-color-function",plugins:[r(),basePlugin(e)]}:basePlugin(e)};postcssPlugin.postcss=!0;export{postcssPlugin as default};
