import{parseCommaSeparatedListOfComponentValues as e,isSimpleBlockNode as n,isFunctionNode as t,isTokenNode as r,isCommentNode as a,TokenNode as o,FunctionNode as s,WhitespaceNode as i}from"@csstools/css-parser-algorithms";import{calcFromComponentValues as l}from"@csstools/css-calc";import{tokenize as c,TokenType as u,stringify as v,NumberType as m}from"@csstools/css-tokenizer";const p=/(repeating-)?(linear|radial|conic)-gradient\(/i,f=/^(repeating-)?(linear|radial|conic)-gradient$/i,g=/^(abs|acos|asin|atan|atan2|calc|clamp|cos|exp|hypot|log|max|min|mod|pow|rem|round|sign|sin|sqrt|tan)$/i,creator=n=>{const s=Object.assign({preserve:!1},n);return{postcssPlugin:"postcss-gradient-stop-increments",Declaration(n){if(!p.test(n.value))return;if(!c({css:n.value}).find((e=>e[0]===u.Delim&&"+"===e[4].value)))return;const i=replaceComponentValues(e(c({css:n.value})),(e=>{if(!t(e))return;const n=e.getName();if(!f.test(n))return;let s=null;for(let n=0;n<e.value.length;n++){const i=e.value[n];if(r(i)&&i.value[0]===u.Delim&&"+"===i.value[4].value){const t=i,r=n;for(;a(e.value[n+1]);)n++;if(n++,isZeroOrNegative(e.value[n])){const t=new o([u.Number,"0",-1,-1,{value:0,type:m.Integer}]);e.value.splice(r,n-r+1,t),n=e.value.indexOf(t);continue}const l=incrementLengthNode(s,t,e.value[n]);e.value.splice(r,n-r+1,l),s=l,n=e.value.indexOf(l)}else(isNumericLargerThanZero(i)||t(i)&&g.test(i.getName()))&&(s=progressLengthNode(s,i))}})).map((e=>e.map((e=>v(...e.tokens()))).join(""))).join(",");i!==n.value&&(n.cloneBefore({value:i}),null!=s&&s.preserve||n.remove())}}};function isNumericLargerThanZero(e){return!(!r(e)||e.value[0]!==u.Percentage&&e.value[0]!==u.Dimension&&e.value[0]!==u.Number||!(e.value[4].value>0))}function isZeroOrNegative(e){return!(!r(e)||e.value[0]!==u.Percentage&&e.value[0]!==u.Dimension&&e.value[0]!==u.Number||!(e.value[4].value<=0))}function incrementLengthNode(e,n,t){if(!e)return t;const r=new s([u.Function,"calc(",-1,-1,{value:"calc"}],[u.CloseParen,")",-1,-1,void 0],[e,new i([[u.Whitespace," ",-1,-1,void 0]]),n,new i([[u.Whitespace," ",-1,-1,void 0]]),t]),[[a]]=l([[r]]);return a}function progressLengthNode(e,n){if(!e)return n;const t=new s([u.Function,"max(",-1,-1,{value:"max"}],[u.CloseParen,")",-1,-1,void 0],[e,new o([u.Comma,",",-1,-1,void 0]),new i([[u.Whitespace," ",-1,-1,void 0]]),n]),[[r]]=l([[t]]);return r}function replaceComponentValues(e,r){for(let a=0;a<e.length;a++){const o=e[a];for(let e=0;e<o.length;e++){const a=o[e];{const n=r(a);if(n){o.splice(e,1,n);continue}}(n(a)||t(a))&&a.walk(((e,n)=>{if("number"!=typeof n)return;const t=e.node,a=r(t);a&&e.parent.value.splice(n,1,a)}))}}return e}creator.postcss=!0;export{creator as default};
