import e from"postcss-selector-parser";function t(e){if(!e.nodes.length)return void e.remove();const t=e.nodes.filter((e=>"comment"===e.type));t.length===e.nodes.length&&e.replaceWith(...t)}function n(e,n){const r=n.index(e);if(r){const e=n.cloneBefore().removeAll().append(n.nodes.slice(0,r));e.raws.semicolon=!0,t(e)}n.before(e),n.raws.semicolon=!0}function r(e){let t=-1;e.each(((n,r)=>{if("decl"===n.type){if(-1===t)return void(t=r);if(t===r-1)return void(t=r);n.remove(),e.insertAfter(t,n),t=e.index(n)}}))}function o(o,s,c){let i=[];try{i=function(t,n,r,o){const s=[];if(0===o.length)return;const c=e().astSync(`:is(${r.join(",")})`);for(let r=0;r<o.length;r++){const i=e().astSync(o[r]);if(!i)continue;let l=!1;if(i.walk((e=>{"nesting"===e.type&&(l=!0)})),!l){const s=i.nodes[0];let c=!1;if(s.each((e=>"combinator"===e.type&&(c=!0,!1))),0===r){let e=!1;s.each((t=>"tag"===t.type&&(e=!0,!1))),e&&t.warn(n,`Invalid nested rule : "${o[r]}"`)}c||s.insertBefore(s.at(0),e.combinator({value:" "})),s.insertBefore(s.at(0),e.nesting({}))}i.walk((e=>{"nesting"===e.type&&e.replaceWith(c.clone({}))})),s.push(i.toString())}return s}(o,c,s.selectors,o.selectors)}catch(e){return void o.warn(c,`Failed to transform selectors : "${s.selector}" / "${o.selector}" with message: "${e.message}"`)}r(s),n(o,s),o.selectors=i;"rule"===o.type&&"rule"===s.type&&o.selector===s.selector&&o.append(...s.nodes),t(s)}var s=["container","document","media","supports","layer"];function c(e){const t=[];let n="",r=!1,o=0,s=!1,c=!1;for(const i of e)c?c=!1:"\\"===i?c=!0:s?i===s&&(s=!1):'"'===i||"'"===i?s=i:"("===i?o+=1:")"===i?o>0&&(o-=1):0===o&&","===i&&(r=!0),r?(""!==n&&t.push(n.trim()),n="",r=!1):n+=i;return t.push(n.trim()),t}function i(e,o){var s,i;r(o),n(e,o),e.params=(s=o.params,i=e.params,c(s).map((e=>c(i).map((t=>`${e} and ${t}`)).join(", "))).join(", ")),t(o)}function l(e){return e&&"atrule"===e.type}function a(e){return e&&"rule"===e.type}function u(e,c){e.each((e=>{const p=e.parent;a(e)&&e.selector.trim()&&a(p)&&p.selector.trim()?o(e,p,c):l(e)&&a(p)&&p.selector.trim()&&function(e){return s.includes(e.name)}(e)?function(e,o,s,c){if(r(o),n(e,o),e.nodes){const n=o.clone().removeAll().append(e.nodes);e.append(n),t(o),c(n,s)}}(e,p,c,u):l(e)&&l(p)&&function(e,t){return s.includes(e.name)&&e.name===t.name}(e,p)&&i(e,p),"nodes"in e&&e.nodes.length&&u(e,c)}))}const p=()=>({postcssPlugin:"postcss-nesting",Rule(t,{result:n}){u(t,n),t.selector.trim().includes("&")&&function(t,n){let r,o=t.parent;for(;o;){if("rule"===o.type)return;o=o.parent}try{r=e().astSync(t.selector)}catch(e){return void t.warn(n,`Failed to parse selector : "${t.selector}" with message: "${e.message}"`)}r&&(r.walkNesting((t=>{t.replaceWith(e.pseudo({value:":scope"}))})),t.selector=r.toString())}(t,n)}});p.postcss=!0;export{p as default};
