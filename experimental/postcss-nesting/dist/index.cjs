"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var t=e(require("postcss-selector-parser"));function n(e){if(!e.nodes.length)return void e.remove();const t=e.nodes.filter((e=>"comment"===e.type));t.length===e.nodes.length&&e.replaceWith(...t)}function o(e,t){const o=t.index(e);if(o){const e=t.cloneBefore().removeAll().append(t.nodes.slice(0,o));e.raws.semicolon=!0,n(e)}t.before(e),t.raws.semicolon=!0}function r(e){let t=-1;e.each(((n,o)=>{if("decl"===n.type){if(-1===t)return void(t=o);if(t===o-1)return void(t=o);n.remove(),e.insertAfter(t,n),t=e.index(n)}}))}function s(e,s,l){let a=[];try{a=function(e,n,o,r){const s=[];if(0===r.length)return;const l=t.default().astSync(`:is(${o.join(",")})`);for(let o=0;o<r.length;o++){const a=t.default().astSync(r[o]);if(!a)continue;let c=!1;if(a.walk((e=>{"nesting"===e.type&&(c=!0)})),!c){const s=a.nodes[0];let l=!1;if(s.each((e=>"combinator"===e.type&&(l=!0,!1))),0===o){let t=!1;s.each((e=>"tag"===e.type&&(t=!0,!1))),t&&e.warn(n,`Invalid nested rule : "${r[o]}"`)}l||s.insertBefore(s.at(0),t.default.combinator({value:" "})),s.insertBefore(s.at(0),t.default.nesting({}))}a.walk((e=>{"nesting"===e.type&&e.replaceWith(l.clone({}))})),s.push(a.toString())}return s}(e,l,s.selectors,e.selectors)}catch(t){return void e.warn(l,`Failed to transform selectors : "${s.selector}" / "${e.selector}" with message: "${t.message}"`)}r(s),o(e,s),e.selectors=a;"rule"===e.type&&"rule"===s.type&&e.selector===s.selector&&e.append(...s.nodes),n(s)}var l=["container","document","media","supports","layer"];function a(e){const t=[];let n="",o=!1,r=0,s=!1,l=!1;for(const a of e)l?l=!1:"\\"===a?l=!0:s?a===s&&(s=!1):'"'===a||"'"===a?s=a:"("===a?r+=1:")"===a?r>0&&(r-=1):0===r&&","===a&&(o=!0),o?(""!==n&&t.push(n.trim()),n="",o=!1):n+=a;return t.push(n.trim()),t}function c(e,t){var s,l;r(t),o(e,t),e.params=(s=t.params,l=e.params,a(s).map((e=>a(l).map((t=>`${e} and ${t}`)).join(", "))).join(", ")),n(t)}function i(e){return e&&"atrule"===e.type}function u(e){return e&&"rule"===e.type}function p(e,t){e.each((e=>{const a=e.parent;u(e)&&e.selector.trim()&&u(a)&&a.selector.trim()?s(e,a,t):i(e)&&u(a)&&a.selector.trim()&&function(e){return l.includes(e.name)}(e)?function(e,t,s,l){if(r(t),o(e,t),e.nodes){const o=t.clone().removeAll().append(e.nodes);e.append(o),n(t),l(o,s)}}(e,a,t,p):i(e)&&i(a)&&function(e,t){return l.includes(e.name)&&e.name===t.name}(e,a)&&c(e,a),"nodes"in e&&e.nodes.length&&p(e,t)}))}const d=()=>({postcssPlugin:"postcss-nesting",Rule(e,{result:n}){p(e,n),e.selector.trim().includes("&")&&function(e,n){let o,r=e.parent;for(;r;){if("rule"===r.type)return;r=r.parent}try{o=t.default().astSync(e.selector)}catch(t){return void e.warn(n,`Failed to parse selector : "${e.selector}" with message: "${t.message}"`)}o&&(o.walkNesting((e=>{var n,o;"root"===(null==(n=e.parent)||null==(o=n.parent)?void 0:o.type)?e.replaceWith(t.default.pseudo({value:":scope"})):e.replaceWith(t.default.pseudo({value:":is",nodes:[t.default.pseudo({value:":root"}),t.default.pseudo({value:":host"})]}))})),e.selector=o.toString())}(e,n)}});d.postcss=!0,module.exports=d;
