import e from"postcss-selector-parser";import{selectorSpecificity as t}from"@csstools/selector-specificity";const s=s=>{const r={preserve:!0,specificityMatchingName:"does-not-exist",...s||{}},i=":not(#"+r.specificityMatchingName+")",c=":not(."+r.specificityMatchingName+")",o=":not("+r.specificityMatchingName+")";return{postcssPlugin:"css-has-pseudo-experimental",RuleExit:(s,{result:a})=>{if(!s.selector.includes(":has(")||function(e){let t=!1,s=e.parent;for(;!t&&s;)"atrule"===s.type&&(t=s.params.includes(":has(")&&s.params.startsWith("selector(")),s=s.parent;return t}(s))return;const n=s.selectors.map((n=>{if(!n.includes(":has("))return n;let l;try{l=e().astSync(n)}catch(e){return s.warn(a,`Failed to parse selector : ${n}`),n}if(void 0===l)return n;let u=!1;if(l.walkPseudos((t=>{u=u||":has"===t.value&&t.nodes,":visited"===t.value&&t.replaceWith(e.className({value:r.specificityMatchingName})),":any-link"===t.value&&(t.value=":link")})),!u)return n;const p="["+function(e){if(""===e)return"";let t,s="";for(let r=0;r<e.length;r++)t=e.charCodeAt(r).toString(36),s+=0===r?t:"-"+t;return"csstools-has-"+s}(l.toString())+"]",f=t(l);let h=p;for(let e=0;e<f.a;e++)h+=i;const m=Math.max(1,f.b)-1;for(let e=0;e<m;e++)h+=c;for(let e=0;e<f.c;e++)h+=o;return h}));n.join(",")!==s.selectors.join(",")&&(r.preserve?s.cloneBefore({selectors:n}):s.selectors=n)}}};s.postcss=!0;export{s as default};
