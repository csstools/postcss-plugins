---
import BaseHead from '../components/BaseHead.astro';
import Nav from '../components/Nav.astro';
import FeaturesNav from '../components/FeaturesNav.astro';
import FeaturesList from '../components/FeaturesList.astro';
import getPostCSSPresetEnvFeatures from '../helpers/features';
import pkg from '../../package.json';
import cssdbUNPKGURL from '../utils/cssdb_url.mjs';
const response = await fetch(cssdbUNPKGURL);
const cssdb = await response.json();
const features = getPostCSSPresetEnvFeatures(cssdb);
---

<!doctype html>
<html lang="en" dir="ltr">
<head>
	<BaseHead
			title="Features - PostCSS Preset Env - CSSTools"
			description="List of features included in PostCSS Preset Env"
			permalink="https://preset-env.cssdb.org/features"
	/>
</head>
<body>
<Nav permalink="/features" />
<main class="ppe-features">
	<FeaturesNav features={ features } />
	<FeaturesList features={ features } />
</main>
<script>
	function onParsed() {
		initFeatureNav();
		onHashChange();
	}

	!function d() {
		/c/.test(document.readyState) && document.body
			? document.removeEventListener('readystatechange', d) | onParsed()
			: document.addEventListener('readystatechange', d)
	}()

	window.addEventListener('hashchange', onHashChange);

	const hashElements = [];
	const omittedElements = [];
	const stages = [0, 1, 2, 3];
	let stageSelect = null;

	function onHashChange() {
		hashElements.forEach(element => {
			element.removeAttribute('aria-current');
		});

		const selector = `.ppe-features a[href="${location.pathname}${location.hash}"]`;

		hashElements.splice(
			0,
			hashElements.length,
			...Array.prototype.slice.call(
				document.querySelectorAll(selector)
			)
		);

		hashElements.forEach(element => {
			element.setAttribute('aria-current', 'page');
		});

		const stageRegExp = /^#stage-([0-4])$/;

		if (stageRegExp.test(location.hash)) {
			const stageNumber = location.hash.match(stageRegExp)[1];

			updateStage(stageNumber);
		}
	}

	function initFeatureNav() {
		const select = document.querySelector('.ppe-navigation-select');

		select.addEventListener('change', () => {
			location.hash = `#stage-${select.value}`;
		});
	}

	function updateStage(number) {
		omittedElements.forEach(element => {
			element.hidden = false;
		});
		const omittedStages = stages.slice(0, stages.indexOf(Number(number)));
		const selector = omittedStages.map(stage => `[data-stage="${stage}"]`).join(',');

		omittedElements.splice(
			0,
			omittedElements.length,
			...Array.prototype.slice.call(
				selector ? document.querySelectorAll(selector) : []
			)
		);

		omittedElements.forEach(element => {
			element.hidden = true;
		});

		if (stageSelect) {
			stageSelect.value = number;
		}
	}
</script>
</body>
</html>
